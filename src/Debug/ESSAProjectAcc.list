
ESSAProjectAcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009998  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009b38  08009b38  00019b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb4  08009bb4  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bbc  08009bbc  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bbc  08009bbc  00019bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bc0  08009bc0  00019bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08009bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000148  08009d0c  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08009d0c  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003444f  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000367c  00000000  00000000  000545c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024c0  00000000  00000000  00057c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023d8  00000000  00000000  0005a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185c4  00000000  00000000  0005c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebaf  00000000  00000000  00074aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3ea  00000000  00000000  00093653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131a3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a490  00000000  00000000  00131a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000148 	.word	0x20000148
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b20 	.word	0x08009b20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000014c 	.word	0x2000014c
 80001dc:	08009b20 	.word	0x08009b20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f005 fccf 	bl	8005f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f95d 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fa49 	bl	8000a2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fa1d 	bl	80009d8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800059e:	f000 f9c3 	bl	8000928 <MX_TIM3_Init>
    * - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
    * - MOTION_ACCELERO for instance 1
    * - MOTION_MAGNETO for instance 2
    * @retval BSP status
    */
    IKS01A3_MOTION_SENSOR_Init(1, MOTION_ACCELERO);
 80005a2:	2102      	movs	r1, #2
 80005a4:	2001      	movs	r0, #1
 80005a6:	f005 f93d 	bl	8005824 <IKS01A3_MOTION_SENSOR_Init>
    IKS01A3_MOTION_SENSOR_Enable(1, MOTION_ACCELERO);
 80005aa:	2102      	movs	r1, #2
 80005ac:	2001      	movs	r0, #1
 80005ae:	f005 fa35 	bl	8005a1c <IKS01A3_MOTION_SENSOR_Enable>
    HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_1);
 80005b2:	2100      	movs	r1, #0
 80005b4:	4896      	ldr	r0, [pc, #600]	; (8000810 <main+0x288>)
 80005b6:	f007 fdbb 	bl	8008130 <HAL_TIM_OC_Start_IT>
    IKS01A3_MOTION_SENSOR_Axes_t axes;

    char msg[7];
    // Initialize flags to understand the player status in the game
    uint8_t isJumping = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	77fb      	strb	r3, [r7, #31]
    uint8_t isRolling = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	77bb      	strb	r3, [r7, #30]
    uint8_t isShiftingLeft = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	777b      	strb	r3, [r7, #29]
    uint8_t isShiftingRight = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	773b      	strb	r3, [r7, #28]
    uint8_t isBoosting = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	76fb      	strb	r3, [r7, #27]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (isSampling == 1) //TIM3 OC triggered every 10ms
 80005ce:	4b91      	ldr	r3, [pc, #580]	; (8000814 <main+0x28c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d1fb      	bne.n	80005ce <main+0x46>
	  {
		  isSampling = 0;
 80005d6:	4b8f      	ldr	r3, [pc, #572]	; (8000814 <main+0x28c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
		  IKS01A3_MOTION_SENSOR_GetAxes(1, MOTION_ACCELERO, &axes);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	461a      	mov	r2, r3
 80005e2:	2102      	movs	r1, #2
 80005e4:	2001      	movs	r0, #1
 80005e6:	f005 fa5b 	bl	8005aa0 <IKS01A3_MOTION_SENSOR_GetAxes>
		  xAxisReading = axes.x;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	4a8a      	ldr	r2, [pc, #552]	; (8000818 <main+0x290>)
 80005ee:	6013      	str	r3, [r2, #0]
		  xAxisReading_filt = FilterMovingAvg(xAxisReading,0);
 80005f0:	4b89      	ldr	r3, [pc, #548]	; (8000818 <main+0x290>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 facc 	bl	8000b94 <FilterMovingAvg>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a87      	ldr	r2, [pc, #540]	; (800081c <main+0x294>)
 8000600:	6013      	str	r3, [r2, #0]
		  yAxisReading = axes.y;
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	4a86      	ldr	r2, [pc, #536]	; (8000820 <main+0x298>)
 8000606:	6013      	str	r3, [r2, #0]
		  yAxisReading_filt = FilterMovingAvg(yAxisReading,1);
 8000608:	4b85      	ldr	r3, [pc, #532]	; (8000820 <main+0x298>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2101      	movs	r1, #1
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fac0 	bl	8000b94 <FilterMovingAvg>
 8000614:	4603      	mov	r3, r0
 8000616:	4a83      	ldr	r2, [pc, #524]	; (8000824 <main+0x29c>)
 8000618:	6013      	str	r3, [r2, #0]
		  zAxisReading = axes.z;
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	4a82      	ldr	r2, [pc, #520]	; (8000828 <main+0x2a0>)
 800061e:	6013      	str	r3, [r2, #0]
		  zAxisReading_filt = FilterMovingAvg(zAxisReading,2);
 8000620:	4b81      	ldr	r3, [pc, #516]	; (8000828 <main+0x2a0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2102      	movs	r1, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fab4 	bl	8000b94 <FilterMovingAvg>
 800062c:	4603      	mov	r3, r0
 800062e:	4a7f      	ldr	r2, [pc, #508]	; (800082c <main+0x2a4>)
 8000630:	6013      	str	r3, [r2, #0]
		  /* x Axis threshold loop control.
		   * If the x positive threshold is being overcome -> JUMP (Insert the correspondent code)
		   * If the x negative threshold is being overcome -> ROLL (Insert the correspondent code)
		   * Used to jump and roll in the game
		  */
		  if(xAxisReading_filt > xThreshold && isJumping == 0)
 8000632:	4b7a      	ldr	r3, [pc, #488]	; (800081c <main+0x294>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800063a:	dd16      	ble.n	800066a <main+0xe2>
 800063c:	7ffb      	ldrb	r3, [r7, #31]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d113      	bne.n	800066a <main+0xe2>
		  {
			  isJumping = 1; // to ensure to capture only one jump command
 8000642:	2301      	movs	r3, #1
 8000644:	77fb      	strb	r3, [r7, #31]
			  sprintf(msg,"JUMP \n");
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4979      	ldr	r1, [pc, #484]	; (8000830 <main+0x2a8>)
 800064a:	4618      	mov	r0, r3
 800064c:	f008 fe3a 	bl	80092c4 <siprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen( msg),HAL_MAX_DELAY);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdc4 	bl	80001e0 <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	1d39      	adds	r1, r7, #4
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	4874      	ldr	r0, [pc, #464]	; (8000834 <main+0x2ac>)
 8000664:	f008 fb33 	bl	8008cce <HAL_UART_Transmit>
 8000668:	e029      	b.n	80006be <main+0x136>
		  }
		  else if(xAxisReading_filt < -xThreshold && isRolling == 0)
 800066a:	4b6c      	ldr	r3, [pc, #432]	; (800081c <main+0x294>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8000672:	da16      	bge.n	80006a2 <main+0x11a>
 8000674:	7fbb      	ldrb	r3, [r7, #30]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d113      	bne.n	80006a2 <main+0x11a>
		  {
			  isRolling = 1; // to ensure to capture only one jump command
 800067a:	2301      	movs	r3, #1
 800067c:	77bb      	strb	r3, [r7, #30]
			  sprintf(msg,"ROLL \n");
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	496d      	ldr	r1, [pc, #436]	; (8000838 <main+0x2b0>)
 8000682:	4618      	mov	r0, r3
 8000684:	f008 fe1e 	bl	80092c4 <siprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fda8 	bl	80001e0 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29a      	uxth	r2, r3
 8000694:	1d39      	adds	r1, r7, #4
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	4866      	ldr	r0, [pc, #408]	; (8000834 <main+0x2ac>)
 800069c:	f008 fb17 	bl	8008cce <HAL_UART_Transmit>
 80006a0:	e00d      	b.n	80006be <main+0x136>
		  }
		  else if(xAxisReading_filt > -xThreshold && xAxisReading_filt < xThreshold)
 80006a2:	4b5e      	ldr	r3, [pc, #376]	; (800081c <main+0x294>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 80006aa:	dd08      	ble.n	80006be <main+0x136>
 80006ac:	4b5b      	ldr	r3, [pc, #364]	; (800081c <main+0x294>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80006b4:	da03      	bge.n	80006be <main+0x136>
		  {
			  isJumping = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	77fb      	strb	r3, [r7, #31]
			  isRolling = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	77bb      	strb	r3, [r7, #30]
		   * If the y positive threshold is being overcome -> LEFT (Insert the correspondent code)
		   * If the y negative threshold is being overcome -> RIGHT (Insert the correspondent code)
		   * If between the two y threshold -> keeps the player in the middle
		   * Used to shift left or right in the game
		  */
		  if(yAxisReading_filt > yThreshold && isShiftingLeft == 0) // to ensure to capture only one left command
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <main+0x29c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2bfa      	cmp	r3, #250	; 0xfa
 80006c4:	dd16      	ble.n	80006f4 <main+0x16c>
 80006c6:	7f7b      	ldrb	r3, [r7, #29]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d113      	bne.n	80006f4 <main+0x16c>
		  {
			  isShiftingLeft = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	777b      	strb	r3, [r7, #29]
			  sprintf(msg,"LEFT \n");
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	495a      	ldr	r1, [pc, #360]	; (800083c <main+0x2b4>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f008 fdf5 	bl	80092c4 <siprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd7f 	bl	80001e0 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	1d39      	adds	r1, r7, #4
 80006e8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ec:	4851      	ldr	r0, [pc, #324]	; (8000834 <main+0x2ac>)
 80006ee:	f008 faee 	bl	8008cce <HAL_UART_Transmit>
 80006f2:	e050      	b.n	8000796 <main+0x20e>
		  }
		  else if(yAxisReading_filt < -yThreshold && isShiftingRight == 0) // to ensure to capture only one right command
 80006f4:	4b4b      	ldr	r3, [pc, #300]	; (8000824 <main+0x29c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f113 0ffa 	cmn.w	r3, #250	; 0xfa
 80006fc:	da16      	bge.n	800072c <main+0x1a4>
 80006fe:	7f3b      	ldrb	r3, [r7, #28]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <main+0x1a4>
		  {
			  isShiftingRight = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	773b      	strb	r3, [r7, #28]
			  sprintf(msg,"RIGHT\n");
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	494d      	ldr	r1, [pc, #308]	; (8000840 <main+0x2b8>)
 800070c:	4618      	mov	r0, r3
 800070e:	f008 fdd9 	bl	80092c4 <siprintf>
			  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd63 	bl	80001e0 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	1d39      	adds	r1, r7, #4
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	4843      	ldr	r0, [pc, #268]	; (8000834 <main+0x2ac>)
 8000726:	f008 fad2 	bl	8008cce <HAL_UART_Transmit>
 800072a:	e034      	b.n	8000796 <main+0x20e>
		  }
		  else if(yAxisReading_filt > -yThreshold && yAxisReading_filt < yThreshold)
 800072c:	4b3d      	ldr	r3, [pc, #244]	; (8000824 <main+0x29c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f113 0ff9 	cmn.w	r3, #249	; 0xf9
 8000734:	db2f      	blt.n	8000796 <main+0x20e>
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <main+0x29c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2bf9      	cmp	r3, #249	; 0xf9
 800073c:	dc2b      	bgt.n	8000796 <main+0x20e>
		  {
			  if (isShiftingLeft == 1)
 800073e:	7f7b      	ldrb	r3, [r7, #29]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d112      	bne.n	800076a <main+0x1e2>
			  {
				  sprintf(msg,"RIGHT\n");
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	493e      	ldr	r1, [pc, #248]	; (8000840 <main+0x2b8>)
 8000748:	4618      	mov	r0, r3
 800074a:	f008 fdbb 	bl	80092c4 <siprintf>
				  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd45 	bl	80001e0 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	1d39      	adds	r1, r7, #4
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	4834      	ldr	r0, [pc, #208]	; (8000834 <main+0x2ac>)
 8000762:	f008 fab4 	bl	8008cce <HAL_UART_Transmit>
				  isShiftingLeft = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	777b      	strb	r3, [r7, #29]
			  }
			  if (isShiftingRight == 1)
 800076a:	7f3b      	ldrb	r3, [r7, #28]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d112      	bne.n	8000796 <main+0x20e>
			  {
				  sprintf(msg,"LEFT \n");
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4932      	ldr	r1, [pc, #200]	; (800083c <main+0x2b4>)
 8000774:	4618      	mov	r0, r3
 8000776:	f008 fda5 	bl	80092c4 <siprintf>
				  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd2f 	bl	80001e0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	1d39      	adds	r1, r7, #4
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	4829      	ldr	r0, [pc, #164]	; (8000834 <main+0x2ac>)
 800078e:	f008 fa9e 	bl	8008cce <HAL_UART_Transmit>
				  isShiftingRight = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	773b      	strb	r3, [r7, #28]

		 /* z Axis threshold loop control.
		  * If the z positive threshold is being overcome -> SPACE (Insert the correspondent code)
		  * Used to start a new game or resume the game after having paused it. Used also to activate the boost in the game
		 */
		 if(zAxisReading_filt > zThreshold && isBoosting == 0) // to ensure to capture only one boost command
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <main+0x2a4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800079e:	dd16      	ble.n	80007ce <main+0x246>
 80007a0:	7efb      	ldrb	r3, [r7, #27]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d113      	bne.n	80007ce <main+0x246>
		 {
			 isBoosting = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	76fb      	strb	r3, [r7, #27]
			 sprintf(msg,"SPACE\n");
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4925      	ldr	r1, [pc, #148]	; (8000844 <main+0x2bc>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f008 fd88 	bl	80092c4 <siprintf>
			 HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd12 	bl	80001e0 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	1d39      	adds	r1, r7, #4
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	481b      	ldr	r0, [pc, #108]	; (8000834 <main+0x2ac>)
 80007c8:	f008 fa81 	bl	8008cce <HAL_UART_Transmit>
 80007cc:	e006      	b.n	80007dc <main+0x254>
		 }
		 else if(zAxisReading_filt < zThreshold)
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <main+0x2a4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80007d6:	da01      	bge.n	80007dc <main+0x254>
		 {
			 isBoosting = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	76fb      	strb	r3, [r7, #27]

		 /* Button press loop control.
		  * If the blue button (GPIO_PIN_13) is pressed -> ESC (Insert the correspondent code)
		  * Used to pause the game
		 */
		 if (isBtnPressed==1)
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <main+0x2c0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	f47f aef4 	bne.w	80005ce <main+0x46>
		 {
			 isBtnPressed=0;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <main+0x2c0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
			 sprintf(msg,"ESC  \n");
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4917      	ldr	r1, [pc, #92]	; (800084c <main+0x2c4>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f008 fd67 	bl	80092c4 <siprintf>
			 HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fcf1 	bl	80001e0 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	1d39      	adds	r1, r7, #4
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <main+0x2ac>)
 800080a:	f008 fa60 	bl	8008cce <HAL_UART_Transmit>
	  if (isSampling == 1) //TIM3 OC triggered every 10ms
 800080e:	e6de      	b.n	80005ce <main+0x46>
 8000810:	2000039c 	.word	0x2000039c
 8000814:	20000164 	.word	0x20000164
 8000818:	2000042c 	.word	0x2000042c
 800081c:	200003e4 	.word	0x200003e4
 8000820:	20000394 	.word	0x20000394
 8000824:	20000390 	.word	0x20000390
 8000828:	20000430 	.word	0x20000430
 800082c:	20000398 	.word	0x20000398
 8000830:	08009b38 	.word	0x08009b38
 8000834:	200003e8 	.word	0x200003e8
 8000838:	08009b40 	.word	0x08009b40
 800083c:	08009b48 	.word	0x08009b48
 8000840:	08009b50 	.word	0x08009b50
 8000844:	08009b58 	.word	0x08009b58
 8000848:	200002b0 	.word	0x200002b0
 800084c:	08009b60 	.word	0x08009b60

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	; 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f008 fd28 	bl	80092b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <SystemClock_Config+0xd0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a28      	ldr	r2, [pc, #160]	; (8000920 <SystemClock_Config+0xd0>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <SystemClock_Config+0xd0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <SystemClock_Config+0xd4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <SystemClock_Config+0xd4>)
 800089e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <SystemClock_Config+0xd4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c4:	2310      	movs	r3, #16
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d2:	2307      	movs	r3, #7
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4618      	mov	r0, r3
 80008dc:	f006 ff64 	bl	80077a8 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008e6:	f000 f9c3 	bl	8000c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2102      	movs	r1, #2
 8000906:	4618      	mov	r0, r3
 8000908:	f007 f9c6 	bl	8007c98 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000912:	f000 f9ad 	bl	8000c70 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	; 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_TIM3_Init+0xa8>)
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <MX_TIM3_Init+0xac>)
 800094e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_TIM3_Init+0xa8>)
 8000952:	f240 3247 	movw	r2, #839	; 0x347
 8000956:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_TIM3_Init+0xa8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_TIM3_Init+0xa8>)
 8000960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000964:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_TIM3_Init+0xa8>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_TIM3_Init+0xa8>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000972:	4817      	ldr	r0, [pc, #92]	; (80009d0 <MX_TIM3_Init+0xa8>)
 8000974:	f007 fb8c 	bl	8008090 <HAL_TIM_OC_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800097e:	f000 f977 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	4619      	mov	r1, r3
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <MX_TIM3_Init+0xa8>)
 8000992:	f008 f8cd 	bl	8008b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800099c:	f000 f968 	bl	8000c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80009a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_TIM3_Init+0xa8>)
 80009ba:	f007 fdbf 	bl	800853c <HAL_TIM_OC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80009c4:	f000 f954 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000039c 	.word	0x2000039c
 80009d4:	40000400 	.word	0x40000400

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_USART2_UART_Init+0x50>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f008 f910 	bl	8008c34 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a1a:	f000 f929 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200003e8 	.word	0x200003e8
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a30      	ldr	r2, [pc, #192]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_GPIO_Init+0xe0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	4816      	ldr	r0, [pc, #88]	; (8000b10 <MX_GPIO_Init+0xe4>)
 8000ab8:	f005 fe26 	bl	8006708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <MX_GPIO_Init+0xe8>)
 8000ad4:	f005 fbb0 	bl	8006238 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_GPIO_Init+0xe4>)
 8000af0:	f005 fba2 	bl	8006238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2028      	movs	r0, #40	; 0x28
 8000afa:	f005 fb66 	bl	80061ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000afe:	2028      	movs	r0, #40	; 0x28
 8000b00:	f005 fb7f 	bl	8006202 <HAL_NVIC_EnableIRQ>

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback (TIM_HandleTypeDef *htim) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
// Operations to be performed each time the OC is called (every 10ms)
	if (htim == &htim3)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_TIM_OC_DelayElapsedCallback+0x48>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d116      	bne.n	8000b56 <HAL_TIM_OC_DelayElapsedCallback+0x3e>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7f1b      	ldrb	r3, [r3, #28]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d112      	bne.n	8000b56 <HAL_TIM_OC_DelayElapsedCallback+0x3e>
		{
			pulse = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1000);
 8000b30:	2100      	movs	r1, #0
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f007 fd5e 	bl	80085f4 <HAL_TIM_ReadCapturedValue>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000b44:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, pulse);
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000b48:	881a      	ldrh	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	635a      	str	r2, [r3, #52]	; 0x34
			isSampling = 1;
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000039c 	.word	0x2000039c
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000164 	.word	0x20000164

08000b6c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13 )
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b7c:	d102      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x18>
	{
		// Operations to be performed each time the blue button (GPIO_PIN_13) is pressed
		isBtnPressed = 1;
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
	}
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	200002b0 	.word	0x200002b0

08000b94 <FilterMovingAvg>:
  * - Axis y for instance 1
  * - Axis z for instance 2
  * @retval filtered value according to the moving average approach
  */
int32_t FilterMovingAvg(int32_t noisy_value, uint8_t axis) // i=0 at the beginning
{
 8000b94:	b490      	push	{r4, r7}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
	int32_t old_noisy_value;
	old_noisy_value = accelero_readings[axis][i[axis]];
 8000ba0:	78fa      	ldrb	r2, [r7, #3]
 8000ba2:	78fb      	ldrb	r3, [r7, #3]
 8000ba4:	492d      	ldr	r1, [pc, #180]	; (8000c5c <FilterMovingAvg+0xc8>)
 8000ba6:	5ccb      	ldrb	r3, [r1, r3]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	492d      	ldr	r1, [pc, #180]	; (8000c60 <FilterMovingAvg+0xcc>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	009a      	lsls	r2, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4403      	add	r3, r0
 8000bb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bbc:	60fb      	str	r3, [r7, #12]
	accelero_readings[axis][i[axis]] = noisy_value;
 8000bbe:	78fa      	ldrb	r2, [r7, #3]
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	4926      	ldr	r1, [pc, #152]	; (8000c5c <FilterMovingAvg+0xc8>)
 8000bc4:	5ccb      	ldrb	r3, [r1, r3]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	4925      	ldr	r1, [pc, #148]	; (8000c60 <FilterMovingAvg+0xcc>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	009a      	lsls	r2, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4403      	add	r3, r0
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	sum_readings[axis] = sum_readings[axis] + accelero_readings[axis][i[axis]]-old_noisy_value;
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <FilterMovingAvg+0xd0>)
 8000be0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000be4:	78fa      	ldrb	r2, [r7, #3]
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	481c      	ldr	r0, [pc, #112]	; (8000c5c <FilterMovingAvg+0xc8>)
 8000bea:	5cc3      	ldrb	r3, [r0, r3]
 8000bec:	461c      	mov	r4, r3
 8000bee:	481c      	ldr	r0, [pc, #112]	; (8000c60 <FilterMovingAvg+0xcc>)
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	009a      	lsls	r2, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4423      	add	r3, r4
 8000bfc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000c00:	4419      	add	r1, r3
 8000c02:	78fb      	ldrb	r3, [r7, #3]
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	1a8a      	subs	r2, r1, r2
 8000c08:	4916      	ldr	r1, [pc, #88]	; (8000c64 <FilterMovingAvg+0xd0>)
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	filt_value[axis] = (int32_t)sum_readings[axis]/SHIFT;
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <FilterMovingAvg+0xd0>)
 8000c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c16:	78fa      	ldrb	r2, [r7, #3]
 8000c18:	4913      	ldr	r1, [pc, #76]	; (8000c68 <FilterMovingAvg+0xd4>)
 8000c1a:	fb81 0103 	smull	r0, r1, r1, r3
 8000c1e:	10c9      	asrs	r1, r1, #3
 8000c20:	17db      	asrs	r3, r3, #31
 8000c22:	1acb      	subs	r3, r1, r3
 8000c24:	4911      	ldr	r1, [pc, #68]	; (8000c6c <FilterMovingAvg+0xd8>)
 8000c26:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	i[axis]++;
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <FilterMovingAvg+0xc8>)
 8000c2e:	5cd2      	ldrb	r2, [r2, r3]
 8000c30:	3201      	adds	r2, #1
 8000c32:	b2d1      	uxtb	r1, r2
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <FilterMovingAvg+0xc8>)
 8000c36:	54d1      	strb	r1, [r2, r3]
	if (i[axis] == SHIFT)
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <FilterMovingAvg+0xc8>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	2b19      	cmp	r3, #25
 8000c40:	d103      	bne.n	8000c4a <FilterMovingAvg+0xb6>
	{
		i[axis] = 0;
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <FilterMovingAvg+0xc8>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	54d1      	strb	r1, [r2, r3]
	}
	return filt_value[axis];
 8000c4a:	78fb      	ldrb	r3, [r7, #3]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <FilterMovingAvg+0xd8>)
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc90      	pop	{r4, r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000180 	.word	0x20000180
 8000c60:	20000184 	.word	0x20000184
 8000c64:	20000174 	.word	0x20000174
 8000c68:	51eb851f 	.word	0x51eb851f
 8000c6c:	20000168 	.word	0x20000168

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f005 fa7a 	bl	80061b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_TIM_OC_MspInit+0x48>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d115      	bne.n	8000d0a <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_TIM_OC_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_TIM_OC_MspInit+0x4c>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_OC_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	201d      	movs	r0, #29
 8000d00:	f005 fa63 	bl	80061ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d04:	201d      	movs	r0, #29
 8000d06:	f005 fa7c 	bl	8006202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40000400 	.word	0x40000400
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12b      	bne.n	8000d96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d76:	230c      	movs	r3, #12
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_UART_MspInit+0x8c>)
 8000d92:	f005 fa51 	bl	8006238 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f005 f8ec 	bl	8005fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <TIM3_IRQHandler+0x10>)
 8000e06:	f007 fa91 	bl	800832c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000039c 	.word	0x2000039c

08000e14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e1c:	f005 fc8e 	bl	800673c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <BSP_I2C1_Init+0x58>)
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <BSP_I2C1_Init+0x5c>)
 8000e32:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <BSP_I2C1_Init+0x60>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	4912      	ldr	r1, [pc, #72]	; (8000e84 <BSP_I2C1_Init+0x60>)
 8000e3c:	600a      	str	r2, [r1, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d117      	bne.n	8000e72 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <BSP_I2C1_Init+0x58>)
 8000e44:	f006 f93a 	bl	80070bc <HAL_I2C_GetState>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d111      	bne.n	8000e72 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000e4e:	480b      	ldr	r0, [pc, #44]	; (8000e7c <BSP_I2C1_Init+0x58>)
 8000e50:	f000 f8e2 	bl	8001018 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10b      	bne.n	8000e72 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <BSP_I2C1_Init+0x58>)
 8000e5c:	f000 f8a8 	bl	8000fb0 <MX_I2C1_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000e66:	f06f 0307 	mvn.w	r3, #7
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	e001      	b.n	8000e72 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000e72:	687b      	ldr	r3, [r7, #4]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000434 	.word	0x20000434
 8000e80:	40005400 	.word	0x40005400
 8000e84:	200002b4 	.word	0x200002b4

08000e88 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <BSP_I2C1_DeInit+0x48>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d014      	beq.n	8000ec4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <BSP_I2C1_DeInit+0x48>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <BSP_I2C1_DeInit+0x48>)
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <BSP_I2C1_DeInit+0x48>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10b      	bne.n	8000ec4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <BSP_I2C1_DeInit+0x4c>)
 8000eae:	f000 f8fd 	bl	80010ac <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000eb2:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <BSP_I2C1_DeInit+0x4c>)
 8000eb4:	f005 fd9e 	bl	80069f4 <HAL_I2C_DeInit>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000ebe:	f06f 0307 	mvn.w	r3, #7
 8000ec2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200002b4 	.word	0x200002b4
 8000ed4:	20000434 	.word	0x20000434

08000ed8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	60ba      	str	r2, [r7, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	81fb      	strh	r3, [r7, #14]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	81bb      	strh	r3, [r7, #12]
 8000eea:	4613      	mov	r3, r2
 8000eec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000ef2:	89ba      	ldrh	r2, [r7, #12]
 8000ef4:	89f9      	ldrh	r1, [r7, #14]
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <BSP_I2C1_WriteReg+0x60>)
 8000f08:	f005 fdb8 	bl	8006a7c <HAL_I2C_Mem_Write>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00c      	beq.n	8000f2c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <BSP_I2C1_WriteReg+0x60>)
 8000f14:	f006 f8e0 	bl	80070d8 <HAL_I2C_GetError>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d103      	bne.n	8000f26 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f1e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e002      	b.n	8000f2c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f26:	f06f 0303 	mvn.w	r3, #3
 8000f2a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000f2c:	697b      	ldr	r3, [r7, #20]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000434 	.word	0x20000434

08000f3c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	60ba      	str	r2, [r7, #8]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4603      	mov	r3, r0
 8000f48:	81fb      	strh	r3, [r7, #14]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	81bb      	strh	r3, [r7, #12]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000f56:	89ba      	ldrh	r2, [r7, #12]
 8000f58:	89f9      	ldrh	r1, [r7, #14]
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <BSP_I2C1_ReadReg+0x60>)
 8000f6c:	f005 fe80 	bl	8006c70 <HAL_I2C_Mem_Read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00c      	beq.n	8000f90 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <BSP_I2C1_ReadReg+0x60>)
 8000f78:	f006 f8ae 	bl	80070d8 <HAL_I2C_GetError>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d103      	bne.n	8000f8a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f82:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e002      	b.n	8000f90 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f8a:	f06f 0303 	mvn.w	r3, #3
 8000f8e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000f90:	697b      	ldr	r3, [r7, #20]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000434 	.word	0x20000434

08000fa0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000fa4:	f005 f82a 	bl	8005ffc <HAL_GetTick>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <MX_I2C1_Init+0x60>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <MX_I2C1_Init+0x64>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fda:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f005 fbb9 	bl	800676c <HAL_I2C_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40005400 	.word	0x40005400
 8001014:	00061a80 	.word	0x00061a80

08001018 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <I2C1_MspInit+0x8c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a1e      	ldr	r2, [pc, #120]	; (80010a4 <I2C1_MspInit+0x8c>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <I2C1_MspInit+0x8c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800103c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001042:	2312      	movs	r3, #18
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800104e:	2304      	movs	r3, #4
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <I2C1_MspInit+0x90>)
 800105a:	f005 f8ed 	bl	8006238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800105e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001064:	2312      	movs	r3, #18
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001070:	2304      	movs	r3, #4
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <I2C1_MspInit+0x90>)
 800107c:	f005 f8dc 	bl	8006238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <I2C1_MspInit+0x8c>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <I2C1_MspInit+0x8c>)
 800108a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <I2C1_MspInit+0x8c>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020400 	.word	0x40020400

080010ac <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <I2C1_MspDeInit+0x30>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <I2C1_MspDeInit+0x30>)
 80010ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <I2C1_MspDeInit+0x34>)
 80010c6:	f005 fa3b 	bl	8006540 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80010ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <I2C1_MspDeInit+0x34>)
 80010d0:	f005 fa36 	bl	8006540 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f008 f8a4 	bl	8009260 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20018000 	.word	0x20018000
 8001144:	00000400 	.word	0x00000400
 8001148:	200002b8 	.word	0x200002b8
 800114c:	200004a8 	.word	0x200004a8

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117a:	490e      	ldr	r1, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001190:	4c0b      	ldr	r4, [pc, #44]	; (80011c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffd7 	bl	8001150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f008 f863 	bl	800926c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff f9ef 	bl	8000588 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 80011b8:	08009bc4 	.word	0x08009bc4
  ldr r2, =_sbss
 80011bc:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 80011c0:	200004a8 	.word	0x200004a8

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>
	...

080011c8 <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d103      	bne.n	80011e4 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e04d      	b.n	8001280 <LIS2DW12_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	7b1a      	ldrb	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <LIS2DW12_RegisterBusIO+0xc4>)
 8001220:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <LIS2DW12_RegisterBusIO+0xc8>)
 8001226:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e020      	b.n	8001280 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4798      	blx	r3
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <LIS2DW12_RegisterBusIO+0x8a>
    {
      ret = LIS2DW12_ERROR;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e016      	b.n	8001280 <LIS2DW12_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d112      	bne.n	8001280 <LIS2DW12_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10d      	bne.n	8001280 <LIS2DW12_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001264:	2305      	movs	r3, #5
 8001266:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8001268:	7afb      	ldrb	r3, [r7, #11]
 800126a:	461a      	mov	r2, r3
 800126c:	2121      	movs	r1, #33	; 0x21
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fd87 	bl	8001d82 <LIS2DW12_Write_Reg>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <LIS2DW12_RegisterBusIO+0xb8>
          {
            ret = LIS2DW12_ERROR;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001280:	68fb      	ldr	r3, [r7, #12]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	08002115 	.word	0x08002115
 8001290:	0800214b 	.word	0x0800214b

08001294 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	331c      	adds	r3, #28
 80012a0:	2101      	movs	r1, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fa94 	bl	80027d0 <lis2dw12_auto_increment_set>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e04b      	b.n	800134c <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	331c      	adds	r3, #28
 80012b8:	2101      	movs	r1, #1
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 f9a8 	bl	8002610 <lis2dw12_block_data_update_set>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e03f      	b.n	800134c <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	331c      	adds	r3, #28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 faa2 	bl	800281c <lis2dw12_fifo_mode_set>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e033      	b.n	800134c <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	331c      	adds	r3, #28
 80012e8:	2104      	movs	r1, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 ff78 	bl	80021e0 <lis2dw12_power_mode_set>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e027      	b.n	800134c <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <LIS2DW12_Init+0xc0>)
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	331c      	adds	r3, #28
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f001 f869 	bl	80023f0 <lis2dw12_data_rate_set>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	e010      	b.n	800134c <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	331c      	adds	r3, #28
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f001 f993 	bl	800265c <lis2dw12_full_scale_set>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	e004      	b.n	800134c <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	42c80000 	.word	0x42c80000

08001358 <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f888 	bl	8001476 <LIS2DW12_ACC_Disable>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	e010      	b.n	8001394 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2DW12_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	331c      	adds	r3, #28
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 f9fe 	bl	80027ae <lis2dw12_device_id_get>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	e000      	b.n	80013c0 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2200      	movs	r2, #0
 80013e2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2210      	movs	r2, #16
 80013f4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4a06      	ldr	r2, [pc, #24]	; (8001420 <LIS2DW12_GetCapabilities+0x58>)
 8001408:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	44c80000 	.word	0x44c80000

08001424 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e019      	b.n	800146e <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800144c:	461a      	mov	r2, r3
 800144e:	eeb0 0a67 	vmov.f32	s0, s15
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fcb0 	bl	8001db8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <LIS2DW12_ACC_Enable+0x40>
  {
    return LIS2DW12_ERROR;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e004      	b.n	800146e <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e010      	b.n	80014ae <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	331c      	adds	r3, #28
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f000 ffac 	bl	80023f0 <lis2dw12_data_rate_set>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e004      	b.n	80014ae <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2DW12_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	331c      	adds	r3, #28
 80014ca:	f107 020b 	add.w	r2, r7, #11
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f8e9 	bl	80026a8 <lis2dw12_full_scale_get>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	e0a0      	b.n	8001624 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	331c      	adds	r3, #28
 80014e6:	f107 020a 	add.w	r2, r7, #10
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fec5 	bl	800227c <lis2dw12_power_mode_get>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	e092      	b.n	8001624 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 80014fe:	7abb      	ldrb	r3, [r7, #10]
 8001500:	2b1b      	cmp	r3, #27
 8001502:	f200 8087 	bhi.w	8001614 <LIS2DW12_ACC_GetSensitivity+0x15c>
 8001506:	a201      	add	r2, pc, #4	; (adr r2, 800150c <LIS2DW12_ACC_GetSensitivity+0x54>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800157d 	.word	0x0800157d
 8001510:	080015c9 	.word	0x080015c9
 8001514:	080015c9 	.word	0x080015c9
 8001518:	080015c9 	.word	0x080015c9
 800151c:	080015c9 	.word	0x080015c9
 8001520:	08001615 	.word	0x08001615
 8001524:	08001615 	.word	0x08001615
 8001528:	08001615 	.word	0x08001615
 800152c:	0800157d 	.word	0x0800157d
 8001530:	080015c9 	.word	0x080015c9
 8001534:	080015c9 	.word	0x080015c9
 8001538:	080015c9 	.word	0x080015c9
 800153c:	08001615 	.word	0x08001615
 8001540:	08001615 	.word	0x08001615
 8001544:	08001615 	.word	0x08001615
 8001548:	08001615 	.word	0x08001615
 800154c:	0800157d 	.word	0x0800157d
 8001550:	080015c9 	.word	0x080015c9
 8001554:	080015c9 	.word	0x080015c9
 8001558:	080015c9 	.word	0x080015c9
 800155c:	080015c9 	.word	0x080015c9
 8001560:	08001615 	.word	0x08001615
 8001564:	08001615 	.word	0x08001615
 8001568:	08001615 	.word	0x08001615
 800156c:	0800157d 	.word	0x0800157d
 8001570:	080015c9 	.word	0x080015c9
 8001574:	080015c9 	.word	0x080015c9
 8001578:	080015c9 	.word	0x080015c9
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d81a      	bhi.n	80015b8 <LIS2DW12_ACC_GetSensitivity+0x100>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001599 	.word	0x08001599
 800158c:	080015a1 	.word	0x080015a1
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015b1 	.word	0x080015b1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	4a24      	ldr	r2, [pc, #144]	; (800162c <LIS2DW12_ACC_GetSensitivity+0x174>)
 800159c:	601a      	str	r2, [r3, #0]
           break;
 800159e:	e012      	b.n	80015c6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <LIS2DW12_ACC_GetSensitivity+0x178>)
 80015a4:	601a      	str	r2, [r3, #0]
          break;
 80015a6:	e00e      	b.n	80015c6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 80015ac:	601a      	str	r2, [r3, #0]
           break;
 80015ae:	e00a      	b.n	80015c6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4a21      	ldr	r2, [pc, #132]	; (8001638 <LIS2DW12_ACC_GetSensitivity+0x180>)
 80015b4:	601a      	str	r2, [r3, #0]
          break;
 80015b6:	e006      	b.n	80015c6 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	4a20      	ldr	r2, [pc, #128]	; (800163c <LIS2DW12_ACC_GetSensitivity+0x184>)
 80015bc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	60fb      	str	r3, [r7, #12]
          break;
 80015c4:	bf00      	nop
      }
      break;
 80015c6:	e02c      	b.n	8001622 <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d81a      	bhi.n	8001604 <LIS2DW12_ACC_GetSensitivity+0x14c>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	080015e5 	.word	0x080015e5
 80015d8:	080015ed 	.word	0x080015ed
 80015dc:	080015f5 	.word	0x080015f5
 80015e0:	080015fd 	.word	0x080015fd
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <LIS2DW12_ACC_GetSensitivity+0x188>)
 80015e8:	601a      	str	r2, [r3, #0]
           break;
 80015ea:	e012      	b.n	8001612 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 80015f0:	601a      	str	r2, [r3, #0]
          break;
 80015f2:	e00e      	b.n	8001612 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <LIS2DW12_ACC_GetSensitivity+0x174>)
 80015f8:	601a      	str	r2, [r3, #0]
           break;
 80015fa:	e00a      	b.n	8001612 <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <LIS2DW12_ACC_GetSensitivity+0x178>)
 8001600:	601a      	str	r2, [r3, #0]
          break;
 8001602:	e006      	b.n	8001612 <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001608:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	60fb      	str	r3, [r7, #12]
          break;
 8001610:	bf00      	nop
      }
      break;
 8001612:	e006      	b.n	8001622 <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <LIS2DW12_ACC_GetSensitivity+0x184>)
 8001618:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	60fb      	str	r3, [r7, #12]
      break;
 8001620:	bf00      	nop
  }

  return ret;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	3f79db23 	.word	0x3f79db23
 8001630:	3ff9db23 	.word	0x3ff9db23
 8001634:	4079db23 	.word	0x4079db23
 8001638:	40f9db23 	.word	0x40f9db23
 800163c:	bf800000 	.word	0xbf800000
 8001640:	3e79db23 	.word	0x3e79db23
 8001644:	3ef9db23 	.word	0x3ef9db23

08001648 <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	331c      	adds	r3, #28
 800165a:	f107 020b 	add.w	r2, r7, #11
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f000 ff0b 	bl	800247c <lis2dw12_data_rate_get>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	e1d4      	b.n	8001a1c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	331c      	adds	r3, #28
 8001676:	f107 020a 	add.w	r2, r7, #10
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fdfd 	bl	800227c <lis2dw12_power_mode_get>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	e1c6      	b.n	8001a1c <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 800168e:	7afb      	ldrb	r3, [r7, #11]
 8001690:	2b32      	cmp	r3, #50	; 0x32
 8001692:	f200 81bb 	bhi.w	8001a0c <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	08001769 	.word	0x08001769
 80016a0:	08001773 	.word	0x08001773
 80016a4:	08001811 	.word	0x08001811
 80016a8:	08001819 	.word	0x08001819
 80016ac:	08001821 	.word	0x08001821
 80016b0:	08001829 	.word	0x08001829
 80016b4:	08001831 	.word	0x08001831
 80016b8:	08001839 	.word	0x08001839
 80016bc:	080018d5 	.word	0x080018d5
 80016c0:	08001971 	.word	0x08001971
 80016c4:	08001a0d 	.word	0x08001a0d
 80016c8:	08001a0d 	.word	0x08001a0d
 80016cc:	08001a0d 	.word	0x08001a0d
 80016d0:	08001a0d 	.word	0x08001a0d
 80016d4:	08001a0d 	.word	0x08001a0d
 80016d8:	08001a0d 	.word	0x08001a0d
 80016dc:	08001a0d 	.word	0x08001a0d
 80016e0:	08001a0d 	.word	0x08001a0d
 80016e4:	08001769 	.word	0x08001769
 80016e8:	08001a0d 	.word	0x08001a0d
 80016ec:	08001a0d 	.word	0x08001a0d
 80016f0:	08001a0d 	.word	0x08001a0d
 80016f4:	08001a0d 	.word	0x08001a0d
 80016f8:	08001a0d 	.word	0x08001a0d
 80016fc:	08001a0d 	.word	0x08001a0d
 8001700:	08001a0d 	.word	0x08001a0d
 8001704:	08001a0d 	.word	0x08001a0d
 8001708:	08001a0d 	.word	0x08001a0d
 800170c:	08001a0d 	.word	0x08001a0d
 8001710:	08001a0d 	.word	0x08001a0d
 8001714:	08001a0d 	.word	0x08001a0d
 8001718:	08001a0d 	.word	0x08001a0d
 800171c:	08001a0d 	.word	0x08001a0d
 8001720:	08001a0d 	.word	0x08001a0d
 8001724:	08001a0d 	.word	0x08001a0d
 8001728:	08001a0d 	.word	0x08001a0d
 800172c:	08001a0d 	.word	0x08001a0d
 8001730:	08001a0d 	.word	0x08001a0d
 8001734:	08001a0d 	.word	0x08001a0d
 8001738:	08001a0d 	.word	0x08001a0d
 800173c:	08001a0d 	.word	0x08001a0d
 8001740:	08001a0d 	.word	0x08001a0d
 8001744:	08001a0d 	.word	0x08001a0d
 8001748:	08001a0d 	.word	0x08001a0d
 800174c:	08001a0d 	.word	0x08001a0d
 8001750:	08001a0d 	.word	0x08001a0d
 8001754:	08001a0d 	.word	0x08001a0d
 8001758:	08001a0d 	.word	0x08001a0d
 800175c:	08001a0d 	.word	0x08001a0d
 8001760:	08001a0d 	.word	0x08001a0d
 8001764:	08001769 	.word	0x08001769
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
      break;
 8001770:	e153      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001772:	7abb      	ldrb	r3, [r7, #10]
 8001774:	2b1b      	cmp	r3, #27
 8001776:	d843      	bhi.n	8001800 <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	080017f9 	.word	0x080017f9
 8001784:	080017f9 	.word	0x080017f9
 8001788:	080017f9 	.word	0x080017f9
 800178c:	080017f9 	.word	0x080017f9
 8001790:	080017f1 	.word	0x080017f1
 8001794:	08001801 	.word	0x08001801
 8001798:	08001801 	.word	0x08001801
 800179c:	08001801 	.word	0x08001801
 80017a0:	080017f9 	.word	0x080017f9
 80017a4:	080017f9 	.word	0x080017f9
 80017a8:	080017f9 	.word	0x080017f9
 80017ac:	080017f9 	.word	0x080017f9
 80017b0:	08001801 	.word	0x08001801
 80017b4:	08001801 	.word	0x08001801
 80017b8:	08001801 	.word	0x08001801
 80017bc:	08001801 	.word	0x08001801
 80017c0:	080017f9 	.word	0x080017f9
 80017c4:	080017f9 	.word	0x080017f9
 80017c8:	080017f9 	.word	0x080017f9
 80017cc:	080017f9 	.word	0x080017f9
 80017d0:	080017f1 	.word	0x080017f1
 80017d4:	08001801 	.word	0x08001801
 80017d8:	08001801 	.word	0x08001801
 80017dc:	08001801 	.word	0x08001801
 80017e0:	080017f9 	.word	0x080017f9
 80017e4:	080017f9 	.word	0x080017f9
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	080017f9 	.word	0x080017f9
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4a8c      	ldr	r2, [pc, #560]	; (8001a24 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80017f4:	601a      	str	r2, [r3, #0]
           break;
 80017f6:	e00a      	b.n	800180e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4a8b      	ldr	r2, [pc, #556]	; (8001a28 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80017fc:	601a      	str	r2, [r3, #0]
          break;
 80017fe:	e006      	b.n	800180e <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4a8a      	ldr	r2, [pc, #552]	; (8001a2c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001804:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	60fb      	str	r3, [r7, #12]
          break;
 800180c:	bf00      	nop
      }
      break;
 800180e:	e104      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	4a84      	ldr	r2, [pc, #528]	; (8001a24 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 8001814:	601a      	str	r2, [r3, #0]
      break;
 8001816:	e100      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4a85      	ldr	r2, [pc, #532]	; (8001a30 <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 800181c:	601a      	str	r2, [r3, #0]
      break;
 800181e:	e0fc      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	4a84      	ldr	r2, [pc, #528]	; (8001a34 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 8001824:	601a      	str	r2, [r3, #0]
      break;
 8001826:	e0f8      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4a83      	ldr	r2, [pc, #524]	; (8001a38 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 800182c:	601a      	str	r2, [r3, #0]
      break;
 800182e:	e0f4      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4a82      	ldr	r2, [pc, #520]	; (8001a3c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8001834:	601a      	str	r2, [r3, #0]
      break;
 8001836:	e0f0      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8001838:	7abb      	ldrb	r3, [r7, #10]
 800183a:	2b1b      	cmp	r3, #27
 800183c:	d842      	bhi.n	80018c4 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	080018bd 	.word	0x080018bd
 8001848:	080018bd 	.word	0x080018bd
 800184c:	080018bd 	.word	0x080018bd
 8001850:	080018bd 	.word	0x080018bd
 8001854:	080018b5 	.word	0x080018b5
 8001858:	080018c5 	.word	0x080018c5
 800185c:	080018c5 	.word	0x080018c5
 8001860:	080018c5 	.word	0x080018c5
 8001864:	080018bd 	.word	0x080018bd
 8001868:	080018bd 	.word	0x080018bd
 800186c:	080018bd 	.word	0x080018bd
 8001870:	080018bd 	.word	0x080018bd
 8001874:	080018c5 	.word	0x080018c5
 8001878:	080018c5 	.word	0x080018c5
 800187c:	080018c5 	.word	0x080018c5
 8001880:	080018c5 	.word	0x080018c5
 8001884:	080018bd 	.word	0x080018bd
 8001888:	080018bd 	.word	0x080018bd
 800188c:	080018bd 	.word	0x080018bd
 8001890:	080018bd 	.word	0x080018bd
 8001894:	080018b5 	.word	0x080018b5
 8001898:	080018c5 	.word	0x080018c5
 800189c:	080018c5 	.word	0x080018c5
 80018a0:	080018c5 	.word	0x080018c5
 80018a4:	080018bd 	.word	0x080018bd
 80018a8:	080018bd 	.word	0x080018bd
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	080018bd 	.word	0x080018bd
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4a62      	ldr	r2, [pc, #392]	; (8001a40 <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 80018b8:	601a      	str	r2, [r3, #0]
           break;
 80018ba:	e00a      	b.n	80018d2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4a5f      	ldr	r2, [pc, #380]	; (8001a3c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80018c0:	601a      	str	r2, [r3, #0]
          break;
 80018c2:	e006      	b.n	80018d2 <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4a59      	ldr	r2, [pc, #356]	; (8001a2c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80018c8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	60fb      	str	r3, [r7, #12]
          break;
 80018d0:	bf00      	nop
      }
      break;
 80018d2:	e0a2      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80018d4:	7abb      	ldrb	r3, [r7, #10]
 80018d6:	2b1b      	cmp	r3, #27
 80018d8:	d842      	bhi.n	8001960 <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80018da:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001951 	.word	0x08001951
 80018f4:	08001961 	.word	0x08001961
 80018f8:	08001961 	.word	0x08001961
 80018fc:	08001961 	.word	0x08001961
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001961 	.word	0x08001961
 8001914:	08001961 	.word	0x08001961
 8001918:	08001961 	.word	0x08001961
 800191c:	08001961 	.word	0x08001961
 8001920:	08001959 	.word	0x08001959
 8001924:	08001959 	.word	0x08001959
 8001928:	08001959 	.word	0x08001959
 800192c:	08001959 	.word	0x08001959
 8001930:	08001951 	.word	0x08001951
 8001934:	08001961 	.word	0x08001961
 8001938:	08001961 	.word	0x08001961
 800193c:	08001961 	.word	0x08001961
 8001940:	08001959 	.word	0x08001959
 8001944:	08001959 	.word	0x08001959
 8001948:	08001959 	.word	0x08001959
 800194c:	08001959 	.word	0x08001959
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8001954:	601a      	str	r2, [r3, #0]
           break;
 8001956:	e00a      	b.n	800196e <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4a38      	ldr	r2, [pc, #224]	; (8001a3c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800195c:	601a      	str	r2, [r3, #0]
          break;
 800195e:	e006      	b.n	800196e <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4a32      	ldr	r2, [pc, #200]	; (8001a2c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001964:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	60fb      	str	r3, [r7, #12]
          break;
 800196c:	bf00      	nop
      }
      break;
 800196e:	e054      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8001970:	7abb      	ldrb	r3, [r7, #10]
 8001972:	2b1b      	cmp	r3, #27
 8001974:	d842      	bhi.n	80019fc <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019f5 	.word	0x080019f5
 8001980:	080019f5 	.word	0x080019f5
 8001984:	080019f5 	.word	0x080019f5
 8001988:	080019f5 	.word	0x080019f5
 800198c:	080019ed 	.word	0x080019ed
 8001990:	080019fd 	.word	0x080019fd
 8001994:	080019fd 	.word	0x080019fd
 8001998:	080019fd 	.word	0x080019fd
 800199c:	080019f5 	.word	0x080019f5
 80019a0:	080019f5 	.word	0x080019f5
 80019a4:	080019f5 	.word	0x080019f5
 80019a8:	080019f5 	.word	0x080019f5
 80019ac:	080019fd 	.word	0x080019fd
 80019b0:	080019fd 	.word	0x080019fd
 80019b4:	080019fd 	.word	0x080019fd
 80019b8:	080019fd 	.word	0x080019fd
 80019bc:	080019f5 	.word	0x080019f5
 80019c0:	080019f5 	.word	0x080019f5
 80019c4:	080019f5 	.word	0x080019f5
 80019c8:	080019f5 	.word	0x080019f5
 80019cc:	080019ed 	.word	0x080019ed
 80019d0:	080019fd 	.word	0x080019fd
 80019d4:	080019fd 	.word	0x080019fd
 80019d8:	080019fd 	.word	0x080019fd
 80019dc:	080019f5 	.word	0x080019f5
 80019e0:	080019f5 	.word	0x080019f5
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	080019f5 	.word	0x080019f5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 80019f0:	601a      	str	r2, [r3, #0]
           break;
 80019f2:	e00a      	b.n	8001a0a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80019f8:	601a      	str	r2, [r3, #0]
          break;
 80019fa:	e006      	b.n	8001a0a <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001a00:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	60fb      	str	r3, [r7, #12]
          break;
 8001a08:	bf00      	nop
      }
      break;
 8001a0a:	e006      	b.n	8001a1a <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8001a10:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	60fb      	str	r3, [r7, #12]
      break;
 8001a18:	bf00      	nop
  }

  return ret;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	41480000 	.word	0x41480000
 8001a28:	3fcccccd 	.word	0x3fcccccd
 8001a2c:	bf800000 	.word	0xbf800000
 8001a30:	41c80000 	.word	0x41c80000
 8001a34:	42480000 	.word	0x42480000
 8001a38:	42c80000 	.word	0x42c80000
 8001a3c:	43480000 	.word	0x43480000
 8001a40:	43c80000 	.word	0x43c80000
 8001a44:	44480000 	.word	0x44480000
 8001a48:	44c80000 	.word	0x44c80000

08001a4c <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	ed97 0a00 	vldr	s0, [r7]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f805 	bl	8001a70 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8001a66:	4603      	mov	r3, r0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	4613      	mov	r3, r2
 8001a82:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d109      	bne.n	8001aa2 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001a8e:	79ba      	ldrb	r2, [r7, #6]
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	4619      	mov	r1, r3
 8001a94:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f98d 	bl	8001db8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	e008      	b.n	8001ab4 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001aa2:	79ba      	ldrb	r2, [r7, #6]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fa9f 	bl	8001ff0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8001ab2:	4603      	mov	r3, r0
  }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	331c      	adds	r3, #28
 8001ace:	f107 020b 	add.w	r2, r7, #11
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fde7 	bl	80026a8 <lis2dw12_full_scale_get>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	e027      	b.n	8001b36 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d81b      	bhi.n	8001b24 <LIS2DW12_ACC_GetFullScale+0x68>
 8001aec:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <LIS2DW12_ACC_GetFullScale+0x38>)
 8001aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af2:	bf00      	nop
 8001af4:	08001b05 	.word	0x08001b05
 8001af8:	08001b0d 	.word	0x08001b0d
 8001afc:	08001b15 	.word	0x08001b15
 8001b00:	08001b1d 	.word	0x08001b1d
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
      break;
 8001b0a:	e013      	b.n	8001b34 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	601a      	str	r2, [r3, #0]
      break;
 8001b12:	e00f      	b.n	8001b34 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2208      	movs	r2, #8
 8001b18:	601a      	str	r2, [r3, #0]
      break;
 8001b1a:	e00b      	b.n	8001b34 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2210      	movs	r2, #16
 8001b20:	601a      	str	r2, [r3, #0]
      break;
 8001b22:	e007      	b.n	8001b34 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	60fb      	str	r3, [r7, #12]
      break;
 8001b32:	bf00      	nop
  }

  return ret;
 8001b34:	68fb      	ldr	r3, [r7, #12]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop

08001b40 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	dd0b      	ble.n	8001b68 <LIS2DW12_ACC_SetFullScale+0x28>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	dd06      	ble.n	8001b64 <LIS2DW12_ACC_SetFullScale+0x24>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	dc01      	bgt.n	8001b60 <LIS2DW12_ACC_SetFullScale+0x20>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e004      	b.n	8001b6a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001b60:	2303      	movs	r3, #3
 8001b62:	e002      	b.n	8001b6a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LIS2DW12_ACC_SetFullScale+0x2a>
 8001b68:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8001b6a:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	331c      	adds	r3, #28
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fd71 	bl	800265c <lis2dw12_full_scale_set>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	e000      	b.n	8001b88 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	331c      	adds	r3, #28
 8001ba2:	f107 020b 	add.w	r2, r7, #11
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fb67 	bl	800227c <lis2dw12_power_mode_get>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	e089      	b.n	8001cce <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	331c      	adds	r3, #28
 8001bbe:	f107 020c 	add.w	r2, r7, #12
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fda7 	bl	8002718 <lis2dw12_acceleration_raw_get>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	e07b      	b.n	8001cce <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 8001bd6:	7afb      	ldrb	r3, [r7, #11]
 8001bd8:	2b1b      	cmp	r3, #27
 8001bda:	d873      	bhi.n	8001cc4 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001c55 	.word	0x08001c55
 8001be8:	08001c8d 	.word	0x08001c8d
 8001bec:	08001c8d 	.word	0x08001c8d
 8001bf0:	08001c8d 	.word	0x08001c8d
 8001bf4:	08001c8d 	.word	0x08001c8d
 8001bf8:	08001cc5 	.word	0x08001cc5
 8001bfc:	08001cc5 	.word	0x08001cc5
 8001c00:	08001cc5 	.word	0x08001cc5
 8001c04:	08001c55 	.word	0x08001c55
 8001c08:	08001c8d 	.word	0x08001c8d
 8001c0c:	08001c8d 	.word	0x08001c8d
 8001c10:	08001c8d 	.word	0x08001c8d
 8001c14:	08001cc5 	.word	0x08001cc5
 8001c18:	08001cc5 	.word	0x08001cc5
 8001c1c:	08001cc5 	.word	0x08001cc5
 8001c20:	08001cc5 	.word	0x08001cc5
 8001c24:	08001c55 	.word	0x08001c55
 8001c28:	08001c8d 	.word	0x08001c8d
 8001c2c:	08001c8d 	.word	0x08001c8d
 8001c30:	08001c8d 	.word	0x08001c8d
 8001c34:	08001c8d 	.word	0x08001c8d
 8001c38:	08001cc5 	.word	0x08001cc5
 8001c3c:	08001cc5 	.word	0x08001cc5
 8001c40:	08001cc5 	.word	0x08001cc5
 8001c44:	08001c55 	.word	0x08001c55
 8001c48:	08001c8d 	.word	0x08001c8d
 8001c4c:	08001c8d 	.word	0x08001c8d
 8001c50:	08001c8d 	.word	0x08001c8d
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001c54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da00      	bge.n	8001c5e <LIS2DW12_ACC_GetAxesRaw+0xce>
 8001c5c:	330f      	adds	r3, #15
 8001c5e:	111b      	asrs	r3, r3, #4
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001c66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da00      	bge.n	8001c70 <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8001c6e:	330f      	adds	r3, #15
 8001c70:	111b      	asrs	r3, r3, #4
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001c78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da00      	bge.n	8001c82 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8001c80:	330f      	adds	r3, #15
 8001c82:	111b      	asrs	r3, r3, #4
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	809a      	strh	r2, [r3, #4]
      break;
 8001c8a:	e01f      	b.n	8001ccc <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001c8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da00      	bge.n	8001c96 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8001c94:	3303      	adds	r3, #3
 8001c96:	109b      	asrs	r3, r3, #2
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da00      	bge.n	8001ca8 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8001ca6:	3303      	adds	r3, #3
 8001ca8:	109b      	asrs	r3, r3, #2
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001cb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	da00      	bge.n	8001cba <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8001cb8:	3303      	adds	r3, #3
 8001cba:	109b      	asrs	r3, r3, #2
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	809a      	strh	r2, [r3, #4]
      break;
 8001cc2:	e003      	b.n	8001ccc <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	bf00      	nop
  }

  return ret;
 8001ccc:	697b      	ldr	r3, [r7, #20]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop

08001cd8 <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff4e 	bl	8001b90 <LIS2DW12_ACC_GetAxesRaw>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	e03c      	b.n	8001d7a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fbd6 	bl	80014b8 <LIS2DW12_ACC_GetSensitivity>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e030      	b.n	8001d7a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001d18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d30:	ee17 2a90 	vmov	r2, s15
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001d38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d50:	ee17 2a90 	vmov	r2, s15
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001d58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d70:	ee17 2a90 	vmov	r2, s15
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	70fb      	strb	r3, [r7, #3]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f103 001c 	add.w	r0, r3, #28
 8001d98:	1cba      	adds	r2, r7, #2
 8001d9a:	78f9      	ldrb	r1, [r7, #3]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f000 fa07 	bl	80021b0 <lis2dw12_write_reg>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	e000      	b.n	8001db0 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d80b      	bhi.n	8001dec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001e19 	.word	0x08001e19
 8001de0:	08001e45 	.word	0x08001e45
 8001de4:	08001e71 	.word	0x08001e71
 8001de8:	08001e9d 	.word	0x08001e9d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001dec:	79bb      	ldrb	r3, [r7, #6]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d002      	beq.n	8001df8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8001df2:	2304      	movs	r3, #4
 8001df4:	75fb      	strb	r3, [r7, #23]
          break;
 8001df6:	e002      	b.n	8001dfe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8001df8:	2314      	movs	r3, #20
 8001dfa:	75fb      	strb	r3, [r7, #23]
          break;
 8001dfc:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8001dfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e02:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d400      	bmi.n	8001e12 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001e10:	e05a      	b.n	8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001e12:	4b6f      	ldr	r3, [pc, #444]	; (8001fd0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001e14:	60bb      	str	r3, [r7, #8]
      break;
 8001e16:	e057      	b.n	8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d002      	beq.n	8001e24 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	75fb      	strb	r3, [r7, #23]
          break;
 8001e22:	e002      	b.n	8001e2a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8001e24:	2313      	movs	r3, #19
 8001e26:	75fb      	strb	r3, [r7, #23]
          break;
 8001e28:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001e2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e2e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001fd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	dc00      	bgt.n	8001e3e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001e3c:	e044      	b.n	8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001e3e:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001e40:	60bb      	str	r3, [r7, #8]
      break;
 8001e42:	e041      	b.n	8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d002      	beq.n	8001e50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8001e4e:	e002      	b.n	8001e56 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8001e50:	2312      	movs	r3, #18
 8001e52:	75fb      	strb	r3, [r7, #23]
          break;
 8001e54:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001e56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e5a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001fd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	dc00      	bgt.n	8001e6a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001e68:	e02e      	b.n	8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001e6a:	4b5b      	ldr	r3, [pc, #364]	; (8001fd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001e6c:	60bb      	str	r3, [r7, #8]
      break;
 8001e6e:	e02b      	b.n	8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d002      	beq.n	8001e7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
          break;
 8001e7a:	e002      	b.n	8001e82 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8001e7c:	2311      	movs	r3, #17
 8001e7e:	75fb      	strb	r3, [r7, #23]
          break;
 8001e80:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e86:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001fd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	dc00      	bgt.n	8001e96 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001e94:	e018      	b.n	8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001e98:	60bb      	str	r3, [r7, #8]
      break;
 8001e9a:	e015      	b.n	8001ec8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d002      	beq.n	8001ea8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8001ea6:	e002      	b.n	8001eae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	75fb      	strb	r3, [r7, #23]
          break;
 8001eac:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001eae:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001fd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	dc00      	bgt.n	8001ec2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001ec0:	e001      	b.n	8001ec6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001ec4:	60bb      	str	r3, [r7, #8]
      break;
 8001ec6:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8001ec8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ecc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001fdc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d801      	bhi.n	8001ede <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e04d      	b.n	8001f7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	d801      	bhi.n	8001ef4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e042      	b.n	8001f7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d801      	bhi.n	8001f0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001f06:	2303      	movs	r3, #3
 8001f08:	e037      	b.n	8001f7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f0e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001fe0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	d801      	bhi.n	8001f20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e02c      	b.n	8001f7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f24:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001fe4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d801      	bhi.n	8001f36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e021      	b.n	8001f7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f3a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001fd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	d801      	bhi.n	8001f4c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001f48:	2306      	movs	r3, #6
 8001f4a:	e016      	b.n	8001f7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f50:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001fe8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d801      	bhi.n	8001f62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e00b      	b.n	8001f7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f66:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001fec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f72:	d801      	bhi.n	8001f78 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001f74:	2308      	movs	r3, #8
 8001f76:	e000      	b.n	8001f7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f78:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8001f7a:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	331c      	adds	r3, #28
 8001f80:	7dba      	ldrb	r2, [r7, #22]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fa33 	bl	80023f0 <lis2dw12_data_rate_set>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	e018      	b.n	8001fc8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	331c      	adds	r3, #28
 8001f9a:	7dfa      	ldrb	r2, [r7, #23]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f91e 	bl	80021e0 <lis2dw12_power_mode_set>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e00b      	b.n	8001fc8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	79ba      	ldrb	r2, [r7, #6]
 8001fc2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	41480000 	.word	0x41480000
 8001fd4:	43480000 	.word	0x43480000
 8001fd8:	43480000 	.word	0x43480000
 8001fdc:	3fcccccd 	.word	0x3fcccccd
 8001fe0:	42480000 	.word	0x42480000
 8001fe4:	42c80000 	.word	0x42c80000
 8001fe8:	43c80000 	.word	0x43c80000
 8001fec:	44480000 	.word	0x44480000

08001ff0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	79ba      	ldrb	r2, [r7, #6]
 8002010:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8002014:	edd7 7a02 	vldr	s15, [r7, #8]
 8002018:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80020d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800201c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002024:	d801      	bhi.n	800202a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002028:	e04d      	b.n	80020c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 800202a:	edd7 7a02 	vldr	s15, [r7, #8]
 800202e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	d801      	bhi.n	8002040 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 800203e:	e042      	b.n	80020c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8002040:	edd7 7a02 	vldr	s15, [r7, #8]
 8002044:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	d801      	bhi.n	8002056 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002054:	e037      	b.n	80020c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 8002056:	edd7 7a02 	vldr	s15, [r7, #8]
 800205a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80020e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800205e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	d801      	bhi.n	800206c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800206a:	e02c      	b.n	80020c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 800206c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002070:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80020f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207c:	d801      	bhi.n	8002082 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002080:	e021      	b.n	80020c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8002082:	edd7 7a02 	vldr	s15, [r7, #8]
 8002086:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80020f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800208a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d801      	bhi.n	8002098 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002096:	e016      	b.n	80020c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 8002098:	edd7 7a02 	vldr	s15, [r7, #8]
 800209c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002100 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80020a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a8:	d801      	bhi.n	80020ae <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80020ac:	e00b      	b.n	80020c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 80020ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80020b2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002108 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 80020b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	d801      	bhi.n	80020c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80020c2:	e000      	b.n	80020c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	3fcccccd 	.word	0x3fcccccd
 80020dc:	3fcccccd 	.word	0x3fcccccd
 80020e0:	41480000 	.word	0x41480000
 80020e4:	41c80000 	.word	0x41c80000
 80020e8:	42480000 	.word	0x42480000
 80020ec:	42480000 	.word	0x42480000
 80020f0:	42c80000 	.word	0x42c80000
 80020f4:	42c80000 	.word	0x42c80000
 80020f8:	43480000 	.word	0x43480000
 80020fc:	43480000 	.word	0x43480000
 8002100:	43c80000 	.word	0x43c80000
 8002104:	43c80000 	.word	0x43c80000
 8002108:	44480000 	.word	0x44480000
 800210c:	44480000 	.word	0x44480000
 8002110:	44c80000 	.word	0x44c80000

08002114 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	461a      	mov	r2, r3
 8002120:	460b      	mov	r3, r1
 8002122:	72fb      	strb	r3, [r7, #11]
 8002124:	4613      	mov	r3, r2
 8002126:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	695c      	ldr	r4, [r3, #20]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	7b1b      	ldrb	r3, [r3, #12]
 8002134:	b298      	uxth	r0, r3
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	b299      	uxth	r1, r3
 800213a:	893b      	ldrh	r3, [r7, #8]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	47a0      	blx	r4
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}

0800214a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800214a:	b590      	push	{r4, r7, lr}
 800214c:	b087      	sub	sp, #28
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	461a      	mov	r2, r3
 8002156:	460b      	mov	r3, r1
 8002158:	72fb      	strb	r3, [r7, #11]
 800215a:	4613      	mov	r3, r2
 800215c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	691c      	ldr	r4, [r3, #16]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	7b1b      	ldrb	r3, [r3, #12]
 800216a:	b298      	uxth	r0, r3
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	b299      	uxth	r1, r3
 8002170:	893b      	ldrh	r3, [r7, #8]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	47a0      	blx	r4
 8002176:	4603      	mov	r3, r0
}
 8002178:	4618      	mov	r0, r3
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}

08002180 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	461a      	mov	r2, r3
 800218c:	460b      	mov	r3, r1
 800218e:	72fb      	strb	r3, [r7, #11]
 8002190:	4613      	mov	r3, r2
 8002192:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685c      	ldr	r4, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6898      	ldr	r0, [r3, #8]
 800219c:	893b      	ldrh	r3, [r7, #8]
 800219e:	7af9      	ldrb	r1, [r7, #11]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	47a0      	blx	r4
 80021a4:	6178      	str	r0, [r7, #20]
  return ret;
 80021a6:	697b      	ldr	r3, [r7, #20]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}

080021b0 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	460b      	mov	r3, r1
 80021be:	72fb      	strb	r3, [r7, #11]
 80021c0:	4613      	mov	r3, r2
 80021c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681c      	ldr	r4, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6898      	ldr	r0, [r3, #8]
 80021cc:	893b      	ldrh	r3, [r7, #8]
 80021ce:	7af9      	ldrb	r1, [r7, #11]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	47a0      	blx	r4
 80021d4:	6178      	str	r0, [r7, #20]
  return ret;
 80021d6:	697b      	ldr	r3, [r7, #20]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}

080021e0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80021ec:	f107 0210 	add.w	r2, r7, #16
 80021f0:	2301      	movs	r3, #1
 80021f2:	2120      	movs	r1, #32
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffc3 	bl	8002180 <lis2dw12_read_reg>
 80021fa:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <lis2dw12_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	7c3b      	ldrb	r3, [r7, #16]
 800220e:	f362 0383 	bfi	r3, r2, #2, #2
 8002212:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	b2da      	uxtb	r2, r3
 800221c:	7c3b      	ldrb	r3, [r7, #16]
 800221e:	f362 0301 	bfi	r3, r2, #0, #2
 8002222:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002224:	f107 0210 	add.w	r2, r7, #16
 8002228:	2301      	movs	r3, #1
 800222a:	2120      	movs	r1, #32
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ffbf 	bl	80021b0 <lis2dw12_write_reg>
 8002232:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <lis2dw12_power_mode_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	2301      	movs	r3, #1
 8002240:	2125      	movs	r1, #37	; 0x25
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff9c 	bl	8002180 <lis2dw12_read_reg>
 8002248:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d110      	bne.n	8002272 <lis2dw12_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	b2da      	uxtb	r2, r3
 800225a:	7b3b      	ldrb	r3, [r7, #12]
 800225c:	f362 0382 	bfi	r3, r2, #2, #1
 8002260:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8002262:	f107 020c 	add.w	r2, r7, #12
 8002266:	2301      	movs	r3, #1
 8002268:	2125      	movs	r1, #37	; 0x25
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ffa0 	bl	80021b0 <lis2dw12_write_reg>
 8002270:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002272:	697b      	ldr	r3, [r7, #20]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002286:	f107 0210 	add.w	r2, r7, #16
 800228a:	2301      	movs	r3, #1
 800228c:	2120      	movs	r1, #32
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff76 	bl	8002180 <lis2dw12_read_reg>
 8002294:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 80a3 	bne.w	80023e4 <lis2dw12_power_mode_get+0x168>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800229e:	f107 020c 	add.w	r2, r7, #12
 80022a2:	2301      	movs	r3, #1
 80022a4:	2125      	movs	r1, #37	; 0x25
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff6a 	bl	8002180 <lis2dw12_read_reg>
 80022ac:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80022ae:	7b3b      	ldrb	r3, [r7, #12]
 80022b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	011a      	lsls	r2, r3, #4
 80022b8:	7c3b      	ldrb	r3, [r7, #16]
 80022ba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
             ctrl1.lp_mode)) {
 80022c4:	7c3a      	ldrb	r2, [r7, #16]
 80022c6:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80022ca:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80022cc:	4413      	add	r3, r2
 80022ce:	2b1b      	cmp	r3, #27
 80022d0:	f200 8084 	bhi.w	80023dc <lis2dw12_power_mode_get+0x160>
 80022d4:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <lis2dw12_power_mode_get+0x60>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	0800236d 	.word	0x0800236d
 80022e0:	08002365 	.word	0x08002365
 80022e4:	0800235d 	.word	0x0800235d
 80022e8:	08002355 	.word	0x08002355
 80022ec:	0800234d 	.word	0x0800234d
 80022f0:	080023dd 	.word	0x080023dd
 80022f4:	080023dd 	.word	0x080023dd
 80022f8:	080023dd 	.word	0x080023dd
 80022fc:	0800238d 	.word	0x0800238d
 8002300:	08002385 	.word	0x08002385
 8002304:	0800237d 	.word	0x0800237d
 8002308:	08002375 	.word	0x08002375
 800230c:	080023dd 	.word	0x080023dd
 8002310:	080023dd 	.word	0x080023dd
 8002314:	080023dd 	.word	0x080023dd
 8002318:	080023dd 	.word	0x080023dd
 800231c:	080023b5 	.word	0x080023b5
 8002320:	080023ad 	.word	0x080023ad
 8002324:	080023a5 	.word	0x080023a5
 8002328:	0800239d 	.word	0x0800239d
 800232c:	08002395 	.word	0x08002395
 8002330:	080023dd 	.word	0x080023dd
 8002334:	080023dd 	.word	0x080023dd
 8002338:	080023dd 	.word	0x080023dd
 800233c:	080023d5 	.word	0x080023d5
 8002340:	080023cd 	.word	0x080023cd
 8002344:	080023c5 	.word	0x080023c5
 8002348:	080023bd 	.word	0x080023bd
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2204      	movs	r2, #4
 8002350:	701a      	strb	r2, [r3, #0]
        break;
 8002352:	e048      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2203      	movs	r2, #3
 8002358:	701a      	strb	r2, [r3, #0]
        break;
 800235a:	e044      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
        break;
 8002362:	e040      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
        break;
 800236a:	e03c      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
        break;
 8002372:	e038      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	220b      	movs	r2, #11
 8002378:	701a      	strb	r2, [r3, #0]
        break;
 800237a:	e034      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	220a      	movs	r2, #10
 8002380:	701a      	strb	r2, [r3, #0]
        break;
 8002382:	e030      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2209      	movs	r2, #9
 8002388:	701a      	strb	r2, [r3, #0]
        break;
 800238a:	e02c      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2208      	movs	r2, #8
 8002390:	701a      	strb	r2, [r3, #0]
        break;
 8002392:	e028      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2214      	movs	r2, #20
 8002398:	701a      	strb	r2, [r3, #0]
        break;
 800239a:	e024      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2213      	movs	r2, #19
 80023a0:	701a      	strb	r2, [r3, #0]
        break;
 80023a2:	e020      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2212      	movs	r2, #18
 80023a8:	701a      	strb	r2, [r3, #0]
        break;
 80023aa:	e01c      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2211      	movs	r2, #17
 80023b0:	701a      	strb	r2, [r3, #0]
        break;
 80023b2:	e018      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2210      	movs	r2, #16
 80023b8:	701a      	strb	r2, [r3, #0]
        break;
 80023ba:	e014      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	221b      	movs	r2, #27
 80023c0:	701a      	strb	r2, [r3, #0]
        break;
 80023c2:	e010      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	221a      	movs	r2, #26
 80023c8:	701a      	strb	r2, [r3, #0]
        break;
 80023ca:	e00c      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2219      	movs	r2, #25
 80023d0:	701a      	strb	r2, [r3, #0]
        break;
 80023d2:	e008      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2218      	movs	r2, #24
 80023d8:	701a      	strb	r2, [r3, #0]
        break;
 80023da:	e004      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	701a      	strb	r2, [r3, #0]
        break;
 80023e2:	e000      	b.n	80023e6 <lis2dw12_power_mode_get+0x16a>
    }
  }
 80023e4:	bf00      	nop

  return ret;
 80023e6:	697b      	ldr	r3, [r7, #20]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80023fc:	f107 0210 	add.w	r2, r7, #16
 8002400:	2301      	movs	r3, #1
 8002402:	2120      	movs	r1, #32
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff febb 	bl	8002180 <lis2dw12_read_reg>
 800240a:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <lis2dw12_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	b2da      	uxtb	r2, r3
 800241a:	7c3b      	ldrb	r3, [r7, #16]
 800241c:	f362 1307 	bfi	r3, r2, #4, #4
 8002420:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002422:	f107 0210 	add.w	r2, r7, #16
 8002426:	2301      	movs	r3, #1
 8002428:	2120      	movs	r1, #32
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fec0 	bl	80021b0 <lis2dw12_write_reg>
 8002430:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <lis2dw12_data_rate_set+0x58>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002438:	f107 020c 	add.w	r2, r7, #12
 800243c:	2301      	movs	r3, #1
 800243e:	2122      	movs	r1, #34	; 0x22
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff fe9d 	bl	8002180 <lis2dw12_read_reg>
 8002446:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d110      	bne.n	8002470 <lis2dw12_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	b2da      	uxtb	r2, r3
 8002458:	7b3b      	ldrb	r3, [r7, #12]
 800245a:	f362 0301 	bfi	r3, r2, #0, #2
 800245e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	2301      	movs	r3, #1
 8002466:	2122      	movs	r1, #34	; 0x22
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fea1 	bl	80021b0 <lis2dw12_write_reg>
 800246e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002470:	697b      	ldr	r3, [r7, #20]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8002486:	f107 0210 	add.w	r2, r7, #16
 800248a:	2301      	movs	r3, #1
 800248c:	2120      	movs	r1, #32
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fe76 	bl	8002180 <lis2dw12_read_reg>
 8002494:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f040 80b3 	bne.w	8002604 <lis2dw12_data_rate_get+0x188>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800249e:	f107 020c 	add.w	r2, r7, #12
 80024a2:	2301      	movs	r3, #1
 80024a4:	2122      	movs	r1, #34	; 0x22
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fe6a 	bl	8002180 <lis2dw12_read_reg>
 80024ac:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 80024ae:	7b3b      	ldrb	r3, [r7, #12]
 80024b0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	7c3a      	ldrb	r2, [r7, #16]
 80024ba:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	4413      	add	r3, r2
 80024c2:	2b32      	cmp	r3, #50	; 0x32
 80024c4:	f200 809a 	bhi.w	80025fc <lis2dw12_data_rate_get+0x180>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <lis2dw12_data_rate_get+0x54>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	0800259d 	.word	0x0800259d
 80024d4:	080025a5 	.word	0x080025a5
 80024d8:	080025ad 	.word	0x080025ad
 80024dc:	080025b5 	.word	0x080025b5
 80024e0:	080025bd 	.word	0x080025bd
 80024e4:	080025c5 	.word	0x080025c5
 80024e8:	080025cd 	.word	0x080025cd
 80024ec:	080025d5 	.word	0x080025d5
 80024f0:	080025dd 	.word	0x080025dd
 80024f4:	080025e5 	.word	0x080025e5
 80024f8:	080025fd 	.word	0x080025fd
 80024fc:	080025fd 	.word	0x080025fd
 8002500:	080025fd 	.word	0x080025fd
 8002504:	080025fd 	.word	0x080025fd
 8002508:	080025fd 	.word	0x080025fd
 800250c:	080025fd 	.word	0x080025fd
 8002510:	080025fd 	.word	0x080025fd
 8002514:	080025fd 	.word	0x080025fd
 8002518:	080025f5 	.word	0x080025f5
 800251c:	080025fd 	.word	0x080025fd
 8002520:	080025fd 	.word	0x080025fd
 8002524:	080025fd 	.word	0x080025fd
 8002528:	080025fd 	.word	0x080025fd
 800252c:	080025fd 	.word	0x080025fd
 8002530:	080025fd 	.word	0x080025fd
 8002534:	080025fd 	.word	0x080025fd
 8002538:	080025fd 	.word	0x080025fd
 800253c:	080025fd 	.word	0x080025fd
 8002540:	080025fd 	.word	0x080025fd
 8002544:	080025fd 	.word	0x080025fd
 8002548:	080025fd 	.word	0x080025fd
 800254c:	080025fd 	.word	0x080025fd
 8002550:	080025fd 	.word	0x080025fd
 8002554:	080025fd 	.word	0x080025fd
 8002558:	080025fd 	.word	0x080025fd
 800255c:	080025fd 	.word	0x080025fd
 8002560:	080025fd 	.word	0x080025fd
 8002564:	080025fd 	.word	0x080025fd
 8002568:	080025fd 	.word	0x080025fd
 800256c:	080025fd 	.word	0x080025fd
 8002570:	080025fd 	.word	0x080025fd
 8002574:	080025fd 	.word	0x080025fd
 8002578:	080025fd 	.word	0x080025fd
 800257c:	080025fd 	.word	0x080025fd
 8002580:	080025fd 	.word	0x080025fd
 8002584:	080025fd 	.word	0x080025fd
 8002588:	080025fd 	.word	0x080025fd
 800258c:	080025fd 	.word	0x080025fd
 8002590:	080025fd 	.word	0x080025fd
 8002594:	080025fd 	.word	0x080025fd
 8002598:	080025ed 	.word	0x080025ed
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
        break;
 80025a2:	e030      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
        break;
 80025aa:	e02c      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2202      	movs	r2, #2
 80025b0:	701a      	strb	r2, [r3, #0]
        break;
 80025b2:	e028      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2203      	movs	r2, #3
 80025b8:	701a      	strb	r2, [r3, #0]
        break;
 80025ba:	e024      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2204      	movs	r2, #4
 80025c0:	701a      	strb	r2, [r3, #0]
        break;
 80025c2:	e020      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2205      	movs	r2, #5
 80025c8:	701a      	strb	r2, [r3, #0]
        break;
 80025ca:	e01c      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2206      	movs	r2, #6
 80025d0:	701a      	strb	r2, [r3, #0]
        break;
 80025d2:	e018      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2207      	movs	r2, #7
 80025d8:	701a      	strb	r2, [r3, #0]
        break;
 80025da:	e014      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2208      	movs	r2, #8
 80025e0:	701a      	strb	r2, [r3, #0]
        break;
 80025e2:	e010      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2209      	movs	r2, #9
 80025e8:	701a      	strb	r2, [r3, #0]
        break;
 80025ea:	e00c      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2232      	movs	r2, #50	; 0x32
 80025f0:	701a      	strb	r2, [r3, #0]
        break;
 80025f2:	e008      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2212      	movs	r2, #18
 80025f8:	701a      	strb	r2, [r3, #0]
        break;
 80025fa:	e004      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
        break;
 8002602:	e000      	b.n	8002606 <lis2dw12_data_rate_get+0x18a>
    }
  }
 8002604:	bf00      	nop

  return ret;
 8002606:	697b      	ldr	r3, [r7, #20]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800261c:	f107 0208 	add.w	r2, r7, #8
 8002620:	2301      	movs	r3, #1
 8002622:	2121      	movs	r1, #33	; 0x21
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fdab 	bl	8002180 <lis2dw12_read_reg>
 800262a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <lis2dw12_block_data_update_set+0x42>
    reg.bdu = val;
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	7a3b      	ldrb	r3, [r7, #8]
 800263c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002640:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002642:	f107 0208 	add.w	r2, r7, #8
 8002646:	2301      	movs	r3, #1
 8002648:	2121      	movs	r1, #33	; 0x21
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fdb0 	bl	80021b0 <lis2dw12_write_reg>
 8002650:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8002668:	f107 0208 	add.w	r2, r7, #8
 800266c:	2301      	movs	r3, #1
 800266e:	2125      	movs	r1, #37	; 0x25
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fd85 	bl	8002180 <lis2dw12_read_reg>
 8002676:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <lis2dw12_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	b2da      	uxtb	r2, r3
 8002686:	7a3b      	ldrb	r3, [r7, #8]
 8002688:	f362 1305 	bfi	r3, r2, #4, #2
 800268c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800268e:	f107 0208 	add.w	r2, r7, #8
 8002692:	2301      	movs	r3, #1
 8002694:	2125      	movs	r1, #37	; 0x25
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fd8a 	bl	80021b0 <lis2dw12_write_reg>
 800269c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80026b2:	f107 0208 	add.w	r2, r7, #8
 80026b6:	2301      	movs	r3, #1
 80026b8:	2125      	movs	r1, #37	; 0x25
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fd60 	bl	8002180 <lis2dw12_read_reg>
 80026c0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 80026c2:	7a3b      	ldrb	r3, [r7, #8]
 80026c4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d81a      	bhi.n	8002704 <lis2dw12_full_scale_get+0x5c>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <lis2dw12_full_scale_get+0x2c>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	080026ed 	.word	0x080026ed
 80026dc:	080026f5 	.word	0x080026f5
 80026e0:	080026fd 	.word	0x080026fd
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
      break;
 80026ea:	e00f      	b.n	800270c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
      break;
 80026f2:	e00b      	b.n	800270c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2202      	movs	r2, #2
 80026f8:	701a      	strb	r2, [r3, #0]
      break;
 80026fa:	e007      	b.n	800270c <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2203      	movs	r2, #3
 8002700:	701a      	strb	r2, [r3, #0]
      break;
 8002702:	e003      	b.n	800270c <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
      break;
 800270a:	bf00      	nop
  }

  return ret;
 800270c:	68fb      	ldr	r3, [r7, #12]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop

08002718 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8002722:	f107 020c 	add.w	r2, r7, #12
 8002726:	2306      	movs	r3, #6
 8002728:	2128      	movs	r1, #40	; 0x28
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fd28 	bl	8002180 <lis2dw12_read_reg>
 8002730:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002732:	7b7b      	ldrb	r3, [r7, #13]
 8002734:	b21a      	sxth	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002740:	b29b      	uxth	r3, r3
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	b29a      	uxth	r2, r3
 8002746:	7b3b      	ldrb	r3, [r7, #12]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4413      	add	r3, r2
 800274c:	b29b      	uxth	r3, r3
 800274e:	b21a      	sxth	r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	3302      	adds	r3, #2
 800275a:	b212      	sxth	r2, r2
 800275c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	3302      	adds	r3, #2
 8002762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002766:	b29b      	uxth	r3, r3
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	b29a      	uxth	r2, r3
 800276c:	7bbb      	ldrb	r3, [r7, #14]
 800276e:	b29b      	uxth	r3, r3
 8002770:	4413      	add	r3, r2
 8002772:	b29a      	uxth	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	3302      	adds	r3, #2
 8002778:	b212      	sxth	r2, r2
 800277a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800277c:	7c7a      	ldrb	r2, [r7, #17]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	3304      	adds	r3, #4
 8002782:	b212      	sxth	r2, r2
 8002784:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	3304      	adds	r3, #4
 800278a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800278e:	b29b      	uxth	r3, r3
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	b29a      	uxth	r2, r3
 8002794:	7c3b      	ldrb	r3, [r7, #16]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4413      	add	r3, r2
 800279a:	b29a      	uxth	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3304      	adds	r3, #4
 80027a0:	b212      	sxth	r2, r2
 80027a2:	801a      	strh	r2, [r3, #0]
  return ret;
 80027a4:	697b      	ldr	r3, [r7, #20]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80027b8:	2301      	movs	r3, #1
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	210f      	movs	r1, #15
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fcde 	bl	8002180 <lis2dw12_read_reg>
 80027c4:	60f8      	str	r0, [r7, #12]
  return ret;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80027dc:	f107 0208 	add.w	r2, r7, #8
 80027e0:	2301      	movs	r3, #1
 80027e2:	2121      	movs	r1, #33	; 0x21
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff fccb 	bl	8002180 <lis2dw12_read_reg>
 80027ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <lis2dw12_auto_increment_set+0x42>
    reg.if_add_inc = val;
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	7a3b      	ldrb	r3, [r7, #8]
 80027fc:	f362 0382 	bfi	r3, r2, #2, #1
 8002800:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8002802:	f107 0208 	add.w	r2, r7, #8
 8002806:	2301      	movs	r3, #1
 8002808:	2121      	movs	r1, #33	; 0x21
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fcd0 	bl	80021b0 <lis2dw12_write_reg>
 8002810:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002828:	f107 0208 	add.w	r2, r7, #8
 800282c:	2301      	movs	r3, #1
 800282e:	212e      	movs	r1, #46	; 0x2e
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fca5 	bl	8002180 <lis2dw12_read_reg>
 8002836:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <lis2dw12_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	b2da      	uxtb	r2, r3
 8002846:	7a3b      	ldrb	r3, [r7, #8]
 8002848:	f362 1347 	bfi	r3, r2, #5, #3
 800284c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg,
 800284e:	f107 0208 	add.w	r2, r7, #8
 8002852:	2301      	movs	r3, #1
 8002854:	212e      	movs	r1, #46	; 0x2e
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fcaa 	bl	80021b0 <lis2dw12_write_reg>
 800285c:	60f8      	str	r0, [r7, #12]
                             1);
  }

  return ret;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e063      	b.n	800294c <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	7b1a      	ldrb	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a26      	ldr	r2, [pc, #152]	; (8002958 <LIS2MDL_RegisterBusIO+0xf0>)
 80028c0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a25      	ldr	r2, [pc, #148]	; (800295c <LIS2MDL_RegisterBusIO+0xf4>)
 80028c6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e036      	b.n	800294c <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4798      	blx	r3
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <LIS2MDL_RegisterBusIO+0x8a>
    {
      ret = LIS2MDL_ERROR;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e02c      	b.n	800294c <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d028      	beq.n	800294c <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d123      	bne.n	800294c <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d10d      	bne.n	8002928 <LIS2MDL_RegisterBusIO+0xc0>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800290c:	2334      	movs	r3, #52	; 0x34
 800290e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	461a      	mov	r2, r3
 8002914:	2162      	movs	r1, #98	; 0x62
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fb1b 	bl	8002f52 <LIS2MDL_Write_Reg>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d014      	beq.n	800294c <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	e012      	b.n	800294e <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d101      	bne.n	8002934 <LIS2MDL_RegisterBusIO+0xcc>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	e00c      	b.n	800294e <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	331c      	adds	r3, #28
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f000 ff70 	bl	8003820 <lis2mdl_i2c_interface_set>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e000      	b.n	800294e <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 800294c:	68fb      	ldr	r3, [r7, #12]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	08002fa9 	.word	0x08002fa9
 800295c:	0800302b 	.word	0x0800302b

08002960 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d144      	bne.n	80029fa <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8002970:	f107 0208 	add.w	r2, r7, #8
 8002974:	2301      	movs	r3, #1
 8002976:	2162      	movs	r1, #98	; 0x62
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fb97 	bl	80030ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	e06c      	b.n	8002a64 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800298a:	f107 020c 	add.w	r2, r7, #12
 800298e:	2301      	movs	r3, #1
 8002990:	2160      	movs	r1, #96	; 0x60
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fb8a 	bl	80030ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e05f      	b.n	8002a64 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80029a4:	7a3b      	ldrb	r3, [r7, #8]
 80029a6:	f043 0310 	orr.w	r3, r3, #16
 80029aa:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80029ac:	7a3b      	ldrb	r3, [r7, #8]
 80029ae:	f36f 0341 	bfc	r3, #1, #1
 80029b2:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80029b4:	7b3b      	ldrb	r3, [r7, #12]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f362 0301 	bfi	r3, r2, #0, #2
 80029bc:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80029be:	7b3b      	ldrb	r3, [r7, #12]
 80029c0:	f043 030c 	orr.w	r3, r3, #12
 80029c4:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80029c6:	f107 0208 	add.w	r2, r7, #8
 80029ca:	2301      	movs	r3, #1
 80029cc:	2162      	movs	r1, #98	; 0x62
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fcab 	bl	800332a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	e041      	b.n	8002a64 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80029e0:	f107 020c 	add.w	r2, r7, #12
 80029e4:	2301      	movs	r3, #1
 80029e6:	2160      	movs	r1, #96	; 0x60
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fc9e 	bl	800332a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d032      	beq.n	8002a5a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	e034      	b.n	8002a64 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	331c      	adds	r3, #28
 80029fe:	2101      	movs	r1, #1
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fe65 	bl	80036d0 <lis2mdl_block_data_update_set>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a10:	e028      	b.n	8002a64 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	331c      	adds	r3, #28
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fdd4 	bl	80035c6 <lis2mdl_operating_mode_set>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295
 8002a28:	e01c      	b.n	8002a64 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	331c      	adds	r3, #28
 8002a2e:	2103      	movs	r1, #3
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fdee 	bl	8003612 <lis2mdl_data_rate_set>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	e010      	b.n	8002a64 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	331c      	adds	r3, #28
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fec3 	bl	80037d4 <lis2mdl_self_test_set>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
 8002a58:	e004      	b.n	8002a64 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8a5 	bl	8002bc4 <LIS2MDL_MAG_Disable>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e004      	b.n	8002a90 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LIS2MDL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d10b      	bne.n	8002ac2 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8002aaa:	2301      	movs	r3, #1
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	214f      	movs	r1, #79	; 0x4f
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fafb 	bl	80030ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00e      	beq.n	8002ada <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	e00c      	b.n	8002adc <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	331c      	adds	r3, #28
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fe72 	bl	80037b2 <lis2mdl_device_id_get>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8002ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad8:	e000      	b.n	8002adc <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2232      	movs	r2, #50	; 0x32
 8002b16:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <LIS2MDL_GetCapabilities+0x58>)
 8002b2c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	42c80000 	.word	0x42c80000

08002b40 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e032      	b.n	8002bbc <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d11d      	bne.n	8002b9a <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002b5e:	f107 020c 	add.w	r2, r7, #12
 8002b62:	2301      	movs	r3, #1
 8002b64:	2160      	movs	r1, #96	; 0x60
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 faa0 	bl	80030ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	e021      	b.n	8002bbc <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8002b78:	7b3b      	ldrb	r3, [r7, #12]
 8002b7a:	f36f 0301 	bfc	r3, #0, #2
 8002b7e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002b80:	f107 020c 	add.w	r2, r7, #12
 8002b84:	2301      	movs	r3, #1
 8002b86:	2160      	movs	r1, #96	; 0x60
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fbce 	bl	800332a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	e010      	b.n	8002bbc <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	331c      	adds	r3, #28
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fd10 	bl	80035c6 <lis2mdl_operating_mode_set>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	e004      	b.n	8002bbc <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e033      	b.n	8002c42 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d11e      	bne.n	8002c20 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002be2:	f107 020c 	add.w	r2, r7, #12
 8002be6:	2301      	movs	r3, #1
 8002be8:	2160      	movs	r1, #96	; 0x60
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa5e 	bl	80030ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e022      	b.n	8002c42 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8002bfc:	7b3b      	ldrb	r3, [r7, #12]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f362 0301 	bfi	r3, r2, #0, #2
 8002c04:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002c06:	f107 020c 	add.w	r2, r7, #12
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	2160      	movs	r1, #96	; 0x60
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fb8b 	bl	800332a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00e      	beq.n	8002c38 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	e010      	b.n	8002c42 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	331c      	adds	r3, #28
 8002c24:	2102      	movs	r1, #2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fccd 	bl	80035c6 <lis2mdl_operating_mode_set>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	e004      	b.n	8002c42 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LIS2MDL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002c5a:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	331c      	adds	r3, #28
 8002c7e:	f107 020b 	add.w	r2, r7, #11
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fceb 	bl	8003660 <lis2mdl_data_rate_get>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	e023      	b.n	8002cde <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d81b      	bhi.n	8002cd4 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8002c9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8002c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca2:	bf00      	nop
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cbd 	.word	0x08002cbd
 8002cac:	08002cc5 	.word	0x08002cc5
 8002cb0:	08002ccd 	.word	0x08002ccd
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8002cb8:	601a      	str	r2, [r3, #0]
      break;
 8002cba:	e00f      	b.n	8002cdc <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8002cc0:	601a      	str	r2, [r3, #0]
      break;
 8002cc2:	e00b      	b.n	8002cdc <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8002cc8:	601a      	str	r2, [r3, #0]
      break;
 8002cca:	e007      	b.n	8002cdc <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8002cd0:	601a      	str	r2, [r3, #0]
      break;
 8002cd2:	e003      	b.n	8002cdc <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd8:	60fb      	str	r3, [r7, #12]
      break;
 8002cda:	bf00      	nop
  }

  return ret;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	41200000 	.word	0x41200000
 8002cec:	41a00000 	.word	0x41a00000
 8002cf0:	42480000 	.word	0x42480000
 8002cf4:	42c80000 	.word	0x42c80000

08002cf8 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8002d04:	edd7 7a00 	vldr	s15, [r7]
 8002d08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	d801      	bhi.n	8002d1a <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8002d16:	2300      	movs	r3, #0
 8002d18:	e016      	b.n	8002d48 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002d1a:	edd7 7a00 	vldr	s15, [r7]
 8002d1e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2a:	d801      	bhi.n	8002d30 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e00b      	b.n	8002d48 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002d30:	edd7 7a00 	vldr	s15, [r7]
 8002d34:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002dbc <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8002d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	d801      	bhi.n	8002d46 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e000      	b.n	8002d48 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8002d46:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8002d48:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d121      	bne.n	8002d96 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002d52:	f107 020c 	add.w	r2, r7, #12
 8002d56:	2301      	movs	r3, #1
 8002d58:	2160      	movs	r1, #96	; 0x60
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f9a6 	bl	80030ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	e022      	b.n	8002db2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	7b3b      	ldrb	r3, [r7, #12]
 8002d76:	f362 0383 	bfi	r3, r2, #2, #2
 8002d7a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8002d7c:	f107 020c 	add.w	r2, r7, #12
 8002d80:	2301      	movs	r3, #1
 8002d82:	2160      	movs	r1, #96	; 0x60
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fad0 	bl	800332a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00f      	beq.n	8002db0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	e00d      	b.n	8002db2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	331c      	adds	r3, #28
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fc37 	bl	8003612 <lis2mdl_data_rate_set>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e000      	b.n	8002db2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	42480000 	.word	0x42480000

08002dc0 <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2232      	movs	r2, #50	; 0x32
 8002dce:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	331c      	adds	r3, #28
 8002e04:	f107 0208 	add.w	r2, r7, #8
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fc86 	bl	800371c <lis2mdl_magnetic_raw_get>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	e00c      	b.n	8002e36 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002e1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002e24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002e2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b088      	sub	sp, #32
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d137      	bne.n	8002ec0 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8002e50:	f107 0218 	add.w	r2, r7, #24
 8002e54:	2306      	movs	r3, #6
 8002e56:	2168      	movs	r1, #104	; 0x68
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f927 	bl	80030ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
 8002e68:	e06f      	b.n	8002f4a <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8002e6a:	7e7b      	ldrb	r3, [r7, #25]
 8002e6c:	b21b      	sxth	r3, r3
 8002e6e:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) +  (int16_t)buff[0];
 8002e70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	7e3b      	ldrb	r3, [r7, #24]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8002e86:	7efb      	ldrb	r3, [r7, #27]
 8002e88:	b21b      	sxth	r3, r3
 8002e8a:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) +  (int16_t)buff[2];
 8002e8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	7ebb      	ldrb	r3, [r7, #26]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8002ea2:	7f7b      	ldrb	r3, [r7, #29]
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) +  (int16_t)buff[4];
 8002ea8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	7f3b      	ldrb	r3, [r7, #28]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	82bb      	strh	r3, [r7, #20]
 8002ebe:	e00d      	b.n	8002edc <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	331c      	adds	r3, #28
 8002ec4:	f107 0210 	add.w	r2, r7, #16
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fc26 	bl	800371c <lis2mdl_magnetic_raw_get>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eda:	e036      	b.n	8002f4a <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff feb1 	bl	8002c4a <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002ee8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002eec:	ee07 3a90 	vmov	s15, r3
 8002ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f00:	ee17 2a90 	vmov	r2, s15
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002f08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f0c:	ee07 3a90 	vmov	s15, r3
 8002f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f20:	ee17 2a90 	vmov	r2, s15
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002f28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f40:	ee17 2a90 	vmov	r2, s15
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d10b      	bne.n	8002f82 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8002f6a:	1cba      	adds	r2, r7, #2
 8002f6c:	78f9      	ldrb	r1, [r7, #3]
 8002f6e:	2301      	movs	r3, #1
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f9da 	bl	800332a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	e00e      	b.n	8002fa0 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f103 001c 	add.w	r0, r3, #28
 8002f88:	1cba      	adds	r2, r7, #2
 8002f8a:	78f9      	ldrb	r1, [r7, #3]
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f000 fb02 	bl	8003596 <lis2mdl_write_reg>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9c:	e000      	b.n	8002fa0 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	72fb      	strb	r3, [r7, #11]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10e      	bne.n	8002fe6 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	695c      	ldr	r4, [r3, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	7b1b      	ldrb	r3, [r3, #12]
 8002fd0:	b298      	uxth	r0, r3
 8002fd2:	7afb      	ldrb	r3, [r7, #11]
 8002fd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	b299      	uxth	r1, r3
 8002fdc:	893b      	ldrh	r3, [r7, #8]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	47a0      	blx	r4
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	e01d      	b.n	8003022 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d10b      	bne.n	8003006 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	695c      	ldr	r4, [r3, #20]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	7b1b      	ldrb	r3, [r3, #12]
 8002ff6:	b298      	uxth	r0, r3
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	b299      	uxth	r1, r3
 8002ffc:	893b      	ldrh	r3, [r7, #8]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	47a0      	blx	r4
 8003002:	4603      	mov	r3, r0
 8003004:	e00d      	b.n	8003022 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	695c      	ldr	r4, [r3, #20]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	7b1b      	ldrb	r3, [r3, #12]
 800300e:	b298      	uxth	r0, r3
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003016:	b2db      	uxtb	r3, r3
 8003018:	b299      	uxth	r1, r3
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	47a0      	blx	r4
 8003020:	4603      	mov	r3, r0
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd90      	pop	{r4, r7, pc}

0800302a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800302a:	b590      	push	{r4, r7, lr}
 800302c:	b087      	sub	sp, #28
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	461a      	mov	r2, r3
 8003036:	460b      	mov	r3, r1
 8003038:	72fb      	strb	r3, [r7, #11]
 800303a:	4613      	mov	r3, r2
 800303c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	691c      	ldr	r4, [r3, #16]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	7b1b      	ldrb	r3, [r3, #12]
 8003052:	b298      	uxth	r0, r3
 8003054:	7afb      	ldrb	r3, [r7, #11]
 8003056:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800305a:	b2db      	uxtb	r3, r3
 800305c:	b299      	uxth	r1, r3
 800305e:	893b      	ldrh	r3, [r7, #8]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	47a0      	blx	r4
 8003064:	4603      	mov	r3, r0
 8003066:	e01d      	b.n	80030a4 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d10b      	bne.n	8003088 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	691c      	ldr	r4, [r3, #16]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	7b1b      	ldrb	r3, [r3, #12]
 8003078:	b298      	uxth	r0, r3
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	b299      	uxth	r1, r3
 800307e:	893b      	ldrh	r3, [r7, #8]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	47a0      	blx	r4
 8003084:	4603      	mov	r3, r0
 8003086:	e00d      	b.n	80030a4 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	691c      	ldr	r4, [r3, #16]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	7b1b      	ldrb	r3, [r3, #12]
 8003090:	b298      	uxth	r0, r3
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003098:	b2db      	uxtb	r3, r3
 800309a:	b299      	uxth	r1, r3
 800309c:	893b      	ldrh	r3, [r7, #8]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	47a0      	blx	r4
 80030a2:	4603      	mov	r3, r0
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}

080030ac <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08c      	sub	sp, #48	; 0x30
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	461a      	mov	r2, r3
 80030b8:	460b      	mov	r3, r1
 80030ba:	72fb      	strb	r3, [r7, #11]
 80030bc:	4613      	mov	r3, r2
 80030be:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80030c6:	2340      	movs	r3, #64	; 0x40
 80030c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80030d2:	233d      	movs	r3, #61	; 0x3d
 80030d4:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80030d6:	2315      	movs	r3, #21
 80030d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 80030dc:	2316      	movs	r3, #22
 80030de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 80030e2:	2317      	movs	r3, #23
 80030e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 80030e8:	2314      	movs	r3, #20
 80030ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80030ee:	2344      	movs	r3, #68	; 0x44
 80030f0:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80030f2:	2302      	movs	r3, #2
 80030f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80030f8:	2339      	movs	r3, #57	; 0x39
 80030fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003104:	2329      	movs	r3, #41	; 0x29
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800310a:	231e      	movs	r3, #30
 800310c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8003116:	893b      	ldrh	r3, [r7, #8]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800311c:	2310      	movs	r3, #16
 800311e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003128:	2340      	movs	r3, #64	; 0x40
 800312a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f103 001c 	add.w	r0, r3, #28
 8003134:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8003138:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800313c:	2301      	movs	r3, #1
 800313e:	f000 fa2a 	bl	8003596 <lis2mdl_write_reg>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	e0e9      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f103 001c 	add.w	r0, r3, #28
 8003154:	f107 021f 	add.w	r2, r7, #31
 8003158:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800315c:	2301      	movs	r3, #1
 800315e:	f000 fa1a 	bl	8003596 <lis2mdl_write_reg>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295
 800316c:	e0d9      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f103 001c 	add.w	r0, r3, #28
 8003174:	f107 020b 	add.w	r2, r7, #11
 8003178:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800317c:	2301      	movs	r3, #1
 800317e:	f000 fa0a 	bl	8003596 <lis2mdl_write_reg>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003188:	f04f 33ff 	mov.w	r3, #4294967295
 800318c:	e0c9      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f103 001c 	add.w	r0, r3, #28
 8003194:	f107 021d 	add.w	r2, r7, #29
 8003198:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800319c:	2301      	movs	r3, #1
 800319e:	f000 f9fa 	bl	8003596 <lis2mdl_write_reg>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d002      	beq.n	80031ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80031a8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ac:	e0b9      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f103 001c 	add.w	r0, r3, #28
 80031b4:	f107 021e 	add.w	r2, r7, #30
 80031b8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80031bc:	2301      	movs	r3, #1
 80031be:	f000 f9ea 	bl	8003596 <lis2mdl_write_reg>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e0a9      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f103 001c 	add.w	r0, r3, #28
 80031d4:	f107 0220 	add.w	r2, r7, #32
 80031d8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80031dc:	2301      	movs	r3, #1
 80031de:	f000 f9da 	bl	8003596 <lis2mdl_write_reg>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	e099      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f103 001c 	add.w	r0, r3, #28
 80031f4:	f107 021c 	add.w	r2, r7, #28
 80031f8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80031fc:	2301      	movs	r3, #1
 80031fe:	f000 f9b2 	bl	8003566 <lis2mdl_read_reg>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
 800320c:	e089      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800320e:	7f3b      	ldrb	r3, [r7, #28]
 8003210:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003214:	429a      	cmp	r2, r3
 8003216:	d102      	bne.n	800321e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003218:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800321c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f103 001c 	add.w	r0, r3, #28
 8003224:	f107 021c 	add.w	r2, r7, #28
 8003228:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800322c:	2301      	movs	r3, #1
 800322e:	f000 f9b2 	bl	8003596 <lis2mdl_write_reg>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	e071      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f103 001c 	add.w	r0, r3, #28
 8003244:	f107 0214 	add.w	r2, r7, #20
 8003248:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800324c:	2306      	movs	r3, #6
 800324e:	f000 f98a 	bl	8003566 <lis2mdl_read_reg>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	e061      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f103 001c 	add.w	r0, r3, #28
 8003264:	f107 021b 	add.w	r2, r7, #27
 8003268:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800326c:	2301      	movs	r3, #1
 800326e:	f000 f97a 	bl	8003566 <lis2mdl_read_reg>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	e051      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  }
  while ((data & xlda) != xlda);
 800327e:	7efa      	ldrb	r2, [r7, #27]
 8003280:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003284:	4013      	ands	r3, r2
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800328c:	429a      	cmp	r2, r3
 800328e:	d1e6      	bne.n	800325e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f103 001c 	add.w	r0, r3, #28
 8003296:	f107 021b 	add.w	r2, r7, #27
 800329a:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800329e:	2301      	movs	r3, #1
 80032a0:	f000 f961 	bl	8003566 <lis2mdl_read_reg>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	e038      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  }
  while ((data & sens_hub_endop) != sens_hub_endop);
 80032b0:	7efa      	ldrb	r2, [r7, #27]
 80032b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032b6:	4013      	ands	r3, r2
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80032be:	429a      	cmp	r2, r3
 80032c0:	d1e6      	bne.n	8003290 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f103 001c 	add.w	r0, r3, #28
 80032c8:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80032cc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80032d0:	2301      	movs	r3, #1
 80032d2:	f000 f960 	bl	8003596 <lis2mdl_write_reg>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
 80032e0:	e01f      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f103 001c 	add.w	r0, r3, #28
 80032e8:	893b      	ldrh	r3, [r7, #8]
 80032ea:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	f000 f939 	bl	8003566 <lis2mdl_read_reg>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	e010      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f103 001c 	add.w	r0, r3, #28
 8003306:	f107 0220 	add.w	r2, r7, #32
 800330a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800330e:	2301      	movs	r3, #1
 8003310:	f000 f941 	bl	8003596 <lis2mdl_write_reg>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	e000      	b.n	8003322 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3730      	adds	r7, #48	; 0x30
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b08c      	sub	sp, #48	; 0x30
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	461a      	mov	r2, r3
 8003336:	460b      	mov	r3, r1
 8003338:	72fb      	strb	r3, [r7, #11]
 800333a:	4613      	mov	r3, r2
 800333c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003344:	2340      	movs	r3, #64	; 0x40
 8003346:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003350:	233c      	movs	r3, #60	; 0x3c
 8003352:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003354:	2315      	movs	r3, #21
 8003356:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 800335a:	2316      	movs	r3, #22
 800335c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8003360:	2317      	movs	r3, #23
 8003362:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800336a:	2314      	movs	r3, #20
 800336c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003370:	2344      	movs	r3, #68	; 0x44
 8003372:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003374:	2339      	movs	r3, #57	; 0x39
 8003376:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003380:	2329      	movs	r3, #41	; 0x29
 8003382:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003386:	231e      	movs	r3, #30
 8003388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003392:	2310      	movs	r3, #16
 8003394:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800339e:	2340      	movs	r3, #64	; 0x40
 80033a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80033a4:	230e      	movs	r3, #14
 80033a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f103 001c 	add.w	r0, r3, #28
 80033b0:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80033b4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80033b8:	2301      	movs	r3, #1
 80033ba:	f000 f8ec 	bl	8003596 <lis2mdl_write_reg>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
 80033c8:	e0c9      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f103 001c 	add.w	r0, r3, #28
 80033d0:	f107 021f 	add.w	r2, r7, #31
 80033d4:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80033d8:	2301      	movs	r3, #1
 80033da:	f000 f8dc 	bl	8003596 <lis2mdl_write_reg>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	e0b9      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f103 001c 	add.w	r0, r3, #28
 80033f0:	f107 020b 	add.w	r2, r7, #11
 80033f4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80033f8:	2301      	movs	r3, #1
 80033fa:	f000 f8cc 	bl	8003596 <lis2mdl_write_reg>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
 8003408:	e0a9      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f103 001c 	add.w	r0, r3, #28
 8003410:	f107 021e 	add.w	r2, r7, #30
 8003414:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003418:	2301      	movs	r3, #1
 800341a:	f000 f8bc 	bl	8003596 <lis2mdl_write_reg>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	e099      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f103 001c 	add.w	r0, r3, #28
 8003430:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8003434:	2301      	movs	r3, #1
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	f000 f8ad 	bl	8003596 <lis2mdl_write_reg>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	e08a      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f103 001c 	add.w	r0, r3, #28
 800344e:	f107 021d 	add.w	r2, r7, #29
 8003452:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8003456:	2301      	movs	r3, #1
 8003458:	f000 f89d 	bl	8003596 <lis2mdl_write_reg>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	e07a      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f103 001c 	add.w	r0, r3, #28
 800346e:	f107 0220 	add.w	r2, r7, #32
 8003472:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8003476:	2301      	movs	r3, #1
 8003478:	f000 f88d 	bl	8003596 <lis2mdl_write_reg>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e06a      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f103 001c 	add.w	r0, r3, #28
 800348e:	f107 021c 	add.w	r2, r7, #28
 8003492:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003496:	2301      	movs	r3, #1
 8003498:	f000 f865 	bl	8003566 <lis2mdl_read_reg>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
 80034a6:	e05a      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80034a8:	7f3b      	ldrb	r3, [r7, #28]
 80034aa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d102      	bne.n	80034b8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80034b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b6:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f103 001c 	add.w	r0, r3, #28
 80034be:	f107 021c 	add.w	r2, r7, #28
 80034c2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80034c6:	2301      	movs	r3, #1
 80034c8:	f000 f865 	bl	8003596 <lis2mdl_write_reg>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	e042      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f103 001c 	add.w	r0, r3, #28
 80034de:	f107 0214 	add.w	r2, r7, #20
 80034e2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80034e6:	2306      	movs	r3, #6
 80034e8:	f000 f83d 	bl	8003566 <lis2mdl_read_reg>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295
 80034f6:	e032      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f103 001c 	add.w	r0, r3, #28
 80034fe:	f107 021b 	add.w	r2, r7, #27
 8003502:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003506:	2301      	movs	r3, #1
 8003508:	f000 f82d 	bl	8003566 <lis2mdl_read_reg>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e022      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  }
  while ((data & xlda) != xlda);
 8003518:	7efa      	ldrb	r2, [r7, #27]
 800351a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800351e:	4013      	ands	r3, r2
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003526:	429a      	cmp	r2, r3
 8003528:	d1e6      	bne.n	80034f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f103 001c 	add.w	r0, r3, #28
 8003530:	f107 021b 	add.w	r2, r7, #27
 8003534:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003538:	2301      	movs	r3, #1
 800353a:	f000 f814 	bl	8003566 <lis2mdl_read_reg>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	e009      	b.n	800355e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  }
  while ((data & wr_once_done) != wr_once_done);
 800354a:	7efa      	ldrb	r2, [r7, #27]
 800354c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003550:	4013      	ands	r3, r2
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003558:	429a      	cmp	r2, r3
 800355a:	d1e6      	bne.n	800352a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3730      	adds	r7, #48	; 0x30
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003566:	b590      	push	{r4, r7, lr}
 8003568:	b087      	sub	sp, #28
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	461a      	mov	r2, r3
 8003572:	460b      	mov	r3, r1
 8003574:	72fb      	strb	r3, [r7, #11]
 8003576:	4613      	mov	r3, r2
 8003578:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685c      	ldr	r4, [r3, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6898      	ldr	r0, [r3, #8]
 8003582:	893b      	ldrh	r3, [r7, #8]
 8003584:	7af9      	ldrb	r1, [r7, #11]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	47a0      	blx	r4
 800358a:	6178      	str	r0, [r7, #20]
  return ret;
 800358c:	697b      	ldr	r3, [r7, #20]
}
 800358e:	4618      	mov	r0, r3
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	bd90      	pop	{r4, r7, pc}

08003596 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003596:	b590      	push	{r4, r7, lr}
 8003598:	b087      	sub	sp, #28
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	461a      	mov	r2, r3
 80035a2:	460b      	mov	r3, r1
 80035a4:	72fb      	strb	r3, [r7, #11]
 80035a6:	4613      	mov	r3, r2
 80035a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681c      	ldr	r4, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6898      	ldr	r0, [r3, #8]
 80035b2:	893b      	ldrh	r3, [r7, #8]
 80035b4:	7af9      	ldrb	r1, [r7, #11]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	47a0      	blx	r4
 80035ba:	6178      	str	r0, [r7, #20]
  return ret;
 80035bc:	697b      	ldr	r3, [r7, #20]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd90      	pop	{r4, r7, pc}

080035c6 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80035d2:	f107 0208 	add.w	r2, r7, #8
 80035d6:	2301      	movs	r3, #1
 80035d8:	2160      	movs	r1, #96	; 0x60
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ffc3 	bl	8003566 <lis2mdl_read_reg>
 80035e0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10f      	bne.n	8003608 <lis2mdl_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	7a3b      	ldrb	r3, [r7, #8]
 80035f2:	f362 0301 	bfi	r3, r2, #0, #2
 80035f6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80035f8:	f107 0208 	add.w	r2, r7, #8
 80035fc:	2301      	movs	r3, #1
 80035fe:	2160      	movs	r1, #96	; 0x60
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ffc8 	bl	8003596 <lis2mdl_write_reg>
 8003606:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800361e:	f107 0208 	add.w	r2, r7, #8
 8003622:	2301      	movs	r3, #1
 8003624:	2160      	movs	r1, #96	; 0x60
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff9d 	bl	8003566 <lis2mdl_read_reg>
 800362c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10f      	bne.n	8003654 <lis2mdl_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	b2da      	uxtb	r2, r3
 800363c:	7a3b      	ldrb	r3, [r7, #8]
 800363e:	f362 0383 	bfi	r3, r2, #2, #2
 8003642:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8003644:	f107 0208 	add.w	r2, r7, #8
 8003648:	2301      	movs	r3, #1
 800364a:	2160      	movs	r1, #96	; 0x60
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ffa2 	bl	8003596 <lis2mdl_write_reg>
 8003652:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800366a:	f107 0208 	add.w	r2, r7, #8
 800366e:	2301      	movs	r3, #1
 8003670:	2160      	movs	r1, #96	; 0x60
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ff77 	bl	8003566 <lis2mdl_read_reg>
 8003678:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 800367a:	7a3b      	ldrb	r3, [r7, #8]
 800367c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d81a      	bhi.n	80036bc <lis2mdl_data_rate_get+0x5c>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <lis2mdl_data_rate_get+0x2c>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036a5 	.word	0x080036a5
 8003694:	080036ad 	.word	0x080036ad
 8003698:	080036b5 	.word	0x080036b5
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
      break;
 80036a2:	e00f      	b.n	80036c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
      break;
 80036aa:	e00b      	b.n	80036c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2202      	movs	r2, #2
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e007      	b.n	80036c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2203      	movs	r2, #3
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e003      	b.n	80036c4 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
      break;
 80036c2:	bf00      	nop
  }

  return ret;
 80036c4:	68fb      	ldr	r3, [r7, #12]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop

080036d0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80036dc:	f107 0208 	add.w	r2, r7, #8
 80036e0:	2301      	movs	r3, #1
 80036e2:	2162      	movs	r1, #98	; 0x62
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff3e 	bl	8003566 <lis2mdl_read_reg>
 80036ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10f      	bne.n	8003712 <lis2mdl_block_data_update_set+0x42>
    reg.bdu = val;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	7a3b      	ldrb	r3, [r7, #8]
 80036fc:	f362 1304 	bfi	r3, r2, #4, #1
 8003700:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003702:	f107 0208 	add.w	r2, r7, #8
 8003706:	2301      	movs	r3, #1
 8003708:	2162      	movs	r1, #98	; 0x62
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff43 	bl	8003596 <lis2mdl_write_reg>
 8003710:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8003726:	f107 020c 	add.w	r2, r7, #12
 800372a:	2306      	movs	r3, #6
 800372c:	2168      	movs	r1, #104	; 0x68
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ff19 	bl	8003566 <lis2mdl_read_reg>
 8003734:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003736:	7b7b      	ldrb	r3, [r7, #13]
 8003738:	b21a      	sxth	r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003744:	b29b      	uxth	r3, r3
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	b29a      	uxth	r2, r3
 800374a:	7b3b      	ldrb	r3, [r7, #12]
 800374c:	b29b      	uxth	r3, r3
 800374e:	4413      	add	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	b21a      	sxth	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	3302      	adds	r3, #2
 800375e:	b212      	sxth	r2, r2
 8003760:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	3302      	adds	r3, #2
 8003766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376a:	b29b      	uxth	r3, r3
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	b29a      	uxth	r2, r3
 8003770:	7bbb      	ldrb	r3, [r7, #14]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4413      	add	r3, r2
 8003776:	b29a      	uxth	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	3302      	adds	r3, #2
 800377c:	b212      	sxth	r2, r2
 800377e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003780:	7c7a      	ldrb	r2, [r7, #17]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	3304      	adds	r3, #4
 8003786:	b212      	sxth	r2, r2
 8003788:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	3304      	adds	r3, #4
 800378e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003792:	b29b      	uxth	r3, r3
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	b29a      	uxth	r2, r3
 8003798:	7c3b      	ldrb	r3, [r7, #16]
 800379a:	b29b      	uxth	r3, r3
 800379c:	4413      	add	r3, r2
 800379e:	b29a      	uxth	r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	3304      	adds	r3, #4
 80037a4:	b212      	sxth	r2, r2
 80037a6:	801a      	strh	r2, [r3, #0]
  return ret;
 80037a8:	697b      	ldr	r3, [r7, #20]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80037bc:	2301      	movs	r3, #1
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	214f      	movs	r1, #79	; 0x4f
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff fecf 	bl	8003566 <lis2mdl_read_reg>
 80037c8:	60f8      	str	r0, [r7, #12]
  return ret;
 80037ca:	68fb      	ldr	r3, [r7, #12]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80037e0:	f107 0208 	add.w	r2, r7, #8
 80037e4:	2301      	movs	r3, #1
 80037e6:	2162      	movs	r1, #98	; 0x62
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff febc 	bl	8003566 <lis2mdl_read_reg>
 80037ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <lis2mdl_self_test_set+0x42>
    reg.self_test = val;
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	7a3b      	ldrb	r3, [r7, #8]
 8003800:	f362 0341 	bfi	r3, r2, #1, #1
 8003804:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003806:	f107 0208 	add.w	r2, r7, #8
 800380a:	2301      	movs	r3, #1
 800380c:	2162      	movs	r1, #98	; 0x62
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fec1 	bl	8003596 <lis2mdl_write_reg>
 8003814:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003816:	68fb      	ldr	r3, [r7, #12]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800382c:	f107 0208 	add.w	r2, r7, #8
 8003830:	2301      	movs	r3, #1
 8003832:	2162      	movs	r1, #98	; 0x62
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff fe96 	bl	8003566 <lis2mdl_read_reg>
 800383a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <lis2mdl_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	7a3b      	ldrb	r3, [r7, #8]
 800384c:	f362 1345 	bfi	r3, r2, #5, #1
 8003850:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8003852:	f107 0208 	add.w	r2, r7, #8
 8003856:	2301      	movs	r3, #1
 8003858:	2162      	movs	r1, #98	; 0x62
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fe9b 	bl	8003596 <lis2mdl_write_reg>
 8003860:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003862:	68fb      	ldr	r3, [r7, #12]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d103      	bne.n	8003888 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e04d      	b.n	8003924 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	7b1a      	ldrb	r2, [r3, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <LSM6DSO_RegisterBusIO+0xc4>)
 80038c4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <LSM6DSO_RegisterBusIO+0xc8>)
 80038ca:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d103      	bne.n	80038e2 <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e020      	b.n	8003924 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4798      	blx	r3
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e016      	b.n	8003924 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d112      	bne.n	8003924 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003908:	230c      	movs	r3, #12
 800390a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 800390c:	7afb      	ldrb	r3, [r7, #11]
 800390e:	461a      	mov	r2, r3
 8003910:	2112      	movs	r1, #18
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 ff59 	bl	80047ca <LSM6DSO_Write_Reg>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 800391e:	f04f 33ff 	mov.w	r3, #4294967295
 8003922:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	08004c6d 	.word	0x08004c6d
 8003934:	08004ca3 	.word	0x08004ca3

08003938 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	331c      	adds	r3, #28
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	4618      	mov	r0, r3
 8003948:	f001 fe97 	bl	800567a <lsm6dso_i3c_disable_set>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	e060      	b.n	8003a1a <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	331c      	adds	r3, #28
 800395c:	2101      	movs	r1, #1
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fe65 	bl	800562e <lsm6dso_auto_increment_set>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	e054      	b.n	8003a1a <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	331c      	adds	r3, #28
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f001 fd66 	bl	8005448 <lsm6dso_block_data_update_set>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8003982:	f04f 33ff 	mov.w	r3, #4294967295
 8003986:	e048      	b.n	8003a1a <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	331c      	adds	r3, #28
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f001 feb9 	bl	8005706 <lsm6dso_fifo_mode_set>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	e03c      	b.n	8003a1a <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	331c      	adds	r3, #28
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fa20 	bl	8004df4 <lsm6dso_xl_data_rate_set>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	e02c      	b.n	8003a1a <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	331c      	adds	r3, #28
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 f9b6 	bl	8004d38 <lsm6dso_xl_full_scale_set>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	e020      	b.n	8003a1a <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2204      	movs	r2, #4
 80039dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	331c      	adds	r3, #28
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fbd0 	bl	800518c <lsm6dso_gy_data_rate_set>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295
 80039f6:	e010      	b.n	8003a1a <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	331c      	adds	r3, #28
 80039fc:	2106      	movs	r1, #6
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 fb5c 	bl	80050bc <lsm6dso_gy_full_scale_set>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0e:	e004      	b.n	8003a1a <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f888 	bl	8003b40 <LSM6DSO_ACC_Disable>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	e015      	b.n	8003a68 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fc2e 	bl	800429e <LSM6DSO_GYRO_Disable>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	e00c      	b.n	8003a68 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	331c      	adds	r3, #28
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 fdc3 	bl	800560c <lsm6dso_device_id_get>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	e000      	b.n	8003a94 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2200      	movs	r2, #0
 8003abc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003ac4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2210      	movs	r2, #16
 8003aca:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <LSM6DSO_GetCapabilities+0x58>)
 8003ad6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4a06      	ldr	r2, [pc, #24]	; (8003af4 <LSM6DSO_GetCapabilities+0x58>)
 8003adc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	45d02000 	.word	0x45d02000

08003af8 <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e014      	b.n	8003b38 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f103 021c 	add.w	r2, r3, #28
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f001 f969 	bl	8004df4 <lsm6dso_xl_data_rate_set>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	e004      	b.n	8003b38 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e01f      	b.n	8003b96 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f103 021c 	add.w	r2, r3, #28
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	332b      	adds	r3, #43	; 0x2b
 8003b60:	4619      	mov	r1, r3
 8003b62:	4610      	mov	r0, r2
 8003b64:	f001 fa42 	bl	8004fec <lsm6dso_xl_data_rate_get>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8003b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b72:	e010      	b.n	8003b96 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	331c      	adds	r3, #28
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 f93a 	bl	8004df4 <lsm6dso_xl_data_rate_set>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	e004      	b.n	8003b96 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	331c      	adds	r3, #28
 8003bb2:	f107 020b 	add.w	r2, r7, #11
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f8e3 	bl	8004d84 <lsm6dso_xl_full_scale_get>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	e023      	b.n	8003c12 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003bca:	7afb      	ldrb	r3, [r7, #11]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d81b      	bhi.n	8003c08 <LSM6DSO_ACC_GetSensitivity+0x68>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003bf1 	.word	0x08003bf1
 8003be4:	08003bf9 	.word	0x08003bf9
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8003bec:	601a      	str	r2, [r3, #0]
      break;
 8003bee:	e00f      	b.n	8003c10 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8003bf4:	601a      	str	r2, [r3, #0]
      break;
 8003bf6:	e00b      	b.n	8003c10 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8003bfc:	601a      	str	r2, [r3, #0]
      break;
 8003bfe:	e007      	b.n	8003c10 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8003c04:	601a      	str	r2, [r3, #0]
      break;
 8003c06:	e003      	b.n	8003c10 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	60fb      	str	r3, [r7, #12]
      break;
 8003c0e:	bf00      	nop
  }

  return ret;
 8003c10:	68fb      	ldr	r3, [r7, #12]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	3d79db23 	.word	0x3d79db23
 8003c20:	3df9db23 	.word	0x3df9db23
 8003c24:	3e79db23 	.word	0x3e79db23
 8003c28:	3ef9db23 	.word	0x3ef9db23

08003c2c <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	331c      	adds	r3, #28
 8003c3e:	f107 020b 	add.w	r2, r7, #11
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f9d1 	bl	8004fec <lsm6dso_xl_data_rate_get>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	e054      	b.n	8003d00 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	2b0b      	cmp	r3, #11
 8003c5a:	d84c      	bhi.n	8003cf6 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c95 	.word	0x08003c95
 8003c68:	08003ca7 	.word	0x08003ca7
 8003c6c:	08003caf 	.word	0x08003caf
 8003c70:	08003cb7 	.word	0x08003cb7
 8003c74:	08003cbf 	.word	0x08003cbf
 8003c78:	08003cc7 	.word	0x08003cc7
 8003c7c:	08003ccf 	.word	0x08003ccf
 8003c80:	08003cd7 	.word	0x08003cd7
 8003c84:	08003cdf 	.word	0x08003cdf
 8003c88:	08003ce7 	.word	0x08003ce7
 8003c8c:	08003cef 	.word	0x08003cef
 8003c90:	08003c9f 	.word	0x08003c9f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
      break;
 8003c9c:	e02f      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8003ca2:	601a      	str	r2, [r3, #0]
      break;
 8003ca4:	e02b      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8003caa:	601a      	str	r2, [r3, #0]
      break;
 8003cac:	e027      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8003cb2:	601a      	str	r2, [r3, #0]
      break;
 8003cb4:	e023      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8003cba:	601a      	str	r2, [r3, #0]
      break;
 8003cbc:	e01f      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8003cc2:	601a      	str	r2, [r3, #0]
      break;
 8003cc4:	e01b      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 8003cca:	601a      	str	r2, [r3, #0]
      break;
 8003ccc:	e017      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8003cd2:	601a      	str	r2, [r3, #0]
      break;
 8003cd4:	e013      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 8003cda:	601a      	str	r2, [r3, #0]
      break;
 8003cdc:	e00f      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8003ce2:	601a      	str	r2, [r3, #0]
      break;
 8003ce4:	e00b      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 8003cea:	601a      	str	r2, [r3, #0]
      break;
 8003cec:	e007      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8003cf2:	601a      	str	r2, [r3, #0]
      break;
 8003cf4:	e003      	b.n	8003cfe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfa:	60fb      	str	r3, [r7, #12]
      break;
 8003cfc:	bf00      	nop
  }

  return ret;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	3fcccccd 	.word	0x3fcccccd
 8003d0c:	41480000 	.word	0x41480000
 8003d10:	41d00000 	.word	0x41d00000
 8003d14:	42500000 	.word	0x42500000
 8003d18:	42d00000 	.word	0x42d00000
 8003d1c:	43500000 	.word	0x43500000
 8003d20:	43d08000 	.word	0x43d08000
 8003d24:	44504000 	.word	0x44504000
 8003d28:	44d06000 	.word	0x44d06000
 8003d2c:	45505000 	.word	0x45505000
 8003d30:	45d05800 	.word	0x45d05800

08003d34 <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8003d40:	2100      	movs	r1, #0
 8003d42:	ed97 0a00 	vldr	s0, [r7]
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f806 	bl	8003d58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8003d4c:	4603      	mov	r3, r0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d64:	460b      	mov	r3, r1
 8003d66:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	f000 80ea 	beq.w	8003f4c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	f300 8163 	bgt.w	8004044 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d074      	beq.n	8003e70 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8003d86:	e15d      	b.n	8004044 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f103 001c 	add.w	r0, r3, #28
 8003d8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003d92:	2301      	movs	r3, #1
 8003d94:	2114      	movs	r1, #20
 8003d96:	f000 ff9f 	bl	8004cd8 <lsm6dso_read_reg>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	e16c      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003da6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003daa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d025      	beq.n	8003e00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d10b      	bne.n	8003dd6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	331c      	adds	r3, #28
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f815 	bl	8004df4 <lsm6dso_xl_data_rate_set>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8003dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd4:	e154      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003dd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003dda:	f36f 13c7 	bfc	r3, #7, #1
 8003dde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f103 001c 	add.w	r0, r3, #28
 8003de8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003dec:	2301      	movs	r3, #1
 8003dee:	2114      	movs	r1, #20
 8003df0:	f000 ff8a 	bl	8004d08 <lsm6dso_write_reg>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	e13f      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f103 001c 	add.w	r0, r3, #28
 8003e06:	f107 0220 	add.w	r2, r7, #32
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	2115      	movs	r1, #21
 8003e0e:	f000 ff63 	bl	8004cd8 <lsm6dso_read_reg>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	e130      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003e1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d014      	beq.n	8003e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8003e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e30:	f36f 1304 	bfc	r3, #4, #1
 8003e34:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f103 001c 	add.w	r0, r3, #28
 8003e3e:	f107 0220 	add.w	r2, r7, #32
 8003e42:	2301      	movs	r3, #1
 8003e44:	2115      	movs	r1, #21
 8003e46:	f000 ff5f 	bl	8004d08 <lsm6dso_write_reg>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	e114      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8003e56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e5a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	d400      	bmi.n	8003e6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8003e68:	e0f0      	b.n	800404c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8003e6a:	4b87      	ldr	r3, [pc, #540]	; (8004088 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8003e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6e:	e0ed      	b.n	800404c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f103 001c 	add.w	r0, r3, #28
 8003e76:	f107 021c 	add.w	r2, r7, #28
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	2114      	movs	r1, #20
 8003e7e:	f000 ff2b 	bl	8004cd8 <lsm6dso_read_reg>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	e0f8      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8003e8e:	7f3b      	ldrb	r3, [r7, #28]
 8003e90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d023      	beq.n	8003ee2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10b      	bne.n	8003ebc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	331c      	adds	r3, #28
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 ffa2 	bl	8004df4 <lsm6dso_xl_data_rate_set>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	e0e1      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8003ebc:	7f3b      	ldrb	r3, [r7, #28]
 8003ebe:	f36f 13c7 	bfc	r3, #7, #1
 8003ec2:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f103 001c 	add.w	r0, r3, #28
 8003eca:	f107 021c 	add.w	r2, r7, #28
 8003ece:	2301      	movs	r3, #1
 8003ed0:	2114      	movs	r1, #20
 8003ed2:	f000 ff19 	bl	8004d08 <lsm6dso_write_reg>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	e0ce      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f103 001c 	add.w	r0, r3, #28
 8003ee8:	f107 0218 	add.w	r2, r7, #24
 8003eec:	2301      	movs	r3, #1
 8003eee:	2115      	movs	r1, #21
 8003ef0:	f000 fef2 	bl	8004cd8 <lsm6dso_read_reg>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	e0bf      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8003f00:	7e3b      	ldrb	r3, [r7, #24]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d112      	bne.n	8003f32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8003f0c:	7e3b      	ldrb	r3, [r7, #24]
 8003f0e:	f043 0310 	orr.w	r3, r3, #16
 8003f12:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f103 001c 	add.w	r0, r3, #28
 8003f1a:	f107 0218 	add.w	r2, r7, #24
 8003f1e:	2301      	movs	r3, #1
 8003f20:	2115      	movs	r1, #21
 8003f22:	f000 fef1 	bl	8004d08 <lsm6dso_write_reg>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8003f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f30:	e0a6      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8003f32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f36:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800408c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8003f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	dc00      	bgt.n	8003f46 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8003f44:	e082      	b.n	800404c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8003f46:	4b52      	ldr	r3, [pc, #328]	; (8004090 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4a:	e07f      	b.n	800404c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f103 001c 	add.w	r0, r3, #28
 8003f52:	f107 0210 	add.w	r2, r7, #16
 8003f56:	2301      	movs	r3, #1
 8003f58:	2115      	movs	r1, #21
 8003f5a:	f000 febd 	bl	8004cd8 <lsm6dso_read_reg>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295
 8003f68:	e08a      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8003f6a:	7c3b      	ldrb	r3, [r7, #16]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d012      	beq.n	8003f9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8003f76:	7c3b      	ldrb	r3, [r7, #16]
 8003f78:	f36f 1304 	bfc	r3, #4, #1
 8003f7c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f103 001c 	add.w	r0, r3, #28
 8003f84:	f107 0210 	add.w	r2, r7, #16
 8003f88:	2301      	movs	r3, #1
 8003f8a:	2115      	movs	r1, #21
 8003f8c:	f000 febc 	bl	8004d08 <lsm6dso_write_reg>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	e071      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d108      	bne.n	8003fb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f979 	bl	800429e <LSM6DSO_GYRO_Disable>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	e063      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f103 001c 	add.w	r0, r3, #28
 8003fbe:	f107 0214 	add.w	r2, r7, #20
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	2114      	movs	r1, #20
 8003fc6:	f000 fe87 	bl	8004cd8 <lsm6dso_read_reg>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	e054      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8003fd6:	7d3b      	ldrb	r3, [r7, #20]
 8003fd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d123      	bne.n	800402a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d10b      	bne.n	8004004 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	331c      	adds	r3, #28
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fefe 	bl	8004df4 <lsm6dso_xl_data_rate_set>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8004002:	e03d      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8004004:	7d3b      	ldrb	r3, [r7, #20]
 8004006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800400a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f103 001c 	add.w	r0, r3, #28
 8004012:	f107 0214 	add.w	r2, r7, #20
 8004016:	2301      	movs	r3, #1
 8004018:	2114      	movs	r1, #20
 800401a:	f000 fe75 	bl	8004d08 <lsm6dso_write_reg>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8004024:	f04f 33ff 	mov.w	r3, #4294967295
 8004028:	e02a      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800402a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800402e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800408c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8004032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403a:	dc00      	bgt.n	800403e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 800403c:	e006      	b.n	800404c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8004040:	62bb      	str	r3, [r7, #40]	; 0x28
 8004042:	e003      	b.n	800404c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8004044:	f04f 33ff 	mov.w	r3, #4294967295
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800404a:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d102      	bne.n	800405a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	e012      	b.n	8004080 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004060:	2b01      	cmp	r3, #1
 8004062:	d106      	bne.n	8004072 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004064:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fbc9 	bl	8004800 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800406e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004070:	e005      	b.n	800407e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8004072:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fc5a 	bl	8004930 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800407c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004080:	4618      	mov	r0, r3
 8004082:	3730      	adds	r7, #48	; 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	41480000 	.word	0x41480000
 800408c:	43500000 	.word	0x43500000
 8004090:	43500000 	.word	0x43500000

08004094 <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	331c      	adds	r3, #28
 80040a6:	f107 020b 	add.w	r2, r7, #11
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fe69 	bl	8004d84 <lsm6dso_xl_full_scale_get>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80040b8:	f04f 33ff 	mov.w	r3, #4294967295
 80040bc:	e023      	b.n	8004106 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80040be:	7afb      	ldrb	r3, [r7, #11]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d81b      	bhi.n	80040fc <LSM6DSO_ACC_GetFullScale+0x68>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <LSM6DSO_ACC_GetFullScale+0x38>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040ed 	.word	0x080040ed
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2202      	movs	r2, #2
 80040e0:	601a      	str	r2, [r3, #0]
      break;
 80040e2:	e00f      	b.n	8004104 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2204      	movs	r2, #4
 80040e8:	601a      	str	r2, [r3, #0]
      break;
 80040ea:	e00b      	b.n	8004104 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2208      	movs	r2, #8
 80040f0:	601a      	str	r2, [r3, #0]
      break;
 80040f2:	e007      	b.n	8004104 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2210      	movs	r2, #16
 80040f8:	601a      	str	r2, [r3, #0]
      break;
 80040fa:	e003      	b.n	8004104 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80040fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004100:	60fb      	str	r3, [r7, #12]
      break;
 8004102:	bf00      	nop
  }

  return ret;
 8004104:	68fb      	ldr	r3, [r7, #12]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop

08004110 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b02      	cmp	r3, #2
 800411e:	dd0b      	ble.n	8004138 <LSM6DSO_ACC_SetFullScale+0x28>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b04      	cmp	r3, #4
 8004124:	dd06      	ble.n	8004134 <LSM6DSO_ACC_SetFullScale+0x24>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b08      	cmp	r3, #8
 800412a:	dc01      	bgt.n	8004130 <LSM6DSO_ACC_SetFullScale+0x20>
 800412c:	2303      	movs	r3, #3
 800412e:	e004      	b.n	800413a <LSM6DSO_ACC_SetFullScale+0x2a>
 8004130:	2301      	movs	r3, #1
 8004132:	e002      	b.n	800413a <LSM6DSO_ACC_SetFullScale+0x2a>
 8004134:	2302      	movs	r3, #2
 8004136:	e000      	b.n	800413a <LSM6DSO_ACC_SetFullScale+0x2a>
 8004138:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 800413a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	331c      	adds	r3, #28
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fdf7 	bl	8004d38 <lsm6dso_xl_full_scale_set>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8004150:	f04f 33ff 	mov.w	r3, #4294967295
 8004154:	e000      	b.n	8004158 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	331c      	adds	r3, #28
 800416e:	f107 0208 	add.w	r2, r7, #8
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f001 f9d8 	bl	800552a <lsm6dso_acceleration_raw_get>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	e00c      	b.n	80041a0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004186:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800418e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004196:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	331c      	adds	r3, #28
 80041bc:	f107 0210 	add.w	r2, r7, #16
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 f9b1 	bl	800552a <lsm6dso_acceleration_raw_get>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e03c      	b.n	800424e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80041d4:	f107 030c 	add.w	r3, r7, #12
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fce0 	bl	8003ba0 <LSM6DSO_ACC_GetSensitivity>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	e030      	b.n	800424e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80041ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004204:	ee17 2a90 	vmov	r2, s15
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800420c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004210:	ee07 3a90 	vmov	s15, r3
 8004214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004218:	edd7 7a03 	vldr	s15, [r7, #12]
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004224:	ee17 2a90 	vmov	r2, s15
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800422c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004238:	edd7 7a03 	vldr	s15, [r7, #12]
 800423c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004244:	ee17 2a90 	vmov	r2, s15
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e014      	b.n	8004296 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f103 021c 	add.w	r2, r3, #28
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 ff86 	bl	800518c <lsm6dso_gy_data_rate_set>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	e004      	b.n	8004296 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e01f      	b.n	80042f4 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f103 021c 	add.w	r2, r3, #28
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	332c      	adds	r3, #44	; 0x2c
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f001 f85f 	bl	8005384 <lsm6dso_gy_data_rate_get>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
 80042d0:	e010      	b.n	80042f4 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	331c      	adds	r3, #28
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 ff57 	bl	800518c <lsm6dso_gy_data_rate_set>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	e004      	b.n	80042f4 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	331c      	adds	r3, #28
 800430e:	f107 020b 	add.w	r2, r7, #11
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fef7 	bl	8005108 <lsm6dso_gy_full_scale_get>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	e02d      	b.n	8004382 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d825      	bhi.n	8004378 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004359 	.word	0x08004359
 8004338:	08004351 	.word	0x08004351
 800433c:	08004361 	.word	0x08004361
 8004340:	08004379 	.word	0x08004379
 8004344:	08004369 	.word	0x08004369
 8004348:	08004379 	.word	0x08004379
 800434c:	08004371 	.word	0x08004371
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4a0e      	ldr	r2, [pc, #56]	; (800438c <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8004354:	601a      	str	r2, [r3, #0]
      break;
 8004356:	e013      	b.n	8004380 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 800435c:	601a      	str	r2, [r3, #0]
      break;
 800435e:	e00f      	b.n	8004380 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8004364:	601a      	str	r2, [r3, #0]
      break;
 8004366:	e00b      	b.n	8004380 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4a0b      	ldr	r2, [pc, #44]	; (8004398 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 800436c:	601a      	str	r2, [r3, #0]
      break;
 800436e:	e007      	b.n	8004380 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8004374:	601a      	str	r2, [r3, #0]
      break;
 8004376:	e003      	b.n	8004380 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	60fb      	str	r3, [r7, #12]
      break;
 800437e:	bf00      	nop
  }

  return ret;
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	408c0000 	.word	0x408c0000
 8004390:	410c0000 	.word	0x410c0000
 8004394:	418c0000 	.word	0x418c0000
 8004398:	420c0000 	.word	0x420c0000
 800439c:	428c0000 	.word	0x428c0000

080043a0 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	331c      	adds	r3, #28
 80043b2:	f107 020b 	add.w	r2, r7, #11
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 ffe3 	bl	8005384 <lsm6dso_gy_data_rate_get>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
 80043c8:	e04e      	b.n	8004468 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80043ca:	7afb      	ldrb	r3, [r7, #11]
 80043cc:	2b0a      	cmp	r3, #10
 80043ce:	d846      	bhi.n	800445e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	08004405 	.word	0x08004405
 80043dc:	0800440f 	.word	0x0800440f
 80043e0:	08004417 	.word	0x08004417
 80043e4:	0800441f 	.word	0x0800441f
 80043e8:	08004427 	.word	0x08004427
 80043ec:	0800442f 	.word	0x0800442f
 80043f0:	08004437 	.word	0x08004437
 80043f4:	0800443f 	.word	0x0800443f
 80043f8:	08004447 	.word	0x08004447
 80043fc:	0800444f 	.word	0x0800444f
 8004400:	08004457 	.word	0x08004457
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
      break;
 800440c:	e02b      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	4a17      	ldr	r2, [pc, #92]	; (8004470 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8004412:	601a      	str	r2, [r3, #0]
      break;
 8004414:	e027      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	4a16      	ldr	r2, [pc, #88]	; (8004474 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800441a:	601a      	str	r2, [r3, #0]
      break;
 800441c:	e023      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	4a15      	ldr	r2, [pc, #84]	; (8004478 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8004422:	601a      	str	r2, [r3, #0]
      break;
 8004424:	e01f      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800442a:	601a      	str	r2, [r3, #0]
      break;
 800442c:	e01b      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	4a13      	ldr	r2, [pc, #76]	; (8004480 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8004432:	601a      	str	r2, [r3, #0]
      break;
 8004434:	e017      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800443a:	601a      	str	r2, [r3, #0]
      break;
 800443c:	e013      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	4a11      	ldr	r2, [pc, #68]	; (8004488 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8004442:	601a      	str	r2, [r3, #0]
      break;
 8004444:	e00f      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	4a10      	ldr	r2, [pc, #64]	; (800448c <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800444a:	601a      	str	r2, [r3, #0]
      break;
 800444c:	e00b      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8004452:	601a      	str	r2, [r3, #0]
      break;
 8004454:	e007      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800445a:	601a      	str	r2, [r3, #0]
      break;
 800445c:	e003      	b.n	8004466 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	60fb      	str	r3, [r7, #12]
      break;
 8004464:	bf00      	nop
  }

  return ret;
 8004466:	68fb      	ldr	r3, [r7, #12]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	41480000 	.word	0x41480000
 8004474:	41d00000 	.word	0x41d00000
 8004478:	42500000 	.word	0x42500000
 800447c:	42d00000 	.word	0x42d00000
 8004480:	43500000 	.word	0x43500000
 8004484:	43d08000 	.word	0x43d08000
 8004488:	44504000 	.word	0x44504000
 800448c:	44d06000 	.word	0x44d06000
 8004490:	45505000 	.word	0x45505000
 8004494:	45d05800 	.word	0x45d05800

08004498 <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80044a4:	2100      	movs	r1, #0
 80044a6:	ed97 0a00 	vldr	s0, [r7]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f806 	bl	80044bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80044c8:	460b      	mov	r3, r1
 80044ca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d028      	beq.n	8004530 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80044de:	e05c      	b.n	800459a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f103 001c 	add.w	r0, r3, #28
 80044e6:	f107 0214 	add.w	r2, r7, #20
 80044ea:	2301      	movs	r3, #1
 80044ec:	2116      	movs	r1, #22
 80044ee:	f000 fbf3 	bl	8004cd8 <lsm6dso_read_reg>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	e06c      	b.n	80045d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80044fe:	7d3b      	ldrb	r3, [r7, #20]
 8004500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04b      	beq.n	80045a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800450a:	7d3b      	ldrb	r3, [r7, #20]
 800450c:	f36f 13c7 	bfc	r3, #7, #1
 8004510:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f103 001c 	add.w	r0, r3, #28
 8004518:	f107 0214 	add.w	r2, r7, #20
 800451c:	2301      	movs	r3, #1
 800451e:	2116      	movs	r1, #22
 8004520:	f000 fbf2 	bl	8004d08 <lsm6dso_write_reg>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03b      	beq.n	80045a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	e053      	b.n	80045d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f103 001c 	add.w	r0, r3, #28
 8004536:	f107 0210 	add.w	r2, r7, #16
 800453a:	2301      	movs	r3, #1
 800453c:	2116      	movs	r1, #22
 800453e:	f000 fbcb 	bl	8004cd8 <lsm6dso_read_reg>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8004548:	f04f 33ff 	mov.w	r3, #4294967295
 800454c:	e044      	b.n	80045d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800454e:	7c3b      	ldrb	r3, [r7, #16]
 8004550:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d112      	bne.n	8004580 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800455a:	7c3b      	ldrb	r3, [r7, #16]
 800455c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004560:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f103 001c 	add.w	r0, r3, #28
 8004568:	f107 0210 	add.w	r2, r7, #16
 800456c:	2301      	movs	r3, #1
 800456e:	2116      	movs	r1, #22
 8004570:	f000 fbca 	bl	8004d08 <lsm6dso_write_reg>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	e02b      	b.n	80045d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8004580:	edd7 7a06 	vldr	s15, [r7, #24]
 8004584:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80045e0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8004588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004590:	dc00      	bgt.n	8004594 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8004592:	e007      	b.n	80045a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8004594:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8004596:	61bb      	str	r3, [r7, #24]
 8004598:	e004      	b.n	80045a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	61fb      	str	r3, [r7, #28]
      break;
 80045a0:	e000      	b.n	80045a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80045a2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d102      	bne.n	80045b2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	e012      	b.n	80045d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80045bc:	ed97 0a06 	vldr	s0, [r7, #24]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fa45 	bl	8004a50 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80045c6:	61f8      	str	r0, [r7, #28]
 80045c8:	e005      	b.n	80045d6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80045ca:	ed97 0a06 	vldr	s0, [r7, #24]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 faca 	bl	8004b68 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80045d4:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80045d6:	69fb      	ldr	r3, [r7, #28]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	43500000 	.word	0x43500000
 80045e4:	43500000 	.word	0x43500000

080045e8 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	331c      	adds	r3, #28
 80045fa:	f107 020b 	add.w	r2, r7, #11
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fd81 	bl	8005108 <lsm6dso_gy_full_scale_get>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	e030      	b.n	8004674 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004612:	7afb      	ldrb	r3, [r7, #11]
 8004614:	2b06      	cmp	r3, #6
 8004616:	d828      	bhi.n	800466a <LSM6DSO_GYRO_GetFullScale+0x82>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004645 	.word	0x08004645
 8004624:	0800463d 	.word	0x0800463d
 8004628:	0800464d 	.word	0x0800464d
 800462c:	0800466b 	.word	0x0800466b
 8004630:	08004657 	.word	0x08004657
 8004634:	0800466b 	.word	0x0800466b
 8004638:	08004661 	.word	0x08004661
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	227d      	movs	r2, #125	; 0x7d
 8004640:	601a      	str	r2, [r3, #0]
      break;
 8004642:	e016      	b.n	8004672 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	22fa      	movs	r2, #250	; 0xfa
 8004648:	601a      	str	r2, [r3, #0]
      break;
 800464a:	e012      	b.n	8004672 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004652:	601a      	str	r2, [r3, #0]
      break;
 8004654:	e00d      	b.n	8004672 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800465c:	601a      	str	r2, [r3, #0]
      break;
 800465e:	e008      	b.n	8004672 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004666:	601a      	str	r2, [r3, #0]
      break;
 8004668:	e003      	b.n	8004672 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 800466a:	f04f 33ff 	mov.w	r3, #4294967295
 800466e:	60fb      	str	r3, [r7, #12]
      break;
 8004670:	bf00      	nop
  }

  return ret;
 8004672:	68fb      	ldr	r3, [r7, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b7d      	cmp	r3, #125	; 0x7d
 800468a:	dd12      	ble.n	80046b2 <LSM6DSO_GYRO_SetFullScale+0x36>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2bfa      	cmp	r3, #250	; 0xfa
 8004690:	dd0d      	ble.n	80046ae <LSM6DSO_GYRO_SetFullScale+0x32>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004698:	dd07      	ble.n	80046aa <LSM6DSO_GYRO_SetFullScale+0x2e>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a0:	dc01      	bgt.n	80046a6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80046a2:	2304      	movs	r3, #4
 80046a4:	e006      	b.n	80046b4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80046a6:	2306      	movs	r3, #6
 80046a8:	e004      	b.n	80046b4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80046ae:	2300      	movs	r3, #0
 80046b0:	e000      	b.n	80046b4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80046b2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80046b4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	331c      	adds	r3, #28
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fcfc 	bl	80050bc <lsm6dso_gy_full_scale_set>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	e000      	b.n	80046d2 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	331c      	adds	r3, #28
 80046e8:	f107 0208 	add.w	r2, r7, #8
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fed0 	bl	8005494 <lsm6dso_angular_rate_raw_get>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	e00c      	b.n	800471a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004700:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004708:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004710:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	331c      	adds	r3, #28
 8004730:	f107 0210 	add.w	r2, r7, #16
 8004734:	4611      	mov	r1, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f000 feac 	bl	8005494 <lsm6dso_angular_rate_raw_get>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295
 8004746:	e03c      	b.n	80047c2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fdd4 	bl	80042fc <LSM6DSO_GYRO_GetSensitivity>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
 800475e:	e030      	b.n	80047c2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004760:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800476c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004778:	ee17 2a90 	vmov	r2, s15
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800478c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004798:	ee17 2a90 	vmov	r2, s15
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80047a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80047b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047b8:	ee17 2a90 	vmov	r2, s15
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
 80047d6:	4613      	mov	r3, r2
 80047d8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f103 001c 	add.w	r0, r3, #28
 80047e0:	1cba      	adds	r2, r7, #2
 80047e2:	78f9      	ldrb	r1, [r7, #3]
 80047e4:	2301      	movs	r3, #1
 80047e6:	f000 fa8f 	bl	8004d08 <lsm6dso_write_reg>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295
 80047f4:	e000      	b.n	80047f8 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800480c:	edd7 7a00 	vldr	s15, [r7]
 8004810:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004910 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481c:	d801      	bhi.n	8004822 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800481e:	230b      	movs	r3, #11
 8004820:	e063      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004822:	edd7 7a00 	vldr	s15, [r7]
 8004826:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800482a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	d801      	bhi.n	8004838 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004834:	2301      	movs	r3, #1
 8004836:	e058      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004838:	edd7 7a00 	vldr	s15, [r7]
 800483c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004848:	d801      	bhi.n	800484e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800484a:	2302      	movs	r3, #2
 800484c:	e04d      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800484e:	edd7 7a00 	vldr	s15, [r7]
 8004852:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004914 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485e:	d801      	bhi.n	8004864 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004860:	2303      	movs	r3, #3
 8004862:	e042      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004864:	edd7 7a00 	vldr	s15, [r7]
 8004868:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004918 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 800486c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004874:	d801      	bhi.n	800487a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004876:	2304      	movs	r3, #4
 8004878:	e037      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800487a:	edd7 7a00 	vldr	s15, [r7]
 800487e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800491c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8004882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488a:	d801      	bhi.n	8004890 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 800488c:	2305      	movs	r3, #5
 800488e:	e02c      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8004890:	edd7 7a00 	vldr	s15, [r7]
 8004894:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004920 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8004898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	d801      	bhi.n	80048a6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80048a2:	2306      	movs	r3, #6
 80048a4:	e021      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80048a6:	edd7 7a00 	vldr	s15, [r7]
 80048aa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004924 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80048ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	d801      	bhi.n	80048bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80048b8:	2307      	movs	r3, #7
 80048ba:	e016      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80048bc:	edd7 7a00 	vldr	s15, [r7]
 80048c0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004928 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 80048c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048cc:	d801      	bhi.n	80048d2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80048ce:	2308      	movs	r3, #8
 80048d0:	e00b      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80048d2:	edd7 7a00 	vldr	s15, [r7]
 80048d6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800492c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80048da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e2:	d801      	bhi.n	80048e8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80048e4:	2309      	movs	r3, #9
 80048e6:	e000      	b.n	80048ea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80048e8:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80048ea:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	331c      	adds	r3, #28
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fa7d 	bl	8004df4 <lsm6dso_xl_data_rate_set>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
 8004904:	e000      	b.n	8004908 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	3fcccccd 	.word	0x3fcccccd
 8004914:	42500000 	.word	0x42500000
 8004918:	42d00000 	.word	0x42d00000
 800491c:	43500000 	.word	0x43500000
 8004920:	43d08000 	.word	0x43d08000
 8004924:	44504000 	.word	0x44504000
 8004928:	44d06000 	.word	0x44d06000
 800492c:	45505000 	.word	0x45505000

08004930 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800493c:	edd7 7a00 	vldr	s15, [r7]
 8004940:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004a30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494c:	d801      	bhi.n	8004952 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800494e:	230b      	movs	r3, #11
 8004950:	e063      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004952:	edd7 7a00 	vldr	s15, [r7]
 8004956:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800495a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004962:	d801      	bhi.n	8004968 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004964:	2301      	movs	r3, #1
 8004966:	e058      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004968:	edd7 7a00 	vldr	s15, [r7]
 800496c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	d801      	bhi.n	800497e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800497a:	2302      	movs	r3, #2
 800497c:	e04d      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800497e:	edd7 7a00 	vldr	s15, [r7]
 8004982:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004a34 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8004986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	d801      	bhi.n	8004994 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004990:	2303      	movs	r3, #3
 8004992:	e042      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004994:	edd7 7a00 	vldr	s15, [r7]
 8004998:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004a38 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 800499c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a4:	d801      	bhi.n	80049aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80049a6:	2304      	movs	r3, #4
 80049a8:	e037      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80049aa:	edd7 7a00 	vldr	s15, [r7]
 80049ae:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004a3c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80049b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	d801      	bhi.n	80049c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80049bc:	2305      	movs	r3, #5
 80049be:	e02c      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80049c0:	edd7 7a00 	vldr	s15, [r7]
 80049c4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004a40 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80049c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	d801      	bhi.n	80049d6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80049d2:	2306      	movs	r3, #6
 80049d4:	e021      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80049d6:	edd7 7a00 	vldr	s15, [r7]
 80049da:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004a44 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80049de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e6:	d801      	bhi.n	80049ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80049e8:	2307      	movs	r3, #7
 80049ea:	e016      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80049ec:	edd7 7a00 	vldr	s15, [r7]
 80049f0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004a48 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 80049f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	d801      	bhi.n	8004a02 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80049fe:	2308      	movs	r3, #8
 8004a00:	e00b      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004a02:	edd7 7a00 	vldr	s15, [r7]
 8004a06:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004a4c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8004a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d801      	bhi.n	8004a18 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004a14:	2309      	movs	r3, #9
 8004a16:	e000      	b.n	8004a1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8004a18:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	3fcccccd 	.word	0x3fcccccd
 8004a34:	42500000 	.word	0x42500000
 8004a38:	42d00000 	.word	0x42d00000
 8004a3c:	43500000 	.word	0x43500000
 8004a40:	43d08000 	.word	0x43d08000
 8004a44:	44504000 	.word	0x44504000
 8004a48:	44d06000 	.word	0x44d06000
 8004a4c:	45505000 	.word	0x45505000

08004a50 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004a5c:	edd7 7a00 	vldr	s15, [r7]
 8004a60:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6c:	d801      	bhi.n	8004a72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e058      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a72:	edd7 7a00 	vldr	s15, [r7]
 8004a76:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a82:	d801      	bhi.n	8004a88 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e04d      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a88:	edd7 7a00 	vldr	s15, [r7]
 8004a8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004b4c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a98:	d801      	bhi.n	8004a9e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e042      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004a9e:	edd7 7a00 	vldr	s15, [r7]
 8004aa2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004b50 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aae:	d801      	bhi.n	8004ab4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e037      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ab4:	edd7 7a00 	vldr	s15, [r7]
 8004ab8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b54 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac4:	d801      	bhi.n	8004aca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004ac6:	2305      	movs	r3, #5
 8004ac8:	e02c      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004aca:	edd7 7a00 	vldr	s15, [r7]
 8004ace:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004b58 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ada:	d801      	bhi.n	8004ae0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004adc:	2306      	movs	r3, #6
 8004ade:	e021      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ae0:	edd7 7a00 	vldr	s15, [r7]
 8004ae4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004b5c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af0:	d801      	bhi.n	8004af6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004af2:	2307      	movs	r3, #7
 8004af4:	e016      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004af6:	edd7 7a00 	vldr	s15, [r7]
 8004afa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004b60 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b06:	d801      	bhi.n	8004b0c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	e00b      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b0c:	edd7 7a00 	vldr	s15, [r7]
 8004b10:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b64 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1c:	d801      	bhi.n	8004b22 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004b1e:	2309      	movs	r3, #9
 8004b20:	e000      	b.n	8004b24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b22:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004b24:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	331c      	adds	r3, #28
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fb2c 	bl	800518c <lsm6dso_gy_data_rate_set>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3e:	e000      	b.n	8004b42 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	42500000 	.word	0x42500000
 8004b50:	42d00000 	.word	0x42d00000
 8004b54:	43500000 	.word	0x43500000
 8004b58:	43d08000 	.word	0x43d08000
 8004b5c:	44504000 	.word	0x44504000
 8004b60:	44d06000 	.word	0x44d06000
 8004b64:	45505000 	.word	0x45505000

08004b68 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8004b74:	edd7 7a00 	vldr	s15, [r7]
 8004b78:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b84:	d801      	bhi.n	8004b8a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e058      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b8a:	edd7 7a00 	vldr	s15, [r7]
 8004b8e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	d801      	bhi.n	8004ba0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e04d      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ba0:	edd7 7a00 	vldr	s15, [r7]
 8004ba4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004c50 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	d801      	bhi.n	8004bb6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e042      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004bb6:	edd7 7a00 	vldr	s15, [r7]
 8004bba:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004c54 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc6:	d801      	bhi.n	8004bcc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e037      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004bcc:	edd7 7a00 	vldr	s15, [r7]
 8004bd0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004c58 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	d801      	bhi.n	8004be2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004bde:	2305      	movs	r3, #5
 8004be0:	e02c      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004be2:	edd7 7a00 	vldr	s15, [r7]
 8004be6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004c5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf2:	d801      	bhi.n	8004bf8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	e021      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004bf8:	edd7 7a00 	vldr	s15, [r7]
 8004bfc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004c60 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c08:	d801      	bhi.n	8004c0e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004c0a:	2307      	movs	r3, #7
 8004c0c:	e016      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c0e:	edd7 7a00 	vldr	s15, [r7]
 8004c12:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004c64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1e:	d801      	bhi.n	8004c24 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004c20:	2308      	movs	r3, #8
 8004c22:	e00b      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c24:	edd7 7a00 	vldr	s15, [r7]
 8004c28:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004c68 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c34:	d801      	bhi.n	8004c3a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004c36:	2309      	movs	r3, #9
 8004c38:	e000      	b.n	8004c3c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c3a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	42500000 	.word	0x42500000
 8004c54:	42d00000 	.word	0x42d00000
 8004c58:	43500000 	.word	0x43500000
 8004c5c:	43d08000 	.word	0x43d08000
 8004c60:	44504000 	.word	0x44504000
 8004c64:	44d06000 	.word	0x44d06000
 8004c68:	45505000 	.word	0x45505000

08004c6c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	461a      	mov	r2, r3
 8004c78:	460b      	mov	r3, r1
 8004c7a:	72fb      	strb	r3, [r7, #11]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	695c      	ldr	r4, [r3, #20]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	7b1b      	ldrb	r3, [r3, #12]
 8004c8c:	b298      	uxth	r0, r3
 8004c8e:	7afb      	ldrb	r3, [r7, #11]
 8004c90:	b299      	uxth	r1, r3
 8004c92:	893b      	ldrh	r3, [r7, #8]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	47a0      	blx	r4
 8004c98:	4603      	mov	r3, r0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd90      	pop	{r4, r7, pc}

08004ca2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ca2:	b590      	push	{r4, r7, lr}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	461a      	mov	r2, r3
 8004cae:	460b      	mov	r3, r1
 8004cb0:	72fb      	strb	r3, [r7, #11]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	691c      	ldr	r4, [r3, #16]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	7b1b      	ldrb	r3, [r3, #12]
 8004cc2:	b298      	uxth	r0, r3
 8004cc4:	7afb      	ldrb	r3, [r7, #11]
 8004cc6:	b299      	uxth	r1, r3
 8004cc8:	893b      	ldrh	r3, [r7, #8]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	47a0      	blx	r4
 8004cce:	4603      	mov	r3, r0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}

08004cd8 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	72fb      	strb	r3, [r7, #11]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685c      	ldr	r4, [r3, #4]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6898      	ldr	r0, [r3, #8]
 8004cf4:	893b      	ldrh	r3, [r7, #8]
 8004cf6:	7af9      	ldrb	r1, [r7, #11]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	47a0      	blx	r4
 8004cfc:	6178      	str	r0, [r7, #20]
  return ret;
 8004cfe:	697b      	ldr	r3, [r7, #20]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd90      	pop	{r4, r7, pc}

08004d08 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	461a      	mov	r2, r3
 8004d14:	460b      	mov	r3, r1
 8004d16:	72fb      	strb	r3, [r7, #11]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681c      	ldr	r4, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6898      	ldr	r0, [r3, #8]
 8004d24:	893b      	ldrh	r3, [r7, #8]
 8004d26:	7af9      	ldrb	r1, [r7, #11]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	47a0      	blx	r4
 8004d2c:	6178      	str	r0, [r7, #20]
  return ret;
 8004d2e:	697b      	ldr	r3, [r7, #20]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd90      	pop	{r4, r7, pc}

08004d38 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004d44:	f107 0208 	add.w	r2, r7, #8
 8004d48:	2301      	movs	r3, #1
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ffc3 	bl	8004cd8 <lsm6dso_read_reg>
 8004d52:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	7a3b      	ldrb	r3, [r7, #8]
 8004d64:	f362 0383 	bfi	r3, r2, #2, #2
 8004d68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004d6a:	f107 0208 	add.w	r2, r7, #8
 8004d6e:	2301      	movs	r3, #1
 8004d70:	2110      	movs	r1, #16
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ffc8 	bl	8004d08 <lsm6dso_write_reg>
 8004d78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <lsm6dso_xl_full_scale_get>:
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004d8e:	f107 0208 	add.w	r2, r7, #8
 8004d92:	2301      	movs	r3, #1
 8004d94:	2110      	movs	r1, #16
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ff9e 	bl	8004cd8 <lsm6dso_read_reg>
 8004d9c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl) {
 8004d9e:	7a3b      	ldrb	r3, [r7, #8]
 8004da0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d81a      	bhi.n	8004de0 <lsm6dso_xl_full_scale_get+0x5c>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <lsm6dso_xl_full_scale_get+0x2c>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dc9 	.word	0x08004dc9
 8004db8:	08004dd1 	.word	0x08004dd1
 8004dbc:	08004dd9 	.word	0x08004dd9
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
      break;
 8004dc6:	e00f      	b.n	8004de8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	e00b      	b.n	8004de8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	e007      	b.n	8004de8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	701a      	strb	r2, [r3, #0]
      break;
 8004dde:	e003      	b.n	8004de8 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
      break;
 8004de6:	bf00      	nop
  }

  return ret;
 8004de8:	68fb      	ldr	r3, [r7, #12]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop

08004df4 <lsm6dso_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	75fb      	strb	r3, [r7, #23]
  lsm6dso_emb_fsm_enable_t fsm_enable;
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004e04:	f107 030c 	add.w	r3, r7, #12
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fca1 	bl	8005752 <lsm6dso_fsm_enable_get>
 8004e10:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f040 80c4 	bne.w	8004fa2 <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004e1a:	7b3b      	ldrb	r3, [r7, #12]
 8004e1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e20:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004e22:	7b3b      	ldrb	r3, [r7, #12]
 8004e24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e28:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004e2e:	7b3b      	ldrb	r3, [r7, #12]
 8004e30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e34:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004e36:	4313      	orrs	r3, r2
 8004e38:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004e3a:	7b3b      	ldrb	r3, [r7, #12]
 8004e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e40:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004e42:	4313      	orrs	r3, r2
 8004e44:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004e46:	7b3b      	ldrb	r3, [r7, #12]
 8004e48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e4c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004e52:	7b3b      	ldrb	r3, [r7, #12]
 8004e54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e58:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004e5e:	7b3b      	ldrb	r3, [r7, #12]
 8004e60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e64:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004e6a:	7b3b      	ldrb	r3, [r7, #12]
 8004e6c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e70:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004e72:	4313      	orrs	r3, r2
 8004e74:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004e76:	7b7b      	ldrb	r3, [r7, #13]
 8004e78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e7c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004e82:	7b7b      	ldrb	r3, [r7, #13]
 8004e84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e88:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004e8e:	7b7b      	ldrb	r3, [r7, #13]
 8004e90:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e94:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004e96:	4313      	orrs	r3, r2
 8004e98:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004e9a:	7b7b      	ldrb	r3, [r7, #13]
 8004e9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ea0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004ea6:	7b7b      	ldrb	r3, [r7, #13]
 8004ea8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004eac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004eb2:	7b7b      	ldrb	r3, [r7, #13]
 8004eb4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004eb8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004ebe:	7b7b      	ldrb	r3, [r7, #13]
 8004ec0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ec4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8004eca:	7b7b      	ldrb	r3, [r7, #13]
 8004ecc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ed0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d163      	bne.n	8004fa2 <lsm6dso_xl_data_rate_set+0x1ae>
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004eda:	f107 030b 	add.w	r3, r7, #11
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fc57 	bl	8005794 <lsm6dso_fsm_data_rate_get>
 8004ee6:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d159      	bne.n	8004fa2 <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8004eee:	7afb      	ldrb	r3, [r7, #11]
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d853      	bhi.n	8004f9c <lsm6dso_xl_data_rate_set+0x1a8>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <lsm6dso_xl_data_rate_set+0x108>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f1f 	.word	0x08004f1f
 8004f04:	08004f3d 	.word	0x08004f3d
 8004f08:	08004f67 	.word	0x08004f67
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF) {
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004f16:	e045      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f1c:	e042      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF) {
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004f24:	2302      	movs	r3, #2
 8004f26:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004f28:	e03c      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5) {
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d102      	bne.n	8004f36 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004f30:	2302      	movs	r3, #2
 8004f32:	75fb      	strb	r3, [r7, #23]
            break;
 8004f34:	e036      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	75fb      	strb	r3, [r7, #23]
            break;
 8004f3a:	e033      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF) {
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004f42:	2303      	movs	r3, #3
 8004f44:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004f46:	e02d      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5) {
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d102      	bne.n	8004f54 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	75fb      	strb	r3, [r7, #23]
            break;
 8004f52:	e027      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz) {
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d102      	bne.n	8004f60 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	75fb      	strb	r3, [r7, #23]
            break;
 8004f5e:	e021      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	75fb      	strb	r3, [r7, #23]
            break;
 8004f64:	e01e      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF) {
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004f70:	e018      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5) {
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d102      	bne.n	8004f7e <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004f78:	2304      	movs	r3, #4
 8004f7a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f7c:	e012      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz) {
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d102      	bne.n	8004f8a <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004f84:	2304      	movs	r3, #4
 8004f86:	75fb      	strb	r3, [r7, #23]
            break;
 8004f88:	e00c      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz) {
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d102      	bne.n	8004f96 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004f90:	2304      	movs	r3, #4
 8004f92:	75fb      	strb	r3, [r7, #23]
            break;
 8004f94:	e006      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	75fb      	strb	r3, [r7, #23]
            break;
 8004f9a:	e003      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	75fb      	strb	r3, [r7, #23]
            break;
 8004fa0:	e000      	b.n	8004fa4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8004fa2:	bf00      	nop
    }
  }

  if (ret == 0) {
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004faa:	f107 0208 	add.w	r2, r7, #8
 8004fae:	2301      	movs	r3, #1
 8004fb0:	2110      	movs	r1, #16
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fe90 	bl	8004cd8 <lsm6dso_read_reg>
 8004fb8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	7a3b      	ldrb	r3, [r7, #8]
 8004fca:	f362 1307 	bfi	r3, r2, #4, #4
 8004fce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004fd0:	f107 0208 	add.w	r2, r7, #8
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	2110      	movs	r1, #16
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff fe95 	bl	8004d08 <lsm6dso_write_reg>
 8004fde:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8004fe0:	693b      	ldr	r3, [r7, #16]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop

08004fec <lsm6dso_xl_data_rate_get>:
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004ff6:	f107 0208 	add.w	r2, r7, #8
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	2110      	movs	r1, #16
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fe6a 	bl	8004cd8 <lsm6dso_read_reg>
 8005004:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 8005006:	7a3b      	ldrb	r3, [r7, #8]
 8005008:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b0b      	cmp	r3, #11
 8005010:	d84a      	bhi.n	80050a8 <lsm6dso_xl_data_rate_get+0xbc>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <lsm6dso_xl_data_rate_get+0x2c>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	08005049 	.word	0x08005049
 800501c:	08005051 	.word	0x08005051
 8005020:	08005059 	.word	0x08005059
 8005024:	08005061 	.word	0x08005061
 8005028:	08005069 	.word	0x08005069
 800502c:	08005071 	.word	0x08005071
 8005030:	08005079 	.word	0x08005079
 8005034:	08005081 	.word	0x08005081
 8005038:	08005089 	.word	0x08005089
 800503c:	08005091 	.word	0x08005091
 8005040:	08005099 	.word	0x08005099
 8005044:	080050a1 	.word	0x080050a1
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
      break;
 800504e:	e02f      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
      break;
 8005056:	e02b      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2202      	movs	r2, #2
 800505c:	701a      	strb	r2, [r3, #0]
      break;
 800505e:	e027      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2203      	movs	r2, #3
 8005064:	701a      	strb	r2, [r3, #0]
      break;
 8005066:	e023      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2204      	movs	r2, #4
 800506c:	701a      	strb	r2, [r3, #0]
      break;
 800506e:	e01f      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2205      	movs	r2, #5
 8005074:	701a      	strb	r2, [r3, #0]
      break;
 8005076:	e01b      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2206      	movs	r2, #6
 800507c:	701a      	strb	r2, [r3, #0]
      break;
 800507e:	e017      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2207      	movs	r2, #7
 8005084:	701a      	strb	r2, [r3, #0]
      break;
 8005086:	e013      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2208      	movs	r2, #8
 800508c:	701a      	strb	r2, [r3, #0]
      break;
 800508e:	e00f      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2209      	movs	r2, #9
 8005094:	701a      	strb	r2, [r3, #0]
      break;
 8005096:	e00b      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	220a      	movs	r2, #10
 800509c:	701a      	strb	r2, [r3, #0]
      break;
 800509e:	e007      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	220b      	movs	r2, #11
 80050a4:	701a      	strb	r2, [r3, #0]
      break;
 80050a6:	e003      	b.n	80050b0 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
      break;
 80050ae:	bf00      	nop
  }

  return ret;
 80050b0:	68fb      	ldr	r3, [r7, #12]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop

080050bc <lsm6dso_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80050c8:	f107 0208 	add.w	r2, r7, #8
 80050cc:	2301      	movs	r3, #1
 80050ce:	2111      	movs	r1, #17
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fe01 	bl	8004cd8 <lsm6dso_read_reg>
 80050d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	7a3b      	ldrb	r3, [r7, #8]
 80050e8:	f362 0343 	bfi	r3, r2, #1, #3
 80050ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80050ee:	f107 0208 	add.w	r2, r7, #8
 80050f2:	2301      	movs	r3, #1
 80050f4:	2111      	movs	r1, #17
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fe06 	bl	8004d08 <lsm6dso_write_reg>
 80050fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050fe:	68fb      	ldr	r3, [r7, #12]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <lsm6dso_gy_full_scale_get>:
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005112:	f107 0208 	add.w	r2, r7, #8
 8005116:	2301      	movs	r3, #1
 8005118:	2111      	movs	r1, #17
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fddc 	bl	8004cd8 <lsm6dso_read_reg>
 8005120:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g) {
 8005122:	7a3b      	ldrb	r3, [r7, #8]
 8005124:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b06      	cmp	r3, #6
 800512c:	d824      	bhi.n	8005178 <lsm6dso_gy_full_scale_get+0x70>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <lsm6dso_gy_full_scale_get+0x2c>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005151 	.word	0x08005151
 8005138:	08005159 	.word	0x08005159
 800513c:	08005161 	.word	0x08005161
 8005140:	08005179 	.word	0x08005179
 8005144:	08005169 	.word	0x08005169
 8005148:	08005179 	.word	0x08005179
 800514c:	08005171 	.word	0x08005171
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
      break;
 8005156:	e013      	b.n	8005180 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
      break;
 800515e:	e00f      	b.n	8005180 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2202      	movs	r2, #2
 8005164:	701a      	strb	r2, [r3, #0]
      break;
 8005166:	e00b      	b.n	8005180 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2204      	movs	r2, #4
 800516c:	701a      	strb	r2, [r3, #0]
      break;
 800516e:	e007      	b.n	8005180 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2206      	movs	r2, #6
 8005174:	701a      	strb	r2, [r3, #0]
      break;
 8005176:	e003      	b.n	8005180 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
      break;
 800517e:	bf00      	nop
  }

  return ret;
 8005180:	68fb      	ldr	r3, [r7, #12]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop

0800518c <lsm6dso_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_emb_fsm_enable_t fsm_enable;
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fad5 	bl	8005752 <lsm6dso_fsm_enable_get>
 80051a8:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 80c4 	bne.w	800533a <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80051b2:	7b3b      	ldrb	r3, [r7, #12]
 80051b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80051b8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80051ba:	7b3b      	ldrb	r3, [r7, #12]
 80051bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80051c0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80051c2:	4313      	orrs	r3, r2
 80051c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80051c6:	7b3b      	ldrb	r3, [r7, #12]
 80051c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80051cc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80051ce:	4313      	orrs	r3, r2
 80051d0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80051d2:	7b3b      	ldrb	r3, [r7, #12]
 80051d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80051d8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80051da:	4313      	orrs	r3, r2
 80051dc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80051de:	7b3b      	ldrb	r3, [r7, #12]
 80051e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80051e4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80051e6:	4313      	orrs	r3, r2
 80051e8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80051ea:	7b3b      	ldrb	r3, [r7, #12]
 80051ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80051f0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80051f2:	4313      	orrs	r3, r2
 80051f4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80051f6:	7b3b      	ldrb	r3, [r7, #12]
 80051f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80051fc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80051fe:	4313      	orrs	r3, r2
 8005200:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005202:	7b3b      	ldrb	r3, [r7, #12]
 8005204:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005208:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800520a:	4313      	orrs	r3, r2
 800520c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800520e:	7b7b      	ldrb	r3, [r7, #13]
 8005210:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005214:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005216:	4313      	orrs	r3, r2
 8005218:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800521a:	7b7b      	ldrb	r3, [r7, #13]
 800521c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005220:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005222:	4313      	orrs	r3, r2
 8005224:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005226:	7b7b      	ldrb	r3, [r7, #13]
 8005228:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800522c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800522e:	4313      	orrs	r3, r2
 8005230:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005232:	7b7b      	ldrb	r3, [r7, #13]
 8005234:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005238:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800523a:	4313      	orrs	r3, r2
 800523c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800523e:	7b7b      	ldrb	r3, [r7, #13]
 8005240:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005244:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005246:	4313      	orrs	r3, r2
 8005248:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800524a:	7b7b      	ldrb	r3, [r7, #13]
 800524c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005250:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005252:	4313      	orrs	r3, r2
 8005254:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8005256:	7b7b      	ldrb	r3, [r7, #13]
 8005258:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800525c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800525e:	4313      	orrs	r3, r2
 8005260:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8005262:	7b7b      	ldrb	r3, [r7, #13]
 8005264:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005268:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800526a:	4313      	orrs	r3, r2
 800526c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800526e:	2b01      	cmp	r3, #1
 8005270:	d163      	bne.n	800533a <lsm6dso_gy_data_rate_set+0x1ae>
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8005272:	f107 030b 	add.w	r3, r7, #11
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa8b 	bl	8005794 <lsm6dso_fsm_data_rate_get>
 800527e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d159      	bne.n	800533a <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8005286:	7afb      	ldrb	r3, [r7, #11]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d853      	bhi.n	8005334 <lsm6dso_gy_data_rate_set+0x1a8>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <lsm6dso_gy_data_rate_set+0x108>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052b7 	.word	0x080052b7
 800529c:	080052d5 	.word	0x080052d5
 80052a0:	080052ff 	.word	0x080052ff
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF) {
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80052ae:	e045      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	75fb      	strb	r3, [r7, #23]
            break;
 80052b4:	e042      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF) {
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80052bc:	2302      	movs	r3, #2
 80052be:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80052c0:	e03c      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5) {
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d102      	bne.n	80052ce <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80052c8:	2302      	movs	r3, #2
 80052ca:	75fb      	strb	r3, [r7, #23]
            break;
 80052cc:	e036      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	75fb      	strb	r3, [r7, #23]
            break;
 80052d2:	e033      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF) {
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80052da:	2303      	movs	r3, #3
 80052dc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80052de:	e02d      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5) {
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d102      	bne.n	80052ec <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80052e6:	2303      	movs	r3, #3
 80052e8:	75fb      	strb	r3, [r7, #23]
            break;
 80052ea:	e027      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz) {
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d102      	bne.n	80052f8 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80052f2:	2303      	movs	r3, #3
 80052f4:	75fb      	strb	r3, [r7, #23]
            break;
 80052f6:	e021      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	75fb      	strb	r3, [r7, #23]
            break;
 80052fc:	e01e      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF) {
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005304:	2304      	movs	r3, #4
 8005306:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8005308:	e018      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5) {
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d102      	bne.n	8005316 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005310:	2304      	movs	r3, #4
 8005312:	75fb      	strb	r3, [r7, #23]
            break;
 8005314:	e012      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz) {
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d102      	bne.n	8005322 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800531c:	2304      	movs	r3, #4
 800531e:	75fb      	strb	r3, [r7, #23]
            break;
 8005320:	e00c      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz) {
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d102      	bne.n	800532e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8005328:	2304      	movs	r3, #4
 800532a:	75fb      	strb	r3, [r7, #23]
            break;
 800532c:	e006      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	75fb      	strb	r3, [r7, #23]
            break;
 8005332:	e003      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	75fb      	strb	r3, [r7, #23]
            break;
 8005338:	e000      	b.n	800533c <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800533a:	bf00      	nop
    }
  }

  if (ret == 0) {
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d107      	bne.n	8005352 <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005342:	f107 0208 	add.w	r2, r7, #8
 8005346:	2301      	movs	r3, #1
 8005348:	2111      	movs	r1, #17
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fcc4 	bl	8004cd8 <lsm6dso_read_reg>
 8005350:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0) {
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10f      	bne.n	8005378 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	b2da      	uxtb	r2, r3
 8005360:	7a3b      	ldrb	r3, [r7, #8]
 8005362:	f362 1307 	bfi	r3, r2, #4, #4
 8005366:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8005368:	f107 0208 	add.w	r2, r7, #8
 800536c:	2301      	movs	r3, #1
 800536e:	2111      	movs	r1, #17
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fcc9 	bl	8004d08 <lsm6dso_write_reg>
 8005376:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8005378:	693b      	ldr	r3, [r7, #16]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <lsm6dso_gy_data_rate_get>:
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800538e:	f107 0208 	add.w	r2, r7, #8
 8005392:	2301      	movs	r3, #1
 8005394:	2111      	movs	r1, #17
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff fc9e 	bl	8004cd8 <lsm6dso_read_reg>
 800539c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g) {
 800539e:	7a3b      	ldrb	r3, [r7, #8]
 80053a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b0a      	cmp	r3, #10
 80053a8:	d844      	bhi.n	8005434 <lsm6dso_gy_data_rate_get+0xb0>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <lsm6dso_gy_data_rate_get+0x2c>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	080053dd 	.word	0x080053dd
 80053b4:	080053e5 	.word	0x080053e5
 80053b8:	080053ed 	.word	0x080053ed
 80053bc:	080053f5 	.word	0x080053f5
 80053c0:	080053fd 	.word	0x080053fd
 80053c4:	08005405 	.word	0x08005405
 80053c8:	0800540d 	.word	0x0800540d
 80053cc:	08005415 	.word	0x08005415
 80053d0:	0800541d 	.word	0x0800541d
 80053d4:	08005425 	.word	0x08005425
 80053d8:	0800542d 	.word	0x0800542d
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
      break;
 80053e2:	e02b      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
      break;
 80053ea:	e027      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2202      	movs	r2, #2
 80053f0:	701a      	strb	r2, [r3, #0]
      break;
 80053f2:	e023      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2203      	movs	r2, #3
 80053f8:	701a      	strb	r2, [r3, #0]
      break;
 80053fa:	e01f      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2204      	movs	r2, #4
 8005400:	701a      	strb	r2, [r3, #0]
      break;
 8005402:	e01b      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2205      	movs	r2, #5
 8005408:	701a      	strb	r2, [r3, #0]
      break;
 800540a:	e017      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2206      	movs	r2, #6
 8005410:	701a      	strb	r2, [r3, #0]
      break;
 8005412:	e013      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2207      	movs	r2, #7
 8005418:	701a      	strb	r2, [r3, #0]
      break;
 800541a:	e00f      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2208      	movs	r2, #8
 8005420:	701a      	strb	r2, [r3, #0]
      break;
 8005422:	e00b      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2209      	movs	r2, #9
 8005428:	701a      	strb	r2, [r3, #0]
      break;
 800542a:	e007      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	220a      	movs	r2, #10
 8005430:	701a      	strb	r2, [r3, #0]
      break;
 8005432:	e003      	b.n	800543c <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
      break;
 800543a:	bf00      	nop
  }

  return ret;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop

08005448 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005454:	f107 0208 	add.w	r2, r7, #8
 8005458:	2301      	movs	r3, #1
 800545a:	2112      	movs	r1, #18
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fc3b 	bl	8004cd8 <lsm6dso_read_reg>
 8005462:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	b2da      	uxtb	r2, r3
 8005472:	7a3b      	ldrb	r3, [r7, #8]
 8005474:	f362 1386 	bfi	r3, r2, #6, #1
 8005478:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800547a:	f107 0208 	add.w	r2, r7, #8
 800547e:	2301      	movs	r3, #1
 8005480:	2112      	movs	r1, #18
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fc40 	bl	8004d08 <lsm6dso_write_reg>
 8005488:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800549e:	f107 020c 	add.w	r2, r7, #12
 80054a2:	2306      	movs	r3, #6
 80054a4:	2122      	movs	r1, #34	; 0x22
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fc16 	bl	8004cd8 <lsm6dso_read_reg>
 80054ac:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80054ae:	7b7b      	ldrb	r3, [r7, #13]
 80054b0:	b21a      	sxth	r2, r3
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	7b3b      	ldrb	r3, [r7, #12]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	b21a      	sxth	r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80054d0:	7bfa      	ldrb	r2, [r7, #15]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	3302      	adds	r3, #2
 80054d6:	b212      	sxth	r2, r2
 80054d8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	3302      	adds	r3, #2
 80054de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	3302      	adds	r3, #2
 80054f4:	b212      	sxth	r2, r2
 80054f6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80054f8:	7c7a      	ldrb	r2, [r7, #17]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	3304      	adds	r3, #4
 80054fe:	b212      	sxth	r2, r2
 8005500:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	3304      	adds	r3, #4
 8005506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800550a:	b29b      	uxth	r3, r3
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	b29a      	uxth	r2, r3
 8005510:	7c3b      	ldrb	r3, [r7, #16]
 8005512:	b29b      	uxth	r3, r3
 8005514:	4413      	add	r3, r2
 8005516:	b29a      	uxth	r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	3304      	adds	r3, #4
 800551c:	b212      	sxth	r2, r2
 800551e:	801a      	strh	r2, [r3, #0]
  return ret;
 8005520:	697b      	ldr	r3, [r7, #20]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b086      	sub	sp, #24
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8005534:	f107 020c 	add.w	r2, r7, #12
 8005538:	2306      	movs	r3, #6
 800553a:	2128      	movs	r1, #40	; 0x28
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff fbcb 	bl	8004cd8 <lsm6dso_read_reg>
 8005542:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005544:	7b7b      	ldrb	r3, [r7, #13]
 8005546:	b21a      	sxth	r2, r3
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005552:	b29b      	uxth	r3, r3
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	b29a      	uxth	r2, r3
 8005558:	7b3b      	ldrb	r3, [r7, #12]
 800555a:	b29b      	uxth	r3, r3
 800555c:	4413      	add	r3, r2
 800555e:	b29b      	uxth	r3, r3
 8005560:	b21a      	sxth	r2, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005566:	7bfa      	ldrb	r2, [r7, #15]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	3302      	adds	r3, #2
 800556c:	b212      	sxth	r2, r2
 800556e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	3302      	adds	r3, #2
 8005574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005578:	b29b      	uxth	r3, r3
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	b29a      	uxth	r2, r3
 800557e:	7bbb      	ldrb	r3, [r7, #14]
 8005580:	b29b      	uxth	r3, r3
 8005582:	4413      	add	r3, r2
 8005584:	b29a      	uxth	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	3302      	adds	r3, #2
 800558a:	b212      	sxth	r2, r2
 800558c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800558e:	7c7a      	ldrb	r2, [r7, #17]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	3304      	adds	r3, #4
 8005594:	b212      	sxth	r2, r2
 8005596:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	3304      	adds	r3, #4
 800559c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	7c3b      	ldrb	r3, [r7, #16]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	3304      	adds	r3, #4
 80055b2:	b212      	sxth	r2, r2
 80055b4:	801a      	strh	r2, [r3, #0]
  return ret;
 80055b6:	697b      	ldr	r3, [r7, #20]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <lsm6dso_mem_bank_set>:
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg,
 80055cc:	f107 0208 	add.w	r2, r7, #8
 80055d0:	2301      	movs	r3, #1
 80055d2:	2101      	movs	r1, #1
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff fb7f 	bl	8004cd8 <lsm6dso_read_reg>
 80055da:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	7a3b      	ldrb	r3, [r7, #8]
 80055ec:	f362 1387 	bfi	r3, r2, #6, #2
 80055f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg,
 80055f2:	f107 0208 	add.w	r2, r7, #8
 80055f6:	2301      	movs	r3, #1
 80055f8:	2101      	movs	r1, #1
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fb84 	bl	8004d08 <lsm6dso_write_reg>
 8005600:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8005616:	2301      	movs	r3, #1
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	210f      	movs	r1, #15
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff fb5b 	bl	8004cd8 <lsm6dso_read_reg>
 8005622:	60f8      	str	r0, [r7, #12]
  return ret;
 8005624:	68fb      	ldr	r3, [r7, #12]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800563a:	f107 0208 	add.w	r2, r7, #8
 800563e:	2301      	movs	r3, #1
 8005640:	2112      	movs	r1, #18
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fb48 	bl	8004cd8 <lsm6dso_read_reg>
 8005648:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10f      	bne.n	8005670 <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	b2da      	uxtb	r2, r3
 8005658:	7a3b      	ldrb	r3, [r7, #8]
 800565a:	f362 0382 	bfi	r3, r2, #2, #1
 800565e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8005660:	f107 0208 	add.w	r2, r7, #8
 8005664:	2301      	movs	r3, #1
 8005666:	2112      	movs	r1, #18
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fb4d 	bl	8004d08 <lsm6dso_write_reg>
 800566e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005670:	68fb      	ldr	r3, [r7, #12]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <lsm6dso_i3c_disable_set>:
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	460b      	mov	r3, r1
 8005684:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 8005686:	f107 020c 	add.w	r2, r7, #12
 800568a:	2301      	movs	r3, #1
 800568c:	2118      	movs	r1, #24
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff fb22 	bl	8004cd8 <lsm6dso_read_reg>
 8005694:	6178      	str	r0, [r7, #20]
                         1);

  if (ret == 0) {
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d111      	bne.n	80056c0 <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	09db      	lsrs	r3, r3, #7
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	7b3b      	ldrb	r3, [r7, #12]
 80056aa:	f362 0341 	bfi	r3, r2, #1, #1
 80056ae:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 80056b0:	f107 020c 	add.w	r2, r7, #12
 80056b4:	2301      	movs	r3, #1
 80056b6:	2118      	movs	r1, #24
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fb25 	bl	8004d08 <lsm6dso_write_reg>
 80056be:	6178      	str	r0, [r7, #20]
                            1);
  }

  if (ret == 0) {
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <lsm6dso_i3c_disable_set+0x5c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80056c6:	f107 0210 	add.w	r2, r7, #16
 80056ca:	2301      	movs	r3, #1
 80056cc:	2162      	movs	r1, #98	; 0x62
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff fb02 	bl	8004cd8 <lsm6dso_read_reg>
 80056d4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	7c3b      	ldrb	r3, [r7, #16]
 80056e6:	f362 03c4 	bfi	r3, r2, #3, #2
 80056ea:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80056ec:	f107 0210 	add.w	r2, r7, #16
 80056f0:	2301      	movs	r3, #1
 80056f2:	2162      	movs	r1, #98	; 0x62
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fb07 	bl	8004d08 <lsm6dso_write_reg>
 80056fa:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80056fc:	697b      	ldr	r3, [r7, #20]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <lsm6dso_fifo_mode_set>:
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005712:	f107 0208 	add.w	r2, r7, #8
 8005716:	2301      	movs	r3, #1
 8005718:	210a      	movs	r1, #10
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fadc 	bl	8004cd8 <lsm6dso_read_reg>
 8005720:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10f      	bne.n	8005748 <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	b2da      	uxtb	r2, r3
 8005730:	7a3b      	ldrb	r3, [r7, #8]
 8005732:	f362 0302 	bfi	r3, r2, #0, #3
 8005736:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8005738:	f107 0208 	add.w	r2, r7, #8
 800573c:	2301      	movs	r3, #1
 800573e:	210a      	movs	r1, #10
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff fae1 	bl	8004d08 <lsm6dso_write_reg>
 8005746:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005748:	68fb      	ldr	r3, [r7, #12]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800575c:	2102      	movs	r1, #2
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff ff2e 	bl	80055c0 <lsm6dso_mem_bank_set>
 8005764:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800576c:	2302      	movs	r3, #2
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	2146      	movs	r1, #70	; 0x46
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff fab0 	bl	8004cd8 <lsm6dso_read_reg>
 8005778:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005780:	2100      	movs	r1, #0
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ff1c 	bl	80055c0 <lsm6dso_mem_bank_set>
 8005788:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800578a:	68fb      	ldr	r3, [r7, #12]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <lsm6dso_fsm_data_rate_get>:
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800579e:	2102      	movs	r1, #2
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff ff0d 	bl	80055c0 <lsm6dso_mem_bank_set>
 80057a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d107      	bne.n	80057be <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80057ae:	f107 0208 	add.w	r2, r7, #8
 80057b2:	2301      	movs	r3, #1
 80057b4:	215f      	movs	r1, #95	; 0x5f
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fa8e 	bl	8004cd8 <lsm6dso_read_reg>
 80057bc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d12a      	bne.n	800581a <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 80057c4:	7a3b      	ldrb	r3, [r7, #8]
 80057c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d81b      	bhi.n	8005808 <lsm6dso_fsm_data_rate_get+0x74>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <lsm6dso_fsm_data_rate_get+0x44>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	080057e9 	.word	0x080057e9
 80057dc:	080057f1 	.word	0x080057f1
 80057e0:	080057f9 	.word	0x080057f9
 80057e4:	08005801 	.word	0x08005801
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
        break;
 80057ee:	e00f      	b.n	8005810 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
        break;
 80057f6:	e00b      	b.n	8005810 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2202      	movs	r2, #2
 80057fc:	701a      	strb	r2, [r3, #0]
        break;
 80057fe:	e007      	b.n	8005810 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2203      	movs	r2, #3
 8005804:	701a      	strb	r2, [r3, #0]
        break;
 8005806:	e003      	b.n	8005810 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
        break;
 800580e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005810:	2100      	movs	r1, #0
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fed4 	bl	80055c0 <lsm6dso_mem_bank_set>
 8005818:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800581a:	68fb      	ldr	r3, [r7, #12]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08e      	sub	sp, #56	; 0x38
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800582e:	2300      	movs	r3, #0
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005832:	2301      	movs	r3, #1
 8005834:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d06e      	beq.n	800591e <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b02      	cmp	r3, #2
 8005844:	f200 809d 	bhi.w	8005982 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <IKS01A3_MOTION_SENSOR_Init+0x32>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d032      	beq.n	80058ba <IKS01A3_MOTION_SENSOR_Init+0x96>
 8005854:	e095      	b.n	8005982 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8005856:	6838      	ldr	r0, [r7, #0]
 8005858:	f000 f966 	bl	8005b28 <LSM6DSO_0_Probe>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
 8005866:	e0cc      	b.n	8005a02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005868:	4a68      	ldr	r2, [pc, #416]	; (8005a0c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	4967      	ldr	r1, [pc, #412]	; (8005a10 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800587a:	f107 010c 	add.w	r1, r7, #12
 800587e:	4610      	mov	r0, r2
 8005880:	4798      	blx	r3
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005888:	f06f 0306 	mvn.w	r3, #6
 800588c:	e0b9      	b.n	8005a02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800588e:	7b3b      	ldrb	r3, [r7, #12]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d103      	bne.n	800589c <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	f043 0302 	orr.w	r3, r3, #2
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800589c:	7b7b      	ldrb	r3, [r7, #13]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d103      	bne.n	80058aa <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80058aa:	7bbb      	ldrb	r3, [r7, #14]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d16c      	bne.n	800598a <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	f043 0304 	orr.w	r3, r3, #4
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80058b8:	e067      	b.n	800598a <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 80058ba:	6838      	ldr	r0, [r7, #0]
 80058bc:	f000 f9f0 	bl	8005ca0 <LIS2DW12_0_Probe>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ca:	e09a      	b.n	8005a02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80058cc:	4a4f      	ldr	r2, [pc, #316]	; (8005a0c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	494e      	ldr	r1, [pc, #312]	; (8005a10 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058de:	f107 010c 	add.w	r1, r7, #12
 80058e2:	4610      	mov	r0, r2
 80058e4:	4798      	blx	r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80058ec:	f06f 0306 	mvn.w	r3, #6
 80058f0:	e087      	b.n	8005a02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80058f2:	7b3b      	ldrb	r3, [r7, #12]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d103      	bne.n	8005900 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	f043 0302 	orr.w	r3, r3, #2
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005900:	7b7b      	ldrb	r3, [r7, #13]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d103      	bne.n	800590e <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d13c      	bne.n	800598e <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	f043 0304 	orr.w	r3, r3, #4
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800591c:	e037      	b.n	800598e <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800591e:	6838      	ldr	r0, [r7, #0]
 8005920:	f000 fa62 	bl	8005de8 <LIS2MDL_0_Probe>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800592a:	f04f 33ff 	mov.w	r3, #4294967295
 800592e:	e068      	b.n	8005a02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005930:	4a36      	ldr	r2, [pc, #216]	; (8005a0c <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	4935      	ldr	r1, [pc, #212]	; (8005a10 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005942:	f107 010c 	add.w	r1, r7, #12
 8005946:	4610      	mov	r0, r2
 8005948:	4798      	blx	r3
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005950:	f06f 0306 	mvn.w	r3, #6
 8005954:	e055      	b.n	8005a02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005956:	7b3b      	ldrb	r3, [r7, #12]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d103      	bne.n	8005964 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f043 0302 	orr.w	r3, r3, #2
 8005962:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005964:	7b7b      	ldrb	r3, [r7, #13]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d103      	bne.n	8005972 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005972:	7bbb      	ldrb	r3, [r7, #14]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d10c      	bne.n	8005992 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	f043 0304 	orr.w	r3, r3, #4
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005980:	e007      	b.n	8005992 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005982:	f06f 0301 	mvn.w	r3, #1
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005988:	e004      	b.n	8005994 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800598a:	bf00      	nop
 800598c:	e002      	b.n	8005994 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8005992:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	e031      	b.n	8005a02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800599e:	2300      	movs	r3, #0
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a2:	e02a      	b.n	80059fa <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	4013      	ands	r3, r2
 80059aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d11e      	bne.n	80059ee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80059b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	4013      	ands	r3, r2
 80059b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d118      	bne.n	80059ee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80059bc:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059c4:	4814      	ldr	r0, [pc, #80]	; (8005a18 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	4413      	add	r3, r2
 80059ce:	440b      	add	r3, r1
 80059d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	490e      	ldr	r1, [pc, #56]	; (8005a10 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059de:	4610      	mov	r0, r2
 80059e0:	4798      	blx	r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80059e8:	f06f 0304 	mvn.w	r3, #4
 80059ec:	e009      	b.n	8005a02 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	3301      	adds	r3, #1
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d9d1      	bls.n	80059a4 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3738      	adds	r7, #56	; 0x38
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	200002e0 	.word	0x200002e0
 8005a10:	20000488 	.word	0x20000488
 8005a14:	200000c8 	.word	0x200000c8
 8005a18:	200002bc 	.word	0x200002bc

08005a1c <IKS01A3_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d903      	bls.n	8005a34 <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a2c:	f06f 0301 	mvn.w	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	e028      	b.n	8005a86 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005a34:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d11c      	bne.n	8005a80 <IKS01A3_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005a46:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a4e:	4812      	ldr	r0, [pc, #72]	; (8005a98 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4413      	add	r3, r2
 8005a58:	440b      	add	r3, r1
 8005a5a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	490e      	ldr	r1, [pc, #56]	; (8005a9c <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <IKS01A3_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a72:	f06f 0304 	mvn.w	r3, #4
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e005      	b.n	8005a86 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e002      	b.n	8005a86 <IKS01A3_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005a80:	f06f 0301 	mvn.w	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005a86:	68fb      	ldr	r3, [r7, #12]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	200002ec 	.word	0x200002ec
 8005a94:	200000c8 	.word	0x200000c8
 8005a98:	200002bc 	.word	0x200002bc
 8005a9c:	20000488 	.word	0x20000488

08005aa0 <IKS01A3_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d903      	bls.n	8005aba <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ab2:	f06f 0301 	mvn.w	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e029      	b.n	8005b0e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d11d      	bne.n	8005b08 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005acc:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ad4:	4812      	ldr	r0, [pc, #72]	; (8005b20 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	440b      	add	r3, r1
 8005ae0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	490f      	ldr	r1, [pc, #60]	; (8005b24 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005afa:	f06f 0304 	mvn.w	r3, #4
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e005      	b.n	8005b0e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e002      	b.n	8005b0e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005b08:	f06f 0301 	mvn.w	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005b0e:	697b      	ldr	r3, [r7, #20]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	200002ec 	.word	0x200002ec
 8005b1c:	200000c8 	.word	0x200000c8
 8005b20:	200002bc 	.word	0x200002bc
 8005b24:	20000488 	.word	0x20000488

08005b28 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b092      	sub	sp, #72	; 0x48
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8005b34:	2300      	movs	r3, #0
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8005b38:	23d7      	movs	r3, #215	; 0xd7
 8005b3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005b3e:	4b4a      	ldr	r3, [pc, #296]	; (8005c68 <LSM6DSO_0_Probe+0x140>)
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <LSM6DSO_0_Probe+0x144>)
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005b46:	4b4a      	ldr	r3, [pc, #296]	; (8005c70 <LSM6DSO_0_Probe+0x148>)
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005b4a:	4b4a      	ldr	r3, [pc, #296]	; (8005c74 <LSM6DSO_0_Probe+0x14c>)
 8005b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005b4e:	4b4a      	ldr	r3, [pc, #296]	; (8005c78 <LSM6DSO_0_Probe+0x150>)
 8005b50:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8005b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b56:	4619      	mov	r1, r3
 8005b58:	4848      	ldr	r0, [pc, #288]	; (8005c7c <LSM6DSO_0_Probe+0x154>)
 8005b5a:	f7fd fe87 	bl	800386c <LSM6DSO_RegisterBusIO>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b64:	f06f 0306 	mvn.w	r3, #6
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6a:	e077      	b.n	8005c5c <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8005b6c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005b70:	4619      	mov	r1, r3
 8005b72:	4842      	ldr	r0, [pc, #264]	; (8005c7c <LSM6DSO_0_Probe+0x154>)
 8005b74:	f7fd ff7c 	bl	8003a70 <LSM6DSO_ReadID>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b7e:	f06f 0306 	mvn.w	r3, #6
 8005b82:	647b      	str	r3, [r7, #68]	; 0x44
 8005b84:	e06a      	b.n	8005c5c <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8005b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b8a:	2b6c      	cmp	r3, #108	; 0x6c
 8005b8c:	d003      	beq.n	8005b96 <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b8e:	f06f 0306 	mvn.w	r3, #6
 8005b92:	647b      	str	r3, [r7, #68]	; 0x44
 8005b94:	e062      	b.n	8005c5c <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8005b96:	f107 0308 	add.w	r3, r7, #8
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4837      	ldr	r0, [pc, #220]	; (8005c7c <LSM6DSO_0_Probe+0x154>)
 8005b9e:	f7fd ff7d 	bl	8003a9c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005ba2:	7a7b      	ldrb	r3, [r7, #9]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	7a3b      	ldrb	r3, [r7, #8]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	431a      	orrs	r2, r3
 8005bac:	7abb      	ldrb	r3, [r7, #10]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	4a33      	ldr	r2, [pc, #204]	; (8005c80 <LSM6DSO_0_Probe+0x158>)
 8005bb4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8005bb6:	4b33      	ldr	r3, [pc, #204]	; (8005c84 <LSM6DSO_0_Probe+0x15c>)
 8005bb8:	4a30      	ldr	r2, [pc, #192]	; (8005c7c <LSM6DSO_0_Probe+0x154>)
 8005bba:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8005bbc:	4b32      	ldr	r3, [pc, #200]	; (8005c88 <LSM6DSO_0_Probe+0x160>)
 8005bbe:	4a33      	ldr	r2, [pc, #204]	; (8005c8c <LSM6DSO_0_Probe+0x164>)
 8005bc0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11d      	bne.n	8005c04 <LSM6DSO_0_Probe+0xdc>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d018      	beq.n	8005c04 <LSM6DSO_0_Probe+0xdc>
 8005bd2:	7a7b      	ldrb	r3, [r7, #9]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d115      	bne.n	8005c04 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8005bd8:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <LSM6DSO_0_Probe+0x168>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	4a2d      	ldr	r2, [pc, #180]	; (8005c94 <LSM6DSO_0_Probe+0x16c>)
 8005bde:	492e      	ldr	r1, [pc, #184]	; (8005c98 <LSM6DSO_0_Probe+0x170>)
 8005be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005be4:	4b28      	ldr	r3, [pc, #160]	; (8005c88 <LSM6DSO_0_Probe+0x160>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <LSM6DSO_0_Probe+0x15c>)
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4798      	blx	r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005bf8:	f06f 0304 	mvn.w	r3, #4
 8005bfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bfe:	e001      	b.n	8005c04 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c00:	2300      	movs	r3, #0
 8005c02:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11d      	bne.n	8005c46 <LSM6DSO_0_Probe+0x11e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d018      	beq.n	8005c46 <LSM6DSO_0_Probe+0x11e>
 8005c14:	7a3b      	ldrb	r3, [r7, #8]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d115      	bne.n	8005c46 <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <LSM6DSO_0_Probe+0x168>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <LSM6DSO_0_Probe+0x16c>)
 8005c20:	491e      	ldr	r1, [pc, #120]	; (8005c9c <LSM6DSO_0_Probe+0x174>)
 8005c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8005c26:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <LSM6DSO_0_Probe+0x160>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <LSM6DSO_0_Probe+0x15c>)
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c3a:	f06f 0304 	mvn.w	r3, #4
 8005c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c40:	e001      	b.n	8005c46 <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d107      	bne.n	8005c5c <LSM6DSO_0_Probe+0x134>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c56:	f06f 0304 	mvn.w	r3, #4
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3748      	adds	r7, #72	; 0x48
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	08000e25 	.word	0x08000e25
 8005c6c:	08000e89 	.word	0x08000e89
 8005c70:	08000f3d 	.word	0x08000f3d
 8005c74:	08000ed9 	.word	0x08000ed9
 8005c78:	08000fa1 	.word	0x08000fa1
 8005c7c:	200002f8 	.word	0x200002f8
 8005c80:	200002ec 	.word	0x200002ec
 8005c84:	20000488 	.word	0x20000488
 8005c88:	200002e0 	.word	0x200002e0
 8005c8c:	20000070 	.word	0x20000070
 8005c90:	200000c8 	.word	0x200000c8
 8005c94:	200002bc 	.word	0x200002bc
 8005c98:	200000a4 	.word	0x200000a4
 8005c9c:	20000080 	.word	0x20000080

08005ca0 <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b092      	sub	sp, #72	; 0x48
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8005cac:	2300      	movs	r3, #0
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8005cb0:	2333      	movs	r3, #51	; 0x33
 8005cb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005cb6:	4b3f      	ldr	r3, [pc, #252]	; (8005db4 <LIS2DW12_0_Probe+0x114>)
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005cba:	4b3f      	ldr	r3, [pc, #252]	; (8005db8 <LIS2DW12_0_Probe+0x118>)
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005cbe:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <LIS2DW12_0_Probe+0x11c>)
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005cc2:	4b3f      	ldr	r3, [pc, #252]	; (8005dc0 <LIS2DW12_0_Probe+0x120>)
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005cc6:	4b3f      	ldr	r3, [pc, #252]	; (8005dc4 <LIS2DW12_0_Probe+0x124>)
 8005cc8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8005cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cce:	4619      	mov	r1, r3
 8005cd0:	483d      	ldr	r0, [pc, #244]	; (8005dc8 <LIS2DW12_0_Probe+0x128>)
 8005cd2:	f7fb fa79 	bl	80011c8 <LIS2DW12_RegisterBusIO>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <LIS2DW12_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cdc:	f06f 0306 	mvn.w	r3, #6
 8005ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce2:	e062      	b.n	8005daa <LIS2DW12_0_Probe+0x10a>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8005ce4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4837      	ldr	r0, [pc, #220]	; (8005dc8 <LIS2DW12_0_Probe+0x128>)
 8005cec:	f7fb fb56 	bl	800139c <LIS2DW12_ReadID>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <LIS2DW12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cf6:	f06f 0306 	mvn.w	r3, #6
 8005cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfc:	e055      	b.n	8005daa <LIS2DW12_0_Probe+0x10a>
  }
  else if (id != LIS2DW12_ID)
 8005cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d02:	2b44      	cmp	r3, #68	; 0x44
 8005d04:	d003      	beq.n	8005d0e <LIS2DW12_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d06:	f06f 0306 	mvn.w	r3, #6
 8005d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d0c:	e04d      	b.n	8005daa <LIS2DW12_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8005d0e:	f107 0308 	add.w	r3, r7, #8
 8005d12:	4619      	mov	r1, r3
 8005d14:	482c      	ldr	r0, [pc, #176]	; (8005dc8 <LIS2DW12_0_Probe+0x128>)
 8005d16:	f7fb fb57 	bl	80013c8 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005d1a:	7a7b      	ldrb	r3, [r7, #9]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	7a3b      	ldrb	r3, [r7, #8]
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	431a      	orrs	r2, r3
 8005d24:	7abb      	ldrb	r3, [r7, #10]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	4a28      	ldr	r2, [pc, #160]	; (8005dcc <LIS2DW12_0_Probe+0x12c>)
 8005d2c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8005d2e:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <LIS2DW12_0_Probe+0x130>)
 8005d30:	4a25      	ldr	r2, [pc, #148]	; (8005dc8 <LIS2DW12_0_Probe+0x128>)
 8005d32:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8005d34:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <LIS2DW12_0_Probe+0x134>)
 8005d36:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <LIS2DW12_0_Probe+0x138>)
 8005d38:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11e      	bne.n	8005d7e <LIS2DW12_0_Probe+0xde>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d019      	beq.n	8005d7e <LIS2DW12_0_Probe+0xde>
 8005d4a:	7a3b      	ldrb	r3, [r7, #8]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d116      	bne.n	8005d7e <LIS2DW12_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005d50:	4b22      	ldr	r3, [pc, #136]	; (8005ddc <LIS2DW12_0_Probe+0x13c>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <LIS2DW12_0_Probe+0x140>)
 8005d56:	3303      	adds	r3, #3
 8005d58:	4922      	ldr	r1, [pc, #136]	; (8005de4 <LIS2DW12_0_Probe+0x144>)
 8005d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8005d5e:	4b1d      	ldr	r3, [pc, #116]	; (8005dd4 <LIS2DW12_0_Probe+0x134>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1a      	ldr	r2, [pc, #104]	; (8005dd0 <LIS2DW12_0_Probe+0x130>)
 8005d66:	6852      	ldr	r2, [r2, #4]
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <LIS2DW12_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d72:	f06f 0304 	mvn.w	r3, #4
 8005d76:	647b      	str	r3, [r7, #68]	; 0x44
 8005d78:	e001      	b.n	8005d7e <LIS2DW12_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d107      	bne.n	8005d94 <LIS2DW12_0_Probe+0xf4>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <LIS2DW12_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d8e:	f06f 0304 	mvn.w	r3, #4
 8005d92:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d107      	bne.n	8005daa <LIS2DW12_0_Probe+0x10a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <LIS2DW12_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005da4:	f06f 0304 	mvn.w	r3, #4
 8005da8:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3748      	adds	r7, #72	; 0x48
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	08000e25 	.word	0x08000e25
 8005db8:	08000e89 	.word	0x08000e89
 8005dbc:	08000f3d 	.word	0x08000f3d
 8005dc0:	08000ed9 	.word	0x08000ed9
 8005dc4:	08000fa1 	.word	0x08000fa1
 8005dc8:	20000328 	.word	0x20000328
 8005dcc:	200002ec 	.word	0x200002ec
 8005dd0:	20000488 	.word	0x20000488
 8005dd4:	200002e0 	.word	0x200002e0
 8005dd8:	20000008 	.word	0x20000008
 8005ddc:	200000c8 	.word	0x200000c8
 8005de0:	200002bc 	.word	0x200002bc
 8005de4:	20000018 	.word	0x20000018

08005de8 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b092      	sub	sp, #72	; 0x48
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8005df4:	2300      	movs	r3, #0
 8005df6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8005df8:	233d      	movs	r3, #61	; 0x3d
 8005dfa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A3_I2C_Init;
 8005dfe:	4b3f      	ldr	r3, [pc, #252]	; (8005efc <LIS2MDL_0_Probe+0x114>)
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8005e02:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <LIS2MDL_0_Probe+0x118>)
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8005e06:	4b3f      	ldr	r3, [pc, #252]	; (8005f04 <LIS2MDL_0_Probe+0x11c>)
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8005e0a:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <LIS2MDL_0_Probe+0x120>)
 8005e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A3_GetTick;
 8005e0e:	4b3f      	ldr	r3, [pc, #252]	; (8005f0c <LIS2MDL_0_Probe+0x124>)
 8005e10:	643b      	str	r3, [r7, #64]	; 0x40

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8005e12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e16:	4619      	mov	r1, r3
 8005e18:	483d      	ldr	r0, [pc, #244]	; (8005f10 <LIS2MDL_0_Probe+0x128>)
 8005e1a:	f7fc fd25 	bl	8002868 <LIS2MDL_RegisterBusIO>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <LIS2MDL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e24:	f06f 0306 	mvn.w	r3, #6
 8005e28:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2a:	e062      	b.n	8005ef2 <LIS2MDL_0_Probe+0x10a>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8005e2c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005e30:	4619      	mov	r1, r3
 8005e32:	4837      	ldr	r0, [pc, #220]	; (8005f10 <LIS2MDL_0_Probe+0x128>)
 8005e34:	f7fc fe30 	bl	8002a98 <LIS2MDL_ReadID>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <LIS2MDL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e3e:	f06f 0306 	mvn.w	r3, #6
 8005e42:	647b      	str	r3, [r7, #68]	; 0x44
 8005e44:	e055      	b.n	8005ef2 <LIS2MDL_0_Probe+0x10a>
  }
  else if (id != LIS2MDL_ID)
 8005e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d003      	beq.n	8005e56 <LIS2MDL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e4e:	f06f 0306 	mvn.w	r3, #6
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
 8005e54:	e04d      	b.n	8005ef2 <LIS2MDL_0_Probe+0x10a>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	482c      	ldr	r0, [pc, #176]	; (8005f10 <LIS2MDL_0_Probe+0x128>)
 8005e5e:	f7fc fe41 	bl	8002ae4 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005e62:	7a7b      	ldrb	r3, [r7, #9]
 8005e64:	461a      	mov	r2, r3
 8005e66:	7a3b      	ldrb	r3, [r7, #8]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	7abb      	ldrb	r3, [r7, #10]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4313      	orrs	r3, r2
 8005e72:	4a28      	ldr	r2, [pc, #160]	; (8005f14 <LIS2MDL_0_Probe+0x12c>)
 8005e74:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8005e76:	4b28      	ldr	r3, [pc, #160]	; (8005f18 <LIS2MDL_0_Probe+0x130>)
 8005e78:	4a25      	ldr	r2, [pc, #148]	; (8005f10 <LIS2MDL_0_Probe+0x128>)
 8005e7a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8005e7c:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <LIS2MDL_0_Probe+0x134>)
 8005e7e:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <LIS2MDL_0_Probe+0x138>)
 8005e80:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11e      	bne.n	8005ec6 <LIS2MDL_0_Probe+0xde>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d019      	beq.n	8005ec6 <LIS2MDL_0_Probe+0xde>
 8005e92:	7abb      	ldrb	r3, [r7, #10]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d116      	bne.n	8005ec6 <LIS2MDL_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005e98:	4b22      	ldr	r3, [pc, #136]	; (8005f24 <LIS2MDL_0_Probe+0x13c>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	4a22      	ldr	r2, [pc, #136]	; (8005f28 <LIS2MDL_0_Probe+0x140>)
 8005e9e:	3306      	adds	r3, #6
 8005ea0:	4922      	ldr	r1, [pc, #136]	; (8005f2c <LIS2MDL_0_Probe+0x144>)
 8005ea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <LIS2MDL_0_Probe+0x134>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <LIS2MDL_0_Probe+0x130>)
 8005eae:	6892      	ldr	r2, [r2, #8]
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	4798      	blx	r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <LIS2MDL_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eba:	f06f 0304 	mvn.w	r3, #4
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec0:	e001      	b.n	8005ec6 <LIS2MDL_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d107      	bne.n	8005edc <LIS2MDL_0_Probe+0xf4>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <LIS2MDL_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ed6:	f06f 0304 	mvn.w	r3, #4
 8005eda:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d107      	bne.n	8005ef2 <LIS2MDL_0_Probe+0x10a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <LIS2MDL_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eec:	f06f 0304 	mvn.w	r3, #4
 8005ef0:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3748      	adds	r7, #72	; 0x48
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	08000e25 	.word	0x08000e25
 8005f00:	08000e89 	.word	0x08000e89
 8005f04:	08000f3d 	.word	0x08000f3d
 8005f08:	08000ed9 	.word	0x08000ed9
 8005f0c:	08000fa1 	.word	0x08000fa1
 8005f10:	2000035c 	.word	0x2000035c
 8005f14:	200002ec 	.word	0x200002ec
 8005f18:	20000488 	.word	0x20000488
 8005f1c:	200002e0 	.word	0x200002e0
 8005f20:	2000003c 	.word	0x2000003c
 8005f24:	200000c8 	.word	0x200000c8
 8005f28:	200002bc 	.word	0x200002bc
 8005f2c:	2000004c 	.word	0x2000004c

08005f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <HAL_Init+0x40>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a0d      	ldr	r2, [pc, #52]	; (8005f70 <HAL_Init+0x40>)
 8005f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f40:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <HAL_Init+0x40>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <HAL_Init+0x40>)
 8005f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f4c:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <HAL_Init+0x40>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a07      	ldr	r2, [pc, #28]	; (8005f70 <HAL_Init+0x40>)
 8005f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f58:	2003      	movs	r0, #3
 8005f5a:	f000 f92b 	bl	80061b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f000 f808 	bl	8005f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f64:	f7fa fe8a 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40023c00 	.word	0x40023c00

08005f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f7c:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <HAL_InitTick+0x54>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_InitTick+0x58>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	4619      	mov	r1, r3
 8005f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f943 	bl	800621e <HAL_SYSTICK_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e00e      	b.n	8005fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b0f      	cmp	r3, #15
 8005fa6:	d80a      	bhi.n	8005fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fa8:	2200      	movs	r2, #0
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	f000 f90b 	bl	80061ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fb4:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <HAL_InitTick+0x5c>)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e000      	b.n	8005fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000004 	.word	0x20000004
 8005fcc:	200000e0 	.word	0x200000e0
 8005fd0:	200000dc 	.word	0x200000dc

08005fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <HAL_IncTick+0x20>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <HAL_IncTick+0x24>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	4a04      	ldr	r2, [pc, #16]	; (8005ff8 <HAL_IncTick+0x24>)
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	200000e0 	.word	0x200000e0
 8005ff8:	20000494 	.word	0x20000494

08005ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8006000:	4b03      	ldr	r3, [pc, #12]	; (8006010 <HAL_GetTick+0x14>)
 8006002:	681b      	ldr	r3, [r3, #0]
}
 8006004:	4618      	mov	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000494 	.word	0x20000494

08006014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <__NVIC_SetPriorityGrouping+0x44>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006030:	4013      	ands	r3, r2
 8006032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800603c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006046:	4a04      	ldr	r2, [pc, #16]	; (8006058 <__NVIC_SetPriorityGrouping+0x44>)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	60d3      	str	r3, [r2, #12]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000ed00 	.word	0xe000ed00

0800605c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006060:	4b04      	ldr	r3, [pc, #16]	; (8006074 <__NVIC_GetPriorityGrouping+0x18>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	f003 0307 	and.w	r3, r3, #7
}
 800606a:	4618      	mov	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	e000ed00 	.word	0xe000ed00

08006078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006086:	2b00      	cmp	r3, #0
 8006088:	db0b      	blt.n	80060a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	f003 021f 	and.w	r2, r3, #31
 8006090:	4907      	ldr	r1, [pc, #28]	; (80060b0 <__NVIC_EnableIRQ+0x38>)
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	2001      	movs	r0, #1
 800609a:	fa00 f202 	lsl.w	r2, r0, r2
 800609e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	e000e100 	.word	0xe000e100

080060b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	6039      	str	r1, [r7, #0]
 80060be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	db0a      	blt.n	80060de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	490c      	ldr	r1, [pc, #48]	; (8006100 <__NVIC_SetPriority+0x4c>)
 80060ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d2:	0112      	lsls	r2, r2, #4
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	440b      	add	r3, r1
 80060d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060dc:	e00a      	b.n	80060f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4908      	ldr	r1, [pc, #32]	; (8006104 <__NVIC_SetPriority+0x50>)
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	3b04      	subs	r3, #4
 80060ec:	0112      	lsls	r2, r2, #4
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	440b      	add	r3, r1
 80060f2:	761a      	strb	r2, [r3, #24]
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	e000e100 	.word	0xe000e100
 8006104:	e000ed00 	.word	0xe000ed00

08006108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006108:	b480      	push	{r7}
 800610a:	b089      	sub	sp, #36	; 0x24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f1c3 0307 	rsb	r3, r3, #7
 8006122:	2b04      	cmp	r3, #4
 8006124:	bf28      	it	cs
 8006126:	2304      	movcs	r3, #4
 8006128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3304      	adds	r3, #4
 800612e:	2b06      	cmp	r3, #6
 8006130:	d902      	bls.n	8006138 <NVIC_EncodePriority+0x30>
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3b03      	subs	r3, #3
 8006136:	e000      	b.n	800613a <NVIC_EncodePriority+0x32>
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800613c:	f04f 32ff 	mov.w	r2, #4294967295
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43da      	mvns	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	401a      	ands	r2, r3
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006150:	f04f 31ff 	mov.w	r1, #4294967295
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	fa01 f303 	lsl.w	r3, r1, r3
 800615a:	43d9      	mvns	r1, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006160:	4313      	orrs	r3, r2
         );
}
 8006162:	4618      	mov	r0, r3
 8006164:	3724      	adds	r7, #36	; 0x24
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3b01      	subs	r3, #1
 800617c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006180:	d301      	bcc.n	8006186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006182:	2301      	movs	r3, #1
 8006184:	e00f      	b.n	80061a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <SysTick_Config+0x40>)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3b01      	subs	r3, #1
 800618c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800618e:	210f      	movs	r1, #15
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	f7ff ff8e 	bl	80060b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <SysTick_Config+0x40>)
 800619a:	2200      	movs	r2, #0
 800619c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <SysTick_Config+0x40>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	e000e010 	.word	0xe000e010

080061b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff ff29 	bl	8006014 <__NVIC_SetPriorityGrouping>
}
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	4603      	mov	r3, r0
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
 80061d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061dc:	f7ff ff3e 	bl	800605c <__NVIC_GetPriorityGrouping>
 80061e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	6978      	ldr	r0, [r7, #20]
 80061e8:	f7ff ff8e 	bl	8006108 <NVIC_EncodePriority>
 80061ec:	4602      	mov	r2, r0
 80061ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f2:	4611      	mov	r1, r2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff ff5d 	bl	80060b4 <__NVIC_SetPriority>
}
 80061fa:	bf00      	nop
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	4603      	mov	r3, r0
 800620a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800620c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff ff31 	bl	8006078 <__NVIC_EnableIRQ>
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff ffa2 	bl	8006170 <SysTick_Config>
 800622c:	4603      	mov	r3, r0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006238:	b480      	push	{r7}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	e159      	b.n	8006508 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006254:	2201      	movs	r2, #1
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4013      	ands	r3, r2
 8006266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	429a      	cmp	r2, r3
 800626e:	f040 8148 	bne.w	8006502 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d005      	beq.n	800628a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006286:	2b02      	cmp	r3, #2
 8006288:	d130      	bne.n	80062ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	2203      	movs	r2, #3
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4013      	ands	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062c0:	2201      	movs	r2, #1
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4013      	ands	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	f003 0201 	and.w	r2, r3, #1
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d017      	beq.n	8006328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	2203      	movs	r2, #3
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	43db      	mvns	r3, r3
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	4013      	ands	r3, r2
 800630e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4313      	orrs	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d123      	bne.n	800637c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	08da      	lsrs	r2, r3, #3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3208      	adds	r2, #8
 800633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	220f      	movs	r2, #15
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4013      	ands	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	fa02 f303 	lsl.w	r3, r2, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4313      	orrs	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	08da      	lsrs	r2, r3, #3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3208      	adds	r2, #8
 8006376:	69b9      	ldr	r1, [r7, #24]
 8006378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	2203      	movs	r2, #3
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	43db      	mvns	r3, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4013      	ands	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 0203 	and.w	r2, r3, #3
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a2 	beq.w	8006502 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	4b57      	ldr	r3, [pc, #348]	; (8006520 <HAL_GPIO_Init+0x2e8>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	4a56      	ldr	r2, [pc, #344]	; (8006520 <HAL_GPIO_Init+0x2e8>)
 80063c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063cc:	6453      	str	r3, [r2, #68]	; 0x44
 80063ce:	4b54      	ldr	r3, [pc, #336]	; (8006520 <HAL_GPIO_Init+0x2e8>)
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063da:	4a52      	ldr	r2, [pc, #328]	; (8006524 <HAL_GPIO_Init+0x2ec>)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	089b      	lsrs	r3, r3, #2
 80063e0:	3302      	adds	r3, #2
 80063e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	220f      	movs	r2, #15
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43db      	mvns	r3, r3
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	4013      	ands	r3, r2
 80063fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a49      	ldr	r2, [pc, #292]	; (8006528 <HAL_GPIO_Init+0x2f0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d019      	beq.n	800643a <HAL_GPIO_Init+0x202>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a48      	ldr	r2, [pc, #288]	; (800652c <HAL_GPIO_Init+0x2f4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <HAL_GPIO_Init+0x1fe>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a47      	ldr	r2, [pc, #284]	; (8006530 <HAL_GPIO_Init+0x2f8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00d      	beq.n	8006432 <HAL_GPIO_Init+0x1fa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a46      	ldr	r2, [pc, #280]	; (8006534 <HAL_GPIO_Init+0x2fc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <HAL_GPIO_Init+0x1f6>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a45      	ldr	r2, [pc, #276]	; (8006538 <HAL_GPIO_Init+0x300>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d101      	bne.n	800642a <HAL_GPIO_Init+0x1f2>
 8006426:	2304      	movs	r3, #4
 8006428:	e008      	b.n	800643c <HAL_GPIO_Init+0x204>
 800642a:	2307      	movs	r3, #7
 800642c:	e006      	b.n	800643c <HAL_GPIO_Init+0x204>
 800642e:	2303      	movs	r3, #3
 8006430:	e004      	b.n	800643c <HAL_GPIO_Init+0x204>
 8006432:	2302      	movs	r3, #2
 8006434:	e002      	b.n	800643c <HAL_GPIO_Init+0x204>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_GPIO_Init+0x204>
 800643a:	2300      	movs	r3, #0
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	f002 0203 	and.w	r2, r2, #3
 8006442:	0092      	lsls	r2, r2, #2
 8006444:	4093      	lsls	r3, r2
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4313      	orrs	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800644c:	4935      	ldr	r1, [pc, #212]	; (8006524 <HAL_GPIO_Init+0x2ec>)
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	089b      	lsrs	r3, r3, #2
 8006452:	3302      	adds	r3, #2
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800645a:	4b38      	ldr	r3, [pc, #224]	; (800653c <HAL_GPIO_Init+0x304>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	43db      	mvns	r3, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4013      	ands	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <HAL_GPIO_Init+0x304>)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006484:	4b2d      	ldr	r3, [pc, #180]	; (800653c <HAL_GPIO_Init+0x304>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	43db      	mvns	r3, r3
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	4013      	ands	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064a8:	4a24      	ldr	r2, [pc, #144]	; (800653c <HAL_GPIO_Init+0x304>)
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064ae:	4b23      	ldr	r3, [pc, #140]	; (800653c <HAL_GPIO_Init+0x304>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	43db      	mvns	r3, r3
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	4013      	ands	r3, r2
 80064bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <HAL_GPIO_Init+0x304>)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064d8:	4b18      	ldr	r3, [pc, #96]	; (800653c <HAL_GPIO_Init+0x304>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	43db      	mvns	r3, r3
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	4013      	ands	r3, r2
 80064e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064fc:	4a0f      	ldr	r2, [pc, #60]	; (800653c <HAL_GPIO_Init+0x304>)
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	3301      	adds	r3, #1
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2b0f      	cmp	r3, #15
 800650c:	f67f aea2 	bls.w	8006254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	3724      	adds	r7, #36	; 0x24
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	40023800 	.word	0x40023800
 8006524:	40013800 	.word	0x40013800
 8006528:	40020000 	.word	0x40020000
 800652c:	40020400 	.word	0x40020400
 8006530:	40020800 	.word	0x40020800
 8006534:	40020c00 	.word	0x40020c00
 8006538:	40021000 	.word	0x40021000
 800653c:	40013c00 	.word	0x40013c00

08006540 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006552:	2300      	movs	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006556:	2300      	movs	r3, #0
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e0bb      	b.n	80066d4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800655c:	2201      	movs	r2, #1
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	4013      	ands	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	f040 80ab 	bne.w	80066ce <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006578:	4a5c      	ldr	r2, [pc, #368]	; (80066ec <HAL_GPIO_DeInit+0x1ac>)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	089b      	lsrs	r3, r3, #2
 800657e:	3302      	adds	r3, #2
 8006580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006584:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	220f      	movs	r2, #15
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	4013      	ands	r3, r2
 8006598:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a54      	ldr	r2, [pc, #336]	; (80066f0 <HAL_GPIO_DeInit+0x1b0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d019      	beq.n	80065d6 <HAL_GPIO_DeInit+0x96>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a53      	ldr	r2, [pc, #332]	; (80066f4 <HAL_GPIO_DeInit+0x1b4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <HAL_GPIO_DeInit+0x92>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a52      	ldr	r2, [pc, #328]	; (80066f8 <HAL_GPIO_DeInit+0x1b8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00d      	beq.n	80065ce <HAL_GPIO_DeInit+0x8e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a51      	ldr	r2, [pc, #324]	; (80066fc <HAL_GPIO_DeInit+0x1bc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <HAL_GPIO_DeInit+0x8a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a50      	ldr	r2, [pc, #320]	; (8006700 <HAL_GPIO_DeInit+0x1c0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d101      	bne.n	80065c6 <HAL_GPIO_DeInit+0x86>
 80065c2:	2304      	movs	r3, #4
 80065c4:	e008      	b.n	80065d8 <HAL_GPIO_DeInit+0x98>
 80065c6:	2307      	movs	r3, #7
 80065c8:	e006      	b.n	80065d8 <HAL_GPIO_DeInit+0x98>
 80065ca:	2303      	movs	r3, #3
 80065cc:	e004      	b.n	80065d8 <HAL_GPIO_DeInit+0x98>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e002      	b.n	80065d8 <HAL_GPIO_DeInit+0x98>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <HAL_GPIO_DeInit+0x98>
 80065d6:	2300      	movs	r3, #0
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	f002 0203 	and.w	r2, r2, #3
 80065de:	0092      	lsls	r2, r2, #2
 80065e0:	4093      	lsls	r3, r2
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d132      	bne.n	800664e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065e8:	4b46      	ldr	r3, [pc, #280]	; (8006704 <HAL_GPIO_DeInit+0x1c4>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	4944      	ldr	r1, [pc, #272]	; (8006704 <HAL_GPIO_DeInit+0x1c4>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80065f6:	4b43      	ldr	r3, [pc, #268]	; (8006704 <HAL_GPIO_DeInit+0x1c4>)
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	4941      	ldr	r1, [pc, #260]	; (8006704 <HAL_GPIO_DeInit+0x1c4>)
 8006600:	4013      	ands	r3, r2
 8006602:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006604:	4b3f      	ldr	r3, [pc, #252]	; (8006704 <HAL_GPIO_DeInit+0x1c4>)
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	43db      	mvns	r3, r3
 800660c:	493d      	ldr	r1, [pc, #244]	; (8006704 <HAL_GPIO_DeInit+0x1c4>)
 800660e:	4013      	ands	r3, r2
 8006610:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006612:	4b3c      	ldr	r3, [pc, #240]	; (8006704 <HAL_GPIO_DeInit+0x1c4>)
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	43db      	mvns	r3, r3
 800661a:	493a      	ldr	r1, [pc, #232]	; (8006704 <HAL_GPIO_DeInit+0x1c4>)
 800661c:	4013      	ands	r3, r2
 800661e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	220f      	movs	r2, #15
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006630:	4a2e      	ldr	r2, [pc, #184]	; (80066ec <HAL_GPIO_DeInit+0x1ac>)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	089b      	lsrs	r3, r3, #2
 8006636:	3302      	adds	r3, #2
 8006638:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	43da      	mvns	r2, r3
 8006640:	482a      	ldr	r0, [pc, #168]	; (80066ec <HAL_GPIO_DeInit+0x1ac>)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	089b      	lsrs	r3, r3, #2
 8006646:	400a      	ands	r2, r1
 8006648:	3302      	adds	r3, #2
 800664a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	2103      	movs	r1, #3
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	43db      	mvns	r3, r3
 800665e:	401a      	ands	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	08da      	lsrs	r2, r3, #3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3208      	adds	r2, #8
 800666c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	220f      	movs	r2, #15
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43db      	mvns	r3, r3
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	08d2      	lsrs	r2, r2, #3
 8006684:	4019      	ands	r1, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	3208      	adds	r2, #8
 800668a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	2103      	movs	r1, #3
 8006698:	fa01 f303 	lsl.w	r3, r1, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	401a      	ands	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	2101      	movs	r1, #1
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	fa01 f303 	lsl.w	r3, r1, r3
 80066b0:	43db      	mvns	r3, r3
 80066b2:	401a      	ands	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	2103      	movs	r1, #3
 80066c2:	fa01 f303 	lsl.w	r3, r1, r3
 80066c6:	43db      	mvns	r3, r3
 80066c8:	401a      	ands	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	3301      	adds	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b0f      	cmp	r3, #15
 80066d8:	f67f af40 	bls.w	800655c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80066dc:	bf00      	nop
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40013800 	.word	0x40013800
 80066f0:	40020000 	.word	0x40020000
 80066f4:	40020400 	.word	0x40020400
 80066f8:	40020800 	.word	0x40020800
 80066fc:	40020c00 	.word	0x40020c00
 8006700:	40021000 	.word	0x40021000
 8006704:	40013c00 	.word	0x40013c00

08006708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	807b      	strh	r3, [r7, #2]
 8006714:	4613      	mov	r3, r2
 8006716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006718:	787b      	ldrb	r3, [r7, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800671e:	887a      	ldrh	r2, [r7, #2]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006724:	e003      	b.n	800672e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006726:	887b      	ldrh	r3, [r7, #2]
 8006728:	041a      	lsls	r2, r3, #16
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	619a      	str	r2, [r3, #24]
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006746:	4b08      	ldr	r3, [pc, #32]	; (8006768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d006      	beq.n	8006760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006752:	4a05      	ldr	r2, [pc, #20]	; (8006768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	4618      	mov	r0, r3
 800675c:	f7fa fa06 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
  }
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40013c00 	.word	0x40013c00

0800676c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e12b      	b.n	80069d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f95d 	bl	8006a52 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2224      	movs	r2, #36	; 0x24
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067d0:	f001 fc36 	bl	8008040 <HAL_RCC_GetPCLK1Freq>
 80067d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4a81      	ldr	r2, [pc, #516]	; (80069e0 <HAL_I2C_Init+0x274>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d807      	bhi.n	80067f0 <HAL_I2C_Init+0x84>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a80      	ldr	r2, [pc, #512]	; (80069e4 <HAL_I2C_Init+0x278>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	bf94      	ite	ls
 80067e8:	2301      	movls	r3, #1
 80067ea:	2300      	movhi	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	e006      	b.n	80067fe <HAL_I2C_Init+0x92>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a7d      	ldr	r2, [pc, #500]	; (80069e8 <HAL_I2C_Init+0x27c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	bf94      	ite	ls
 80067f8:	2301      	movls	r3, #1
 80067fa:	2300      	movhi	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0e7      	b.n	80069d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a78      	ldr	r2, [pc, #480]	; (80069ec <HAL_I2C_Init+0x280>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	0c9b      	lsrs	r3, r3, #18
 8006810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a6a      	ldr	r2, [pc, #424]	; (80069e0 <HAL_I2C_Init+0x274>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d802      	bhi.n	8006840 <HAL_I2C_Init+0xd4>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	3301      	adds	r3, #1
 800683e:	e009      	b.n	8006854 <HAL_I2C_Init+0xe8>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	4a69      	ldr	r2, [pc, #420]	; (80069f0 <HAL_I2C_Init+0x284>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	099b      	lsrs	r3, r3, #6
 8006852:	3301      	adds	r3, #1
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	430b      	orrs	r3, r1
 800685a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	495c      	ldr	r1, [pc, #368]	; (80069e0 <HAL_I2C_Init+0x274>)
 8006870:	428b      	cmp	r3, r1
 8006872:	d819      	bhi.n	80068a8 <HAL_I2C_Init+0x13c>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	1e59      	subs	r1, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006882:	1c59      	adds	r1, r3, #1
 8006884:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006888:	400b      	ands	r3, r1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_I2C_Init+0x138>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1e59      	subs	r1, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	fbb1 f3f3 	udiv	r3, r1, r3
 800689c:	3301      	adds	r3, #1
 800689e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a2:	e051      	b.n	8006948 <HAL_I2C_Init+0x1dc>
 80068a4:	2304      	movs	r3, #4
 80068a6:	e04f      	b.n	8006948 <HAL_I2C_Init+0x1dc>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d111      	bne.n	80068d4 <HAL_I2C_Init+0x168>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	1e58      	subs	r0, r3, #1
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6859      	ldr	r1, [r3, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	440b      	add	r3, r1
 80068be:	fbb0 f3f3 	udiv	r3, r0, r3
 80068c2:	3301      	adds	r3, #1
 80068c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	e012      	b.n	80068fa <HAL_I2C_Init+0x18e>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	1e58      	subs	r0, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6859      	ldr	r1, [r3, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	0099      	lsls	r1, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ea:	3301      	adds	r3, #1
 80068ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_I2C_Init+0x196>
 80068fe:	2301      	movs	r3, #1
 8006900:	e022      	b.n	8006948 <HAL_I2C_Init+0x1dc>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10e      	bne.n	8006928 <HAL_I2C_Init+0x1bc>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1e58      	subs	r0, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6859      	ldr	r1, [r3, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	440b      	add	r3, r1
 8006918:	fbb0 f3f3 	udiv	r3, r0, r3
 800691c:	3301      	adds	r3, #1
 800691e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	e00f      	b.n	8006948 <HAL_I2C_Init+0x1dc>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	1e58      	subs	r0, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6859      	ldr	r1, [r3, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	0099      	lsls	r1, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	fbb0 f3f3 	udiv	r3, r0, r3
 800693e:	3301      	adds	r3, #1
 8006940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	6809      	ldr	r1, [r1, #0]
 800694c:	4313      	orrs	r3, r2
 800694e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6911      	ldr	r1, [r2, #16]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	68d2      	ldr	r2, [r2, #12]
 8006982:	4311      	orrs	r1, r2
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6812      	ldr	r2, [r2, #0]
 8006988:	430b      	orrs	r3, r1
 800698a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	000186a0 	.word	0x000186a0
 80069e4:	001e847f 	.word	0x001e847f
 80069e8:	003d08ff 	.word	0x003d08ff
 80069ec:	431bde83 	.word	0x431bde83
 80069f0:	10624dd3 	.word	0x10624dd3

080069f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e021      	b.n	8006a4a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2224      	movs	r2, #36	; 0x24
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0201 	bic.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f821 	bl	8006a66 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
	...

08006a7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	4608      	mov	r0, r1
 8006a86:	4611      	mov	r1, r2
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	817b      	strh	r3, [r7, #10]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	813b      	strh	r3, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a96:	f7ff fab1 	bl	8005ffc <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	f040 80d9 	bne.w	8006c5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	2319      	movs	r3, #25
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	496d      	ldr	r1, [pc, #436]	; (8006c68 <HAL_I2C_Mem_Write+0x1ec>)
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fc99 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e0cc      	b.n	8006c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_I2C_Mem_Write+0x56>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e0c5      	b.n	8006c5e <HAL_I2C_Mem_Write+0x1e2>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d007      	beq.n	8006af8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2221      	movs	r2, #33	; 0x21
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2240      	movs	r2, #64	; 0x40
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a3a      	ldr	r2, [r7, #32]
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a4d      	ldr	r2, [pc, #308]	; (8006c6c <HAL_I2C_Mem_Write+0x1f0>)
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b3a:	88f8      	ldrh	r0, [r7, #6]
 8006b3c:	893a      	ldrh	r2, [r7, #8]
 8006b3e:	8979      	ldrh	r1, [r7, #10]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fad0 	bl	80070f0 <I2C_RequestMemoryWrite>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d052      	beq.n	8006bfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e081      	b.n	8006c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 fd1a 	bl	8007598 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d107      	bne.n	8006b82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e06b      	b.n	8006c5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	d11b      	bne.n	8006bfc <HAL_I2C_Mem_Write+0x180>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1aa      	bne.n	8006b5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 fd06 	bl	800761a <I2C_WaitOnBTFFlagUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00d      	beq.n	8006c30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d107      	bne.n	8006c2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e016      	b.n	8006c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e000      	b.n	8006c5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
  }
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	00100002 	.word	0x00100002
 8006c6c:	ffff0000 	.word	0xffff0000

08006c70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08c      	sub	sp, #48	; 0x30
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	4608      	mov	r0, r1
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	817b      	strh	r3, [r7, #10]
 8006c82:	460b      	mov	r3, r1
 8006c84:	813b      	strh	r3, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c8a:	f7ff f9b7 	bl	8005ffc <HAL_GetTick>
 8006c8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	f040 8208 	bne.w	80070ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	2319      	movs	r3, #25
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	497b      	ldr	r1, [pc, #492]	; (8006e94 <HAL_I2C_Mem_Read+0x224>)
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fb9f 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e1fb      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_I2C_Mem_Read+0x56>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e1f4      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d007      	beq.n	8006cec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2222      	movs	r2, #34	; 0x22
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2240      	movs	r2, #64	; 0x40
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a5b      	ldr	r2, [pc, #364]	; (8006e98 <HAL_I2C_Mem_Read+0x228>)
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d2e:	88f8      	ldrh	r0, [r7, #6]
 8006d30:	893a      	ldrh	r2, [r7, #8]
 8006d32:	8979      	ldrh	r1, [r7, #10]
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fa6c 	bl	800721c <I2C_RequestMemoryRead>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e1b0      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d113      	bne.n	8006d7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d56:	2300      	movs	r3, #0
 8006d58:	623b      	str	r3, [r7, #32]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	623b      	str	r3, [r7, #32]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	623b      	str	r3, [r7, #32]
 8006d6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e184      	b.n	8007088 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d11b      	bne.n	8006dbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	61fb      	str	r3, [r7, #28]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e164      	b.n	8007088 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d11b      	bne.n	8006dfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	e144      	b.n	8007088 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e14:	e138      	b.n	8007088 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	f200 80f1 	bhi.w	8007002 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d123      	bne.n	8006e70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fc35 	bl	800769c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e139      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e6e:	e10b      	b.n	8007088 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d14e      	bne.n	8006f16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4906      	ldr	r1, [pc, #24]	; (8006e9c <HAL_I2C_Mem_Read+0x22c>)
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fab2 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d008      	beq.n	8006ea0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e10e      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
 8006e92:	bf00      	nop
 8006e94:	00100002 	.word	0x00100002
 8006e98:	ffff0000 	.word	0xffff0000
 8006e9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f14:	e0b8      	b.n	8007088 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4966      	ldr	r1, [pc, #408]	; (80070b8 <HAL_I2C_Mem_Read+0x448>)
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fa63 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e0bf      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691a      	ldr	r2, [r3, #16]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	2200      	movs	r2, #0
 8006f7a:	494f      	ldr	r1, [pc, #316]	; (80070b8 <HAL_I2C_Mem_Read+0x448>)
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 fa35 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e091      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691a      	ldr	r2, [r3, #16]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007000:	e042      	b.n	8007088 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fb48 	bl	800769c <I2C_WaitOnRXNEFlagUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e04c      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29a      	uxth	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b04      	cmp	r3, #4
 8007054:	d118      	bne.n	8007088 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708c:	2b00      	cmp	r3, #0
 800708e:	f47f aec2 	bne.w	8006e16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e000      	b.n	80070b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070ae:	2302      	movs	r3, #2
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3728      	adds	r7, #40	; 0x28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	00010004 	.word	0x00010004

080070bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	b2db      	uxtb	r3, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	461a      	mov	r2, r3
 80070fe:	4603      	mov	r3, r0
 8007100:	817b      	strh	r3, [r7, #10]
 8007102:	460b      	mov	r3, r1
 8007104:	813b      	strh	r3, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	2200      	movs	r2, #0
 8007122:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f960 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00d      	beq.n	800714e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007140:	d103      	bne.n	800714a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e05f      	b.n	800720e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800714e:	897b      	ldrh	r3, [r7, #10]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800715c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	492d      	ldr	r1, [pc, #180]	; (8007218 <I2C_RequestMemoryWrite+0x128>)
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f998 	bl	800749a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e04c      	b.n	800720e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800718a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718c:	6a39      	ldr	r1, [r7, #32]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 fa02 	bl	8007598 <I2C_WaitOnTXEFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00d      	beq.n	80071b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d107      	bne.n	80071b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e02b      	b.n	800720e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d105      	bne.n	80071c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	611a      	str	r2, [r3, #16]
 80071c6:	e021      	b.n	800720c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071c8:	893b      	ldrh	r3, [r7, #8]
 80071ca:	0a1b      	lsrs	r3, r3, #8
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d8:	6a39      	ldr	r1, [r7, #32]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f9dc 	bl	8007598 <I2C_WaitOnTXEFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00d      	beq.n	8007202 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d107      	bne.n	80071fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e005      	b.n	800720e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007202:	893b      	ldrh	r3, [r7, #8]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	00010002 	.word	0x00010002

0800721c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	4608      	mov	r0, r1
 8007226:	4611      	mov	r1, r2
 8007228:	461a      	mov	r2, r3
 800722a:	4603      	mov	r3, r0
 800722c:	817b      	strh	r3, [r7, #10]
 800722e:	460b      	mov	r3, r1
 8007230:	813b      	strh	r3, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007244:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	2200      	movs	r2, #0
 800725e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 f8c2 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727c:	d103      	bne.n	8007286 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007284:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e0aa      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800728a:	897b      	ldrh	r3, [r7, #10]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	4952      	ldr	r1, [pc, #328]	; (80073e8 <I2C_RequestMemoryRead+0x1cc>)
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f8fa 	bl	800749a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e097      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b0:	2300      	movs	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c8:	6a39      	ldr	r1, [r7, #32]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f964 	bl	8007598 <I2C_WaitOnTXEFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00d      	beq.n	80072f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d107      	bne.n	80072ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e076      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d105      	bne.n	8007304 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072f8:	893b      	ldrh	r3, [r7, #8]
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	611a      	str	r2, [r3, #16]
 8007302:	e021      	b.n	8007348 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007304:	893b      	ldrh	r3, [r7, #8]
 8007306:	0a1b      	lsrs	r3, r3, #8
 8007308:	b29b      	uxth	r3, r3
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007314:	6a39      	ldr	r1, [r7, #32]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f93e 	bl	8007598 <I2C_WaitOnTXEFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00d      	beq.n	800733e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	2b04      	cmp	r3, #4
 8007328:	d107      	bne.n	800733a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e050      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800733e:	893b      	ldrh	r3, [r7, #8]
 8007340:	b2da      	uxtb	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800734a:	6a39      	ldr	r1, [r7, #32]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f923 	bl	8007598 <I2C_WaitOnTXEFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00d      	beq.n	8007374 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735c:	2b04      	cmp	r3, #4
 800735e:	d107      	bne.n	8007370 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800736e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e035      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007382:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	2200      	movs	r2, #0
 800738c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f82b 	bl	80073ec <I2C_WaitOnFlagUntilTimeout>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00d      	beq.n	80073b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073aa:	d103      	bne.n	80073b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e013      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073b8:	897b      	ldrh	r3, [r7, #10]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	6a3a      	ldr	r2, [r7, #32]
 80073cc:	4906      	ldr	r1, [pc, #24]	; (80073e8 <I2C_RequestMemoryRead+0x1cc>)
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f863 	bl	800749a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	00010002 	.word	0x00010002

080073ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073fc:	e025      	b.n	800744a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d021      	beq.n	800744a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007406:	f7fe fdf9 	bl	8005ffc <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	683a      	ldr	r2, [r7, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d302      	bcc.n	800741c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d116      	bne.n	800744a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f043 0220 	orr.w	r2, r3, #32
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e023      	b.n	8007492 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	0c1b      	lsrs	r3, r3, #16
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d10d      	bne.n	8007470 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	43da      	mvns	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4013      	ands	r3, r2
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	bf0c      	ite	eq
 8007466:	2301      	moveq	r3, #1
 8007468:	2300      	movne	r3, #0
 800746a:	b2db      	uxtb	r3, r3
 800746c:	461a      	mov	r2, r3
 800746e:	e00c      	b.n	800748a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	43da      	mvns	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4013      	ands	r3, r2
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf0c      	ite	eq
 8007482:	2301      	moveq	r3, #1
 8007484:	2300      	movne	r3, #0
 8007486:	b2db      	uxtb	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	429a      	cmp	r2, r3
 800748e:	d0b6      	beq.n	80073fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074a8:	e051      	b.n	800754e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d123      	bne.n	8007502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f043 0204 	orr.w	r2, r3, #4
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e046      	b.n	8007590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d021      	beq.n	800754e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750a:	f7fe fd77 	bl	8005ffc <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d302      	bcc.n	8007520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d116      	bne.n	800754e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f043 0220 	orr.w	r2, r3, #32
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e020      	b.n	8007590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	d10c      	bne.n	8007572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	43da      	mvns	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4013      	ands	r3, r2
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	bf14      	ite	ne
 800756a:	2301      	movne	r3, #1
 800756c:	2300      	moveq	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	e00b      	b.n	800758a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	43da      	mvns	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	4013      	ands	r3, r2
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	bf14      	ite	ne
 8007584:	2301      	movne	r3, #1
 8007586:	2300      	moveq	r3, #0
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d18d      	bne.n	80074aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075a4:	e02d      	b.n	8007602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f8ce 	bl	8007748 <I2C_IsAcknowledgeFailed>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e02d      	b.n	8007612 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d021      	beq.n	8007602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075be:	f7fe fd1d 	bl	8005ffc <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d302      	bcc.n	80075d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d116      	bne.n	8007602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f043 0220 	orr.w	r2, r3, #32
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e007      	b.n	8007612 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760c:	2b80      	cmp	r3, #128	; 0x80
 800760e:	d1ca      	bne.n	80075a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007626:	e02d      	b.n	8007684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f88d 	bl	8007748 <I2C_IsAcknowledgeFailed>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e02d      	b.n	8007694 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763e:	d021      	beq.n	8007684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007640:	f7fe fcdc 	bl	8005ffc <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	429a      	cmp	r2, r3
 800764e:	d302      	bcc.n	8007656 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d116      	bne.n	8007684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	f043 0220 	orr.w	r2, r3, #32
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e007      	b.n	8007694 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b04      	cmp	r3, #4
 8007690:	d1ca      	bne.n	8007628 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076a8:	e042      	b.n	8007730 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d119      	bne.n	80076ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f06f 0210 	mvn.w	r2, #16
 80076c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e029      	b.n	8007740 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ec:	f7fe fc86 	bl	8005ffc <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d302      	bcc.n	8007702 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d116      	bne.n	8007730 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	f043 0220 	orr.w	r2, r3, #32
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e007      	b.n	8007740 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d1b5      	bne.n	80076aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800775a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800775e:	d11b      	bne.n	8007798 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007768:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2220      	movs	r2, #32
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	f043 0204 	orr.w	r2, r3, #4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
	...

080077a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e264      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d075      	beq.n	80078b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077c6:	4ba3      	ldr	r3, [pc, #652]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 030c 	and.w	r3, r3, #12
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d00c      	beq.n	80077ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077d2:	4ba0      	ldr	r3, [pc, #640]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d112      	bne.n	8007804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077de:	4b9d      	ldr	r3, [pc, #628]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ea:	d10b      	bne.n	8007804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ec:	4b99      	ldr	r3, [pc, #612]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d05b      	beq.n	80078b0 <HAL_RCC_OscConfig+0x108>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d157      	bne.n	80078b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e23f      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780c:	d106      	bne.n	800781c <HAL_RCC_OscConfig+0x74>
 800780e:	4b91      	ldr	r3, [pc, #580]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a90      	ldr	r2, [pc, #576]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	e01d      	b.n	8007858 <HAL_RCC_OscConfig+0xb0>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007824:	d10c      	bne.n	8007840 <HAL_RCC_OscConfig+0x98>
 8007826:	4b8b      	ldr	r3, [pc, #556]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a8a      	ldr	r2, [pc, #552]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 800782c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	4b88      	ldr	r3, [pc, #544]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a87      	ldr	r2, [pc, #540]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800783c:	6013      	str	r3, [r2, #0]
 800783e:	e00b      	b.n	8007858 <HAL_RCC_OscConfig+0xb0>
 8007840:	4b84      	ldr	r3, [pc, #528]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a83      	ldr	r2, [pc, #524]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	4b81      	ldr	r3, [pc, #516]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a80      	ldr	r2, [pc, #512]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d013      	beq.n	8007888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007860:	f7fe fbcc 	bl	8005ffc <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007866:	e008      	b.n	800787a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007868:	f7fe fbc8 	bl	8005ffc <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b64      	cmp	r3, #100	; 0x64
 8007874:	d901      	bls.n	800787a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e204      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787a:	4b76      	ldr	r3, [pc, #472]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0f0      	beq.n	8007868 <HAL_RCC_OscConfig+0xc0>
 8007886:	e014      	b.n	80078b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007888:	f7fe fbb8 	bl	8005ffc <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800788e:	e008      	b.n	80078a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007890:	f7fe fbb4 	bl	8005ffc <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b64      	cmp	r3, #100	; 0x64
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e1f0      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078a2:	4b6c      	ldr	r3, [pc, #432]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1f0      	bne.n	8007890 <HAL_RCC_OscConfig+0xe8>
 80078ae:	e000      	b.n	80078b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d063      	beq.n	8007986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078be:	4b65      	ldr	r3, [pc, #404]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 030c 	and.w	r3, r3, #12
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ca:	4b62      	ldr	r3, [pc, #392]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d11c      	bne.n	8007910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078d6:	4b5f      	ldr	r3, [pc, #380]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d116      	bne.n	8007910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078e2:	4b5c      	ldr	r3, [pc, #368]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d005      	beq.n	80078fa <HAL_RCC_OscConfig+0x152>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d001      	beq.n	80078fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e1c4      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078fa:	4b56      	ldr	r3, [pc, #344]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4952      	ldr	r1, [pc, #328]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 800790a:	4313      	orrs	r3, r2
 800790c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800790e:	e03a      	b.n	8007986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d020      	beq.n	800795a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007918:	4b4f      	ldr	r3, [pc, #316]	; (8007a58 <HAL_RCC_OscConfig+0x2b0>)
 800791a:	2201      	movs	r2, #1
 800791c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791e:	f7fe fb6d 	bl	8005ffc <HAL_GetTick>
 8007922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007924:	e008      	b.n	8007938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007926:	f7fe fb69 	bl	8005ffc <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e1a5      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007938:	4b46      	ldr	r3, [pc, #280]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0f0      	beq.n	8007926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007944:	4b43      	ldr	r3, [pc, #268]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	4940      	ldr	r1, [pc, #256]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007954:	4313      	orrs	r3, r2
 8007956:	600b      	str	r3, [r1, #0]
 8007958:	e015      	b.n	8007986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800795a:	4b3f      	ldr	r3, [pc, #252]	; (8007a58 <HAL_RCC_OscConfig+0x2b0>)
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007960:	f7fe fb4c 	bl	8005ffc <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007968:	f7fe fb48 	bl	8005ffc <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e184      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800797a:	4b36      	ldr	r3, [pc, #216]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1f0      	bne.n	8007968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	2b00      	cmp	r3, #0
 8007990:	d030      	beq.n	80079f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d016      	beq.n	80079c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800799a:	4b30      	ldr	r3, [pc, #192]	; (8007a5c <HAL_RCC_OscConfig+0x2b4>)
 800799c:	2201      	movs	r2, #1
 800799e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a0:	f7fe fb2c 	bl	8005ffc <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079a8:	f7fe fb28 	bl	8005ffc <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e164      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ba:	4b26      	ldr	r3, [pc, #152]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80079bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f0      	beq.n	80079a8 <HAL_RCC_OscConfig+0x200>
 80079c6:	e015      	b.n	80079f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079c8:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <HAL_RCC_OscConfig+0x2b4>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ce:	f7fe fb15 	bl	8005ffc <HAL_GetTick>
 80079d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079d6:	f7fe fb11 	bl	8005ffc <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e14d      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 80079ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f0      	bne.n	80079d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 80a0 	beq.w	8007b42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10f      	bne.n	8007a32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	4a0e      	ldr	r2, [pc, #56]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a20:	6413      	str	r3, [r2, #64]	; 0x40
 8007a22:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <HAL_RCC_OscConfig+0x2ac>)
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a2a:	60bb      	str	r3, [r7, #8]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a32:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_RCC_OscConfig+0x2b8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d121      	bne.n	8007a82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a3e:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <HAL_RCC_OscConfig+0x2b8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a07      	ldr	r2, [pc, #28]	; (8007a60 <HAL_RCC_OscConfig+0x2b8>)
 8007a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a4a:	f7fe fad7 	bl	8005ffc <HAL_GetTick>
 8007a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a50:	e011      	b.n	8007a76 <HAL_RCC_OscConfig+0x2ce>
 8007a52:	bf00      	nop
 8007a54:	40023800 	.word	0x40023800
 8007a58:	42470000 	.word	0x42470000
 8007a5c:	42470e80 	.word	0x42470e80
 8007a60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a64:	f7fe faca 	bl	8005ffc <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d901      	bls.n	8007a76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e106      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a76:	4b85      	ldr	r3, [pc, #532]	; (8007c8c <HAL_RCC_OscConfig+0x4e4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0f0      	beq.n	8007a64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d106      	bne.n	8007a98 <HAL_RCC_OscConfig+0x2f0>
 8007a8a:	4b81      	ldr	r3, [pc, #516]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	4a80      	ldr	r2, [pc, #512]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	6713      	str	r3, [r2, #112]	; 0x70
 8007a96:	e01c      	b.n	8007ad2 <HAL_RCC_OscConfig+0x32a>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	2b05      	cmp	r3, #5
 8007a9e:	d10c      	bne.n	8007aba <HAL_RCC_OscConfig+0x312>
 8007aa0:	4b7b      	ldr	r3, [pc, #492]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	4a7a      	ldr	r2, [pc, #488]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007aa6:	f043 0304 	orr.w	r3, r3, #4
 8007aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8007aac:	4b78      	ldr	r3, [pc, #480]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	4a77      	ldr	r2, [pc, #476]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab8:	e00b      	b.n	8007ad2 <HAL_RCC_OscConfig+0x32a>
 8007aba:	4b75      	ldr	r3, [pc, #468]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	4a74      	ldr	r2, [pc, #464]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007ac0:	f023 0301 	bic.w	r3, r3, #1
 8007ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac6:	4b72      	ldr	r3, [pc, #456]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aca:	4a71      	ldr	r2, [pc, #452]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007acc:	f023 0304 	bic.w	r3, r3, #4
 8007ad0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d015      	beq.n	8007b06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ada:	f7fe fa8f 	bl	8005ffc <HAL_GetTick>
 8007ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae0:	e00a      	b.n	8007af8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ae2:	f7fe fa8b 	bl	8005ffc <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e0c5      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007af8:	4b65      	ldr	r3, [pc, #404]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0ee      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x33a>
 8007b04:	e014      	b.n	8007b30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b06:	f7fe fa79 	bl	8005ffc <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b0c:	e00a      	b.n	8007b24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b0e:	f7fe fa75 	bl	8005ffc <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e0af      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b24:	4b5a      	ldr	r3, [pc, #360]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1ee      	bne.n	8007b0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d105      	bne.n	8007b42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b36:	4b56      	ldr	r3, [pc, #344]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	4a55      	ldr	r2, [pc, #340]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 809b 	beq.w	8007c82 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b4c:	4b50      	ldr	r3, [pc, #320]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f003 030c 	and.w	r3, r3, #12
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d05c      	beq.n	8007c12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d141      	bne.n	8007be4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b60:	4b4c      	ldr	r3, [pc, #304]	; (8007c94 <HAL_RCC_OscConfig+0x4ec>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b66:	f7fe fa49 	bl	8005ffc <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b6e:	f7fe fa45 	bl	8005ffc <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e081      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b80:	4b43      	ldr	r3, [pc, #268]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f0      	bne.n	8007b6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69da      	ldr	r2, [r3, #28]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	019b      	lsls	r3, r3, #6
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	041b      	lsls	r3, r3, #16
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	061b      	lsls	r3, r3, #24
 8007bb0:	4937      	ldr	r1, [pc, #220]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bb6:	4b37      	ldr	r3, [pc, #220]	; (8007c94 <HAL_RCC_OscConfig+0x4ec>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bbc:	f7fe fa1e 	bl	8005ffc <HAL_GetTick>
 8007bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bc4:	f7fe fa1a 	bl	8005ffc <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e056      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bd6:	4b2e      	ldr	r3, [pc, #184]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0f0      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x41c>
 8007be2:	e04e      	b.n	8007c82 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be4:	4b2b      	ldr	r3, [pc, #172]	; (8007c94 <HAL_RCC_OscConfig+0x4ec>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bea:	f7fe fa07 	bl	8005ffc <HAL_GetTick>
 8007bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf0:	e008      	b.n	8007c04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf2:	f7fe fa03 	bl	8005ffc <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e03f      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c04:	4b22      	ldr	r3, [pc, #136]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f0      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x44a>
 8007c10:	e037      	b.n	8007c82 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e032      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c1e:	4b1c      	ldr	r3, [pc, #112]	; (8007c90 <HAL_RCC_OscConfig+0x4e8>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d028      	beq.n	8007c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d121      	bne.n	8007c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d11a      	bne.n	8007c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c4e:	4013      	ands	r3, r2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c54:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d111      	bne.n	8007c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	085b      	lsrs	r3, r3, #1
 8007c66:	3b01      	subs	r3, #1
 8007c68:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d107      	bne.n	8007c7e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d001      	beq.n	8007c82 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	40007000 	.word	0x40007000
 8007c90:	40023800 	.word	0x40023800
 8007c94:	42470060 	.word	0x42470060

08007c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e0cc      	b.n	8007e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cac:	4b68      	ldr	r3, [pc, #416]	; (8007e50 <HAL_RCC_ClockConfig+0x1b8>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d90c      	bls.n	8007cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cba:	4b65      	ldr	r3, [pc, #404]	; (8007e50 <HAL_RCC_ClockConfig+0x1b8>)
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cc2:	4b63      	ldr	r3, [pc, #396]	; (8007e50 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d001      	beq.n	8007cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0b8      	b.n	8007e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d020      	beq.n	8007d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cec:	4b59      	ldr	r3, [pc, #356]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	4a58      	ldr	r2, [pc, #352]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0308 	and.w	r3, r3, #8
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d04:	4b53      	ldr	r3, [pc, #332]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	4a52      	ldr	r2, [pc, #328]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d10:	4b50      	ldr	r3, [pc, #320]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	494d      	ldr	r1, [pc, #308]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d044      	beq.n	8007db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d107      	bne.n	8007d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d36:	4b47      	ldr	r3, [pc, #284]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d119      	bne.n	8007d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e07f      	b.n	8007e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d003      	beq.n	8007d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d107      	bne.n	8007d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d56:	4b3f      	ldr	r3, [pc, #252]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d109      	bne.n	8007d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e06f      	b.n	8007e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d66:	4b3b      	ldr	r3, [pc, #236]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e067      	b.n	8007e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d76:	4b37      	ldr	r3, [pc, #220]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f023 0203 	bic.w	r2, r3, #3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	4934      	ldr	r1, [pc, #208]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d88:	f7fe f938 	bl	8005ffc <HAL_GetTick>
 8007d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d8e:	e00a      	b.n	8007da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d90:	f7fe f934 	bl	8005ffc <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e04f      	b.n	8007e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007da6:	4b2b      	ldr	r3, [pc, #172]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 020c 	and.w	r2, r3, #12
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d1eb      	bne.n	8007d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007db8:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <HAL_RCC_ClockConfig+0x1b8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d20c      	bcs.n	8007de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dc6:	4b22      	ldr	r3, [pc, #136]	; (8007e50 <HAL_RCC_ClockConfig+0x1b8>)
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dce:	4b20      	ldr	r3, [pc, #128]	; (8007e50 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d001      	beq.n	8007de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e032      	b.n	8007e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d008      	beq.n	8007dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dec:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	4916      	ldr	r1, [pc, #88]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e0a:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	490e      	ldr	r1, [pc, #56]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e1e:	f000 f821 	bl	8007e64 <HAL_RCC_GetSysClockFreq>
 8007e22:	4602      	mov	r2, r0
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	091b      	lsrs	r3, r3, #4
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	490a      	ldr	r1, [pc, #40]	; (8007e58 <HAL_RCC_ClockConfig+0x1c0>)
 8007e30:	5ccb      	ldrb	r3, [r1, r3]
 8007e32:	fa22 f303 	lsr.w	r3, r2, r3
 8007e36:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <HAL_RCC_ClockConfig+0x1c4>)
 8007e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e3a:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <HAL_RCC_ClockConfig+0x1c8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe f898 	bl	8005f74 <HAL_InitTick>

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40023c00 	.word	0x40023c00
 8007e54:	40023800 	.word	0x40023800
 8007e58:	08009b68 	.word	0x08009b68
 8007e5c:	20000004 	.word	0x20000004
 8007e60:	200000dc 	.word	0x200000dc

08007e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	607b      	str	r3, [r7, #4]
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	2300      	movs	r3, #0
 8007e76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e7c:	4b67      	ldr	r3, [pc, #412]	; (800801c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f003 030c 	and.w	r3, r3, #12
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d00d      	beq.n	8007ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	f200 80bd 	bhi.w	8008008 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <HAL_RCC_GetSysClockFreq+0x34>
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	d003      	beq.n	8007e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e96:	e0b7      	b.n	8008008 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e98:	4b61      	ldr	r3, [pc, #388]	; (8008020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e9a:	60bb      	str	r3, [r7, #8]
       break;
 8007e9c:	e0b7      	b.n	800800e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e9e:	4b61      	ldr	r3, [pc, #388]	; (8008024 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007ea0:	60bb      	str	r3, [r7, #8]
      break;
 8007ea2:	e0b4      	b.n	800800e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ea4:	4b5d      	ldr	r3, [pc, #372]	; (800801c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eae:	4b5b      	ldr	r3, [pc, #364]	; (800801c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d04d      	beq.n	8007f56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eba:	4b58      	ldr	r3, [pc, #352]	; (800801c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	099b      	lsrs	r3, r3, #6
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	f04f 0300 	mov.w	r3, #0
 8007ec6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007eca:	f04f 0100 	mov.w	r1, #0
 8007ece:	ea02 0800 	and.w	r8, r2, r0
 8007ed2:	ea03 0901 	and.w	r9, r3, r1
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4649      	mov	r1, r9
 8007eda:	f04f 0200 	mov.w	r2, #0
 8007ede:	f04f 0300 	mov.w	r3, #0
 8007ee2:	014b      	lsls	r3, r1, #5
 8007ee4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ee8:	0142      	lsls	r2, r0, #5
 8007eea:	4610      	mov	r0, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	ebb0 0008 	subs.w	r0, r0, r8
 8007ef2:	eb61 0109 	sbc.w	r1, r1, r9
 8007ef6:	f04f 0200 	mov.w	r2, #0
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	018b      	lsls	r3, r1, #6
 8007f00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f04:	0182      	lsls	r2, r0, #6
 8007f06:	1a12      	subs	r2, r2, r0
 8007f08:	eb63 0301 	sbc.w	r3, r3, r1
 8007f0c:	f04f 0000 	mov.w	r0, #0
 8007f10:	f04f 0100 	mov.w	r1, #0
 8007f14:	00d9      	lsls	r1, r3, #3
 8007f16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f1a:	00d0      	lsls	r0, r2, #3
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	eb12 0208 	adds.w	r2, r2, r8
 8007f24:	eb43 0309 	adc.w	r3, r3, r9
 8007f28:	f04f 0000 	mov.w	r0, #0
 8007f2c:	f04f 0100 	mov.w	r1, #0
 8007f30:	0259      	lsls	r1, r3, #9
 8007f32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007f36:	0250      	lsls	r0, r2, #9
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4619      	mov	r1, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	f7f8 f9a2 	bl	8000290 <__aeabi_uldivmod>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4613      	mov	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e04a      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f56:	4b31      	ldr	r3, [pc, #196]	; (800801c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	099b      	lsrs	r3, r3, #6
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f04f 0300 	mov.w	r3, #0
 8007f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f66:	f04f 0100 	mov.w	r1, #0
 8007f6a:	ea02 0400 	and.w	r4, r2, r0
 8007f6e:	ea03 0501 	and.w	r5, r3, r1
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	f04f 0300 	mov.w	r3, #0
 8007f7e:	014b      	lsls	r3, r1, #5
 8007f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f84:	0142      	lsls	r2, r0, #5
 8007f86:	4610      	mov	r0, r2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	1b00      	subs	r0, r0, r4
 8007f8c:	eb61 0105 	sbc.w	r1, r1, r5
 8007f90:	f04f 0200 	mov.w	r2, #0
 8007f94:	f04f 0300 	mov.w	r3, #0
 8007f98:	018b      	lsls	r3, r1, #6
 8007f9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f9e:	0182      	lsls	r2, r0, #6
 8007fa0:	1a12      	subs	r2, r2, r0
 8007fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8007fa6:	f04f 0000 	mov.w	r0, #0
 8007faa:	f04f 0100 	mov.w	r1, #0
 8007fae:	00d9      	lsls	r1, r3, #3
 8007fb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fb4:	00d0      	lsls	r0, r2, #3
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	1912      	adds	r2, r2, r4
 8007fbc:	eb45 0303 	adc.w	r3, r5, r3
 8007fc0:	f04f 0000 	mov.w	r0, #0
 8007fc4:	f04f 0100 	mov.w	r1, #0
 8007fc8:	0299      	lsls	r1, r3, #10
 8007fca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007fce:	0290      	lsls	r0, r2, #10
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	f7f8 f956 	bl	8000290 <__aeabi_uldivmod>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4613      	mov	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fec:	4b0b      	ldr	r3, [pc, #44]	; (800801c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	0c1b      	lsrs	r3, r3, #16
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	fbb2 f3f3 	udiv	r3, r2, r3
 8008004:	60bb      	str	r3, [r7, #8]
      break;
 8008006:	e002      	b.n	800800e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008008:	4b05      	ldr	r3, [pc, #20]	; (8008020 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800800a:	60bb      	str	r3, [r7, #8]
      break;
 800800c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800800e:	68bb      	ldr	r3, [r7, #8]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800801a:	bf00      	nop
 800801c:	40023800 	.word	0x40023800
 8008020:	00f42400 	.word	0x00f42400
 8008024:	007a1200 	.word	0x007a1200

08008028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008028:	b480      	push	{r7}
 800802a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800802c:	4b03      	ldr	r3, [pc, #12]	; (800803c <HAL_RCC_GetHCLKFreq+0x14>)
 800802e:	681b      	ldr	r3, [r3, #0]
}
 8008030:	4618      	mov	r0, r3
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20000004 	.word	0x20000004

08008040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008044:	f7ff fff0 	bl	8008028 <HAL_RCC_GetHCLKFreq>
 8008048:	4602      	mov	r2, r0
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	0a9b      	lsrs	r3, r3, #10
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	4903      	ldr	r1, [pc, #12]	; (8008064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008056:	5ccb      	ldrb	r3, [r1, r3]
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800805c:	4618      	mov	r0, r3
 800805e:	bd80      	pop	{r7, pc}
 8008060:	40023800 	.word	0x40023800
 8008064:	08009b78 	.word	0x08009b78

08008068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800806c:	f7ff ffdc 	bl	8008028 <HAL_RCC_GetHCLKFreq>
 8008070:	4602      	mov	r2, r0
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	0b5b      	lsrs	r3, r3, #13
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	4903      	ldr	r1, [pc, #12]	; (800808c <HAL_RCC_GetPCLK2Freq+0x24>)
 800807e:	5ccb      	ldrb	r3, [r1, r3]
 8008080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008084:	4618      	mov	r0, r3
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40023800 	.word	0x40023800
 800808c:	08009b78 	.word	0x08009b78

08008090 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e041      	b.n	8008126 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7f8 fe08 	bl	8000ccc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f000 fafc 	bl	80086cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d109      	bne.n	8008158 <HAL_TIM_OC_Start_IT+0x28>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	bf14      	ite	ne
 8008150:	2301      	movne	r3, #1
 8008152:	2300      	moveq	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	e022      	b.n	800819e <HAL_TIM_OC_Start_IT+0x6e>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b04      	cmp	r3, #4
 800815c:	d109      	bne.n	8008172 <HAL_TIM_OC_Start_IT+0x42>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	bf14      	ite	ne
 800816a:	2301      	movne	r3, #1
 800816c:	2300      	moveq	r3, #0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	e015      	b.n	800819e <HAL_TIM_OC_Start_IT+0x6e>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b08      	cmp	r3, #8
 8008176:	d109      	bne.n	800818c <HAL_TIM_OC_Start_IT+0x5c>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b01      	cmp	r3, #1
 8008182:	bf14      	ite	ne
 8008184:	2301      	movne	r3, #1
 8008186:	2300      	moveq	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	e008      	b.n	800819e <HAL_TIM_OC_Start_IT+0x6e>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e0b3      	b.n	800830e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <HAL_TIM_OC_Start_IT+0x86>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b4:	e013      	b.n	80081de <HAL_TIM_OC_Start_IT+0xae>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d104      	bne.n	80081c6 <HAL_TIM_OC_Start_IT+0x96>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081c4:	e00b      	b.n	80081de <HAL_TIM_OC_Start_IT+0xae>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d104      	bne.n	80081d6 <HAL_TIM_OC_Start_IT+0xa6>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d4:	e003      	b.n	80081de <HAL_TIM_OC_Start_IT+0xae>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b0c      	cmp	r3, #12
 80081e2:	d841      	bhi.n	8008268 <HAL_TIM_OC_Start_IT+0x138>
 80081e4:	a201      	add	r2, pc, #4	; (adr r2, 80081ec <HAL_TIM_OC_Start_IT+0xbc>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	08008221 	.word	0x08008221
 80081f0:	08008269 	.word	0x08008269
 80081f4:	08008269 	.word	0x08008269
 80081f8:	08008269 	.word	0x08008269
 80081fc:	08008233 	.word	0x08008233
 8008200:	08008269 	.word	0x08008269
 8008204:	08008269 	.word	0x08008269
 8008208:	08008269 	.word	0x08008269
 800820c:	08008245 	.word	0x08008245
 8008210:	08008269 	.word	0x08008269
 8008214:	08008269 	.word	0x08008269
 8008218:	08008269 	.word	0x08008269
 800821c:	08008257 	.word	0x08008257
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0202 	orr.w	r2, r2, #2
 800822e:	60da      	str	r2, [r3, #12]
      break;
 8008230:	e01d      	b.n	800826e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0204 	orr.w	r2, r2, #4
 8008240:	60da      	str	r2, [r3, #12]
      break;
 8008242:	e014      	b.n	800826e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0208 	orr.w	r2, r2, #8
 8008252:	60da      	str	r2, [r3, #12]
      break;
 8008254:	e00b      	b.n	800826e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0210 	orr.w	r2, r2, #16
 8008264:	60da      	str	r2, [r3, #12]
      break;
 8008266:	e002      	b.n	800826e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	73fb      	strb	r3, [r7, #15]
      break;
 800826c:	bf00      	nop
  }

  if (status == HAL_OK)
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d14b      	bne.n	800830c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2201      	movs	r2, #1
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fc31 	bl	8008ae4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a24      	ldr	r2, [pc, #144]	; (8008318 <HAL_TIM_OC_Start_IT+0x1e8>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d107      	bne.n	800829c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800829a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1d      	ldr	r2, [pc, #116]	; (8008318 <HAL_TIM_OC_Start_IT+0x1e8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d018      	beq.n	80082d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ae:	d013      	beq.n	80082d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a19      	ldr	r2, [pc, #100]	; (800831c <HAL_TIM_OC_Start_IT+0x1ec>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00e      	beq.n	80082d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a18      	ldr	r2, [pc, #96]	; (8008320 <HAL_TIM_OC_Start_IT+0x1f0>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d009      	beq.n	80082d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a16      	ldr	r2, [pc, #88]	; (8008324 <HAL_TIM_OC_Start_IT+0x1f4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d004      	beq.n	80082d8 <HAL_TIM_OC_Start_IT+0x1a8>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a15      	ldr	r2, [pc, #84]	; (8008328 <HAL_TIM_OC_Start_IT+0x1f8>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d111      	bne.n	80082fc <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b06      	cmp	r3, #6
 80082e8:	d010      	beq.n	800830c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0201 	orr.w	r2, r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fa:	e007      	b.n	800830c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	40010000 	.word	0x40010000
 800831c:	40000400 	.word	0x40000400
 8008320:	40000800 	.word	0x40000800
 8008324:	40000c00 	.word	0x40000c00
 8008328:	40014000 	.word	0x40014000

0800832c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b02      	cmp	r3, #2
 8008340:	d122      	bne.n	8008388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	2b02      	cmp	r3, #2
 800834e:	d11b      	bne.n	8008388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f06f 0202 	mvn.w	r2, #2
 8008358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f98e 	bl	8008690 <HAL_TIM_IC_CaptureCallback>
 8008374:	e005      	b.n	8008382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7f8 fbce 	bl	8000b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f991 	bl	80086a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b04      	cmp	r3, #4
 8008394:	d122      	bne.n	80083dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d11b      	bne.n	80083dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f06f 0204 	mvn.w	r2, #4
 80083ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2202      	movs	r2, #2
 80083b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f964 	bl	8008690 <HAL_TIM_IC_CaptureCallback>
 80083c8:	e005      	b.n	80083d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7f8 fba4 	bl	8000b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f967 	bl	80086a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f003 0308 	and.w	r3, r3, #8
 80083e6:	2b08      	cmp	r3, #8
 80083e8:	d122      	bne.n	8008430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f003 0308 	and.w	r3, r3, #8
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d11b      	bne.n	8008430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f06f 0208 	mvn.w	r2, #8
 8008400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2204      	movs	r2, #4
 8008406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f93a 	bl	8008690 <HAL_TIM_IC_CaptureCallback>
 800841c:	e005      	b.n	800842a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7f8 fb7a 	bl	8000b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f93d 	bl	80086a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0310 	and.w	r3, r3, #16
 800843a:	2b10      	cmp	r3, #16
 800843c:	d122      	bne.n	8008484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b10      	cmp	r3, #16
 800844a:	d11b      	bne.n	8008484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0210 	mvn.w	r2, #16
 8008454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2208      	movs	r2, #8
 800845a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f910 	bl	8008690 <HAL_TIM_IC_CaptureCallback>
 8008470:	e005      	b.n	800847e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7f8 fb50 	bl	8000b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f913 	bl	80086a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b01      	cmp	r3, #1
 8008490:	d10e      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b01      	cmp	r3, #1
 800849e:	d107      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f06f 0201 	mvn.w	r2, #1
 80084a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f8e6 	bl	800867c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ba:	2b80      	cmp	r3, #128	; 0x80
 80084bc:	d10e      	bne.n	80084dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c8:	2b80      	cmp	r3, #128	; 0x80
 80084ca:	d107      	bne.n	80084dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fba2 	bl	8008c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d10e      	bne.n	8008508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d107      	bne.n	8008508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f8d8 	bl	80086b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b20      	cmp	r3, #32
 8008514:	d10e      	bne.n	8008534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b20      	cmp	r3, #32
 8008522:	d107      	bne.n	8008534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0220 	mvn.w	r2, #32
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fb6c 	bl	8008c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008556:	2302      	movs	r3, #2
 8008558:	e048      	b.n	80085ec <HAL_TIM_OC_ConfigChannel+0xb0>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b0c      	cmp	r3, #12
 8008566:	d839      	bhi.n	80085dc <HAL_TIM_OC_ConfigChannel+0xa0>
 8008568:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <HAL_TIM_OC_ConfigChannel+0x34>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	080085a5 	.word	0x080085a5
 8008574:	080085dd 	.word	0x080085dd
 8008578:	080085dd 	.word	0x080085dd
 800857c:	080085dd 	.word	0x080085dd
 8008580:	080085b3 	.word	0x080085b3
 8008584:	080085dd 	.word	0x080085dd
 8008588:	080085dd 	.word	0x080085dd
 800858c:	080085dd 	.word	0x080085dd
 8008590:	080085c1 	.word	0x080085c1
 8008594:	080085dd 	.word	0x080085dd
 8008598:	080085dd 	.word	0x080085dd
 800859c:	080085dd 	.word	0x080085dd
 80085a0:	080085cf 	.word	0x080085cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68b9      	ldr	r1, [r7, #8]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f90e 	bl	80087cc <TIM_OC1_SetConfig>
      break;
 80085b0:	e017      	b.n	80085e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f96d 	bl	8008898 <TIM_OC2_SetConfig>
      break;
 80085be:	e010      	b.n	80085e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 f9d2 	bl	8008970 <TIM_OC3_SetConfig>
      break;
 80085cc:	e009      	b.n	80085e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fa35 	bl	8008a44 <TIM_OC4_SetConfig>
      break;
 80085da:	e002      	b.n	80085e2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
      break;
 80085e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b0c      	cmp	r3, #12
 8008606:	d831      	bhi.n	800866c <HAL_TIM_ReadCapturedValue+0x78>
 8008608:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <HAL_TIM_ReadCapturedValue+0x1c>)
 800860a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860e:	bf00      	nop
 8008610:	08008645 	.word	0x08008645
 8008614:	0800866d 	.word	0x0800866d
 8008618:	0800866d 	.word	0x0800866d
 800861c:	0800866d 	.word	0x0800866d
 8008620:	0800864f 	.word	0x0800864f
 8008624:	0800866d 	.word	0x0800866d
 8008628:	0800866d 	.word	0x0800866d
 800862c:	0800866d 	.word	0x0800866d
 8008630:	08008659 	.word	0x08008659
 8008634:	0800866d 	.word	0x0800866d
 8008638:	0800866d 	.word	0x0800866d
 800863c:	0800866d 	.word	0x0800866d
 8008640:	08008663 	.word	0x08008663
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864a:	60fb      	str	r3, [r7, #12]

      break;
 800864c:	e00f      	b.n	800866e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	60fb      	str	r3, [r7, #12]

      break;
 8008656:	e00a      	b.n	800866e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865e:	60fb      	str	r3, [r7, #12]

      break;
 8008660:	e005      	b.n	800866e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008668:	60fb      	str	r3, [r7, #12]

      break;
 800866a:	e000      	b.n	800866e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800866c:	bf00      	nop
  }

  return tmpreg;
 800866e:	68fb      	ldr	r3, [r7, #12]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a34      	ldr	r2, [pc, #208]	; (80087b0 <TIM_Base_SetConfig+0xe4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00f      	beq.n	8008704 <TIM_Base_SetConfig+0x38>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ea:	d00b      	beq.n	8008704 <TIM_Base_SetConfig+0x38>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a31      	ldr	r2, [pc, #196]	; (80087b4 <TIM_Base_SetConfig+0xe8>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_Base_SetConfig+0x38>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a30      	ldr	r2, [pc, #192]	; (80087b8 <TIM_Base_SetConfig+0xec>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_Base_SetConfig+0x38>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a2f      	ldr	r2, [pc, #188]	; (80087bc <TIM_Base_SetConfig+0xf0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d108      	bne.n	8008716 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a25      	ldr	r2, [pc, #148]	; (80087b0 <TIM_Base_SetConfig+0xe4>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d01b      	beq.n	8008756 <TIM_Base_SetConfig+0x8a>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008724:	d017      	beq.n	8008756 <TIM_Base_SetConfig+0x8a>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a22      	ldr	r2, [pc, #136]	; (80087b4 <TIM_Base_SetConfig+0xe8>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d013      	beq.n	8008756 <TIM_Base_SetConfig+0x8a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a21      	ldr	r2, [pc, #132]	; (80087b8 <TIM_Base_SetConfig+0xec>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00f      	beq.n	8008756 <TIM_Base_SetConfig+0x8a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a20      	ldr	r2, [pc, #128]	; (80087bc <TIM_Base_SetConfig+0xf0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00b      	beq.n	8008756 <TIM_Base_SetConfig+0x8a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <TIM_Base_SetConfig+0xf4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d007      	beq.n	8008756 <TIM_Base_SetConfig+0x8a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a1e      	ldr	r2, [pc, #120]	; (80087c4 <TIM_Base_SetConfig+0xf8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d003      	beq.n	8008756 <TIM_Base_SetConfig+0x8a>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <TIM_Base_SetConfig+0xfc>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d108      	bne.n	8008768 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800875c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	4313      	orrs	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a08      	ldr	r2, [pc, #32]	; (80087b0 <TIM_Base_SetConfig+0xe4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d103      	bne.n	800879c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	691a      	ldr	r2, [r3, #16]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	615a      	str	r2, [r3, #20]
}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	40010000 	.word	0x40010000
 80087b4:	40000400 	.word	0x40000400
 80087b8:	40000800 	.word	0x40000800
 80087bc:	40000c00 	.word	0x40000c00
 80087c0:	40014000 	.word	0x40014000
 80087c4:	40014400 	.word	0x40014400
 80087c8:	40014800 	.word	0x40014800

080087cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	f023 0201 	bic.w	r2, r3, #1
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0303 	bic.w	r3, r3, #3
 8008802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f023 0302 	bic.w	r3, r3, #2
 8008814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a1c      	ldr	r2, [pc, #112]	; (8008894 <TIM_OC1_SetConfig+0xc8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d10c      	bne.n	8008842 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f023 0308 	bic.w	r3, r3, #8
 800882e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f023 0304 	bic.w	r3, r3, #4
 8008840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a13      	ldr	r2, [pc, #76]	; (8008894 <TIM_OC1_SetConfig+0xc8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d111      	bne.n	800886e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	4313      	orrs	r3, r2
 8008862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	621a      	str	r2, [r3, #32]
}
 8008888:	bf00      	nop
 800888a:	371c      	adds	r7, #28
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	40010000 	.word	0x40010000

08008898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f023 0210 	bic.w	r2, r3, #16
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f023 0320 	bic.w	r3, r3, #32
 80088e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1e      	ldr	r2, [pc, #120]	; (800896c <TIM_OC2_SetConfig+0xd4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d10d      	bne.n	8008914 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a15      	ldr	r2, [pc, #84]	; (800896c <TIM_OC2_SetConfig+0xd4>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d113      	bne.n	8008944 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800892a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4313      	orrs	r3, r2
 8008936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	4313      	orrs	r3, r2
 8008942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	621a      	str	r2, [r3, #32]
}
 800895e:	bf00      	nop
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	40010000 	.word	0x40010000

08008970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008970:	b480      	push	{r7}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800899e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 0303 	bic.w	r3, r3, #3
 80089a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	021b      	lsls	r3, r3, #8
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1d      	ldr	r2, [pc, #116]	; (8008a40 <TIM_OC3_SetConfig+0xd0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d10d      	bne.n	80089ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a14      	ldr	r2, [pc, #80]	; (8008a40 <TIM_OC3_SetConfig+0xd0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d113      	bne.n	8008a1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	621a      	str	r2, [r3, #32]
}
 8008a34:	bf00      	nop
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	40010000 	.word	0x40010000

08008a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	031b      	lsls	r3, r3, #12
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a10      	ldr	r2, [pc, #64]	; (8008ae0 <TIM_OC4_SetConfig+0x9c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d109      	bne.n	8008ab8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	019b      	lsls	r3, r3, #6
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	621a      	str	r2, [r3, #32]
}
 8008ad2:	bf00      	nop
 8008ad4:	371c      	adds	r7, #28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	40010000 	.word	0x40010000

08008ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f003 031f 	and.w	r3, r3, #31
 8008af6:	2201      	movs	r2, #1
 8008af8:	fa02 f303 	lsl.w	r3, r2, r3
 8008afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a1a      	ldr	r2, [r3, #32]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	43db      	mvns	r3, r3
 8008b06:	401a      	ands	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6a1a      	ldr	r2, [r3, #32]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f003 031f 	and.w	r3, r3, #31
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
	...

08008b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e050      	b.n	8008bea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a1c      	ldr	r2, [pc, #112]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d018      	beq.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b94:	d013      	beq.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a18      	ldr	r2, [pc, #96]	; (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00e      	beq.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a16      	ldr	r2, [pc, #88]	; (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d009      	beq.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a15      	ldr	r2, [pc, #84]	; (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d004      	beq.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a13      	ldr	r2, [pc, #76]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d10c      	bne.n	8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40010000 	.word	0x40010000
 8008bfc:	40000400 	.word	0x40000400
 8008c00:	40000800 	.word	0x40000800
 8008c04:	40000c00 	.word	0x40000c00
 8008c08:	40014000 	.word	0x40014000

08008c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e03f      	b.n	8008cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7f8 f85e 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2224      	movs	r2, #36	; 0x24
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f929 	bl	8008ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	691a      	ldr	r2, [r3, #16]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b08a      	sub	sp, #40	; 0x28
 8008cd2:	af02      	add	r7, sp, #8
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b20      	cmp	r3, #32
 8008cec:	d17c      	bne.n	8008de8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <HAL_UART_Transmit+0x2c>
 8008cf4:	88fb      	ldrh	r3, [r7, #6]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e075      	b.n	8008dea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <HAL_UART_Transmit+0x3e>
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e06e      	b.n	8008dea <HAL_UART_Transmit+0x11c>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2221      	movs	r2, #33	; 0x21
 8008d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d22:	f7fd f96b 	bl	8005ffc <HAL_GetTick>
 8008d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	88fa      	ldrh	r2, [r7, #6]
 8008d32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3c:	d108      	bne.n	8008d50 <HAL_UART_Transmit+0x82>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	61bb      	str	r3, [r7, #24]
 8008d4e:	e003      	b.n	8008d58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d54:	2300      	movs	r3, #0
 8008d56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008d60:	e02a      	b.n	8008db8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2180      	movs	r1, #128	; 0x80
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 f840 	bl	8008df2 <UART_WaitOnFlagUntilTimeout>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e036      	b.n	8008dea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10b      	bne.n	8008d9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	3302      	adds	r3, #2
 8008d96:	61bb      	str	r3, [r7, #24]
 8008d98:	e007      	b.n	8008daa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	781a      	ldrb	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	3301      	adds	r3, #1
 8008da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1cf      	bne.n	8008d62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	2140      	movs	r1, #64	; 0x40
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 f810 	bl	8008df2 <UART_WaitOnFlagUntilTimeout>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e006      	b.n	8008dea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	e000      	b.n	8008dea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008de8:	2302      	movs	r3, #2
  }
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b090      	sub	sp, #64	; 0x40
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	603b      	str	r3, [r7, #0]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e02:	e050      	b.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d04c      	beq.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e12:	f7fd f8f3 	bl	8005ffc <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d241      	bcs.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	330c      	adds	r3, #12
 8008e28:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	330c      	adds	r3, #12
 8008e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e42:	637a      	str	r2, [r7, #52]	; 0x34
 8008e44:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e5      	bne.n	8008e22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	613b      	str	r3, [r7, #16]
   return(result);
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3314      	adds	r3, #20
 8008e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e76:	623a      	str	r2, [r7, #32]
 8008e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	69f9      	ldr	r1, [r7, #28]
 8008e7c:	6a3a      	ldr	r2, [r7, #32]
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e00f      	b.n	8008ec6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	bf0c      	ite	eq
 8008eb6:	2301      	moveq	r3, #1
 8008eb8:	2300      	movne	r3, #0
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d09f      	beq.n	8008e04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3740      	adds	r7, #64	; 0x40
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	b09f      	sub	sp, #124	; 0x7c
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee6:	68d9      	ldr	r1, [r3, #12]
 8008ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	ea40 0301 	orr.w	r3, r0, r1
 8008ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef4:	689a      	ldr	r2, [r3, #8]
 8008ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	431a      	orrs	r2, r3
 8008f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f14:	f021 010c 	bic.w	r1, r1, #12
 8008f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2e:	6999      	ldr	r1, [r3, #24]
 8008f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	ea40 0301 	orr.w	r3, r0, r1
 8008f38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4bc5      	ldr	r3, [pc, #788]	; (8009254 <UART_SetConfig+0x384>)
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d004      	beq.n	8008f4e <UART_SetConfig+0x7e>
 8008f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	4bc3      	ldr	r3, [pc, #780]	; (8009258 <UART_SetConfig+0x388>)
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d103      	bne.n	8008f56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f4e:	f7ff f88b 	bl	8008068 <HAL_RCC_GetPCLK2Freq>
 8008f52:	6778      	str	r0, [r7, #116]	; 0x74
 8008f54:	e002      	b.n	8008f5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f56:	f7ff f873 	bl	8008040 <HAL_RCC_GetPCLK1Freq>
 8008f5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f64:	f040 80b6 	bne.w	80090d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f6a:	461c      	mov	r4, r3
 8008f6c:	f04f 0500 	mov.w	r5, #0
 8008f70:	4622      	mov	r2, r4
 8008f72:	462b      	mov	r3, r5
 8008f74:	1891      	adds	r1, r2, r2
 8008f76:	6439      	str	r1, [r7, #64]	; 0x40
 8008f78:	415b      	adcs	r3, r3
 8008f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f80:	1912      	adds	r2, r2, r4
 8008f82:	eb45 0303 	adc.w	r3, r5, r3
 8008f86:	f04f 0000 	mov.w	r0, #0
 8008f8a:	f04f 0100 	mov.w	r1, #0
 8008f8e:	00d9      	lsls	r1, r3, #3
 8008f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f94:	00d0      	lsls	r0, r2, #3
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	1911      	adds	r1, r2, r4
 8008f9c:	6639      	str	r1, [r7, #96]	; 0x60
 8008f9e:	416b      	adcs	r3, r5
 8008fa0:	667b      	str	r3, [r7, #100]	; 0x64
 8008fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f04f 0300 	mov.w	r3, #0
 8008fac:	1891      	adds	r1, r2, r2
 8008fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fb0:	415b      	adcs	r3, r3
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fb8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008fbc:	f7f7 f968 	bl	8000290 <__aeabi_uldivmod>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4ba5      	ldr	r3, [pc, #660]	; (800925c <UART_SetConfig+0x38c>)
 8008fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	011e      	lsls	r6, r3, #4
 8008fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fd0:	461c      	mov	r4, r3
 8008fd2:	f04f 0500 	mov.w	r5, #0
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	462b      	mov	r3, r5
 8008fda:	1891      	adds	r1, r2, r2
 8008fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8008fde:	415b      	adcs	r3, r3
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fe2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008fe6:	1912      	adds	r2, r2, r4
 8008fe8:	eb45 0303 	adc.w	r3, r5, r3
 8008fec:	f04f 0000 	mov.w	r0, #0
 8008ff0:	f04f 0100 	mov.w	r1, #0
 8008ff4:	00d9      	lsls	r1, r3, #3
 8008ff6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ffa:	00d0      	lsls	r0, r2, #3
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	1911      	adds	r1, r2, r4
 8009002:	65b9      	str	r1, [r7, #88]	; 0x58
 8009004:	416b      	adcs	r3, r5
 8009006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	461a      	mov	r2, r3
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	1891      	adds	r1, r2, r2
 8009014:	62b9      	str	r1, [r7, #40]	; 0x28
 8009016:	415b      	adcs	r3, r3
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800901a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800901e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009022:	f7f7 f935 	bl	8000290 <__aeabi_uldivmod>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4b8c      	ldr	r3, [pc, #560]	; (800925c <UART_SetConfig+0x38c>)
 800902c:	fba3 1302 	umull	r1, r3, r3, r2
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	2164      	movs	r1, #100	; 0x64
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	3332      	adds	r3, #50	; 0x32
 800903e:	4a87      	ldr	r2, [pc, #540]	; (800925c <UART_SetConfig+0x38c>)
 8009040:	fba2 2303 	umull	r2, r3, r2, r3
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800904c:	441e      	add	r6, r3
 800904e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009050:	4618      	mov	r0, r3
 8009052:	f04f 0100 	mov.w	r1, #0
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	1894      	adds	r4, r2, r2
 800905c:	623c      	str	r4, [r7, #32]
 800905e:	415b      	adcs	r3, r3
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
 8009062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009066:	1812      	adds	r2, r2, r0
 8009068:	eb41 0303 	adc.w	r3, r1, r3
 800906c:	f04f 0400 	mov.w	r4, #0
 8009070:	f04f 0500 	mov.w	r5, #0
 8009074:	00dd      	lsls	r5, r3, #3
 8009076:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800907a:	00d4      	lsls	r4, r2, #3
 800907c:	4622      	mov	r2, r4
 800907e:	462b      	mov	r3, r5
 8009080:	1814      	adds	r4, r2, r0
 8009082:	653c      	str	r4, [r7, #80]	; 0x50
 8009084:	414b      	adcs	r3, r1
 8009086:	657b      	str	r3, [r7, #84]	; 0x54
 8009088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	461a      	mov	r2, r3
 800908e:	f04f 0300 	mov.w	r3, #0
 8009092:	1891      	adds	r1, r2, r2
 8009094:	61b9      	str	r1, [r7, #24]
 8009096:	415b      	adcs	r3, r3
 8009098:	61fb      	str	r3, [r7, #28]
 800909a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800909e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80090a2:	f7f7 f8f5 	bl	8000290 <__aeabi_uldivmod>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4b6c      	ldr	r3, [pc, #432]	; (800925c <UART_SetConfig+0x38c>)
 80090ac:	fba3 1302 	umull	r1, r3, r3, r2
 80090b0:	095b      	lsrs	r3, r3, #5
 80090b2:	2164      	movs	r1, #100	; 0x64
 80090b4:	fb01 f303 	mul.w	r3, r1, r3
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	3332      	adds	r3, #50	; 0x32
 80090be:	4a67      	ldr	r2, [pc, #412]	; (800925c <UART_SetConfig+0x38c>)
 80090c0:	fba2 2303 	umull	r2, r3, r2, r3
 80090c4:	095b      	lsrs	r3, r3, #5
 80090c6:	f003 0207 	and.w	r2, r3, #7
 80090ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4432      	add	r2, r6
 80090d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090d2:	e0b9      	b.n	8009248 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090d6:	461c      	mov	r4, r3
 80090d8:	f04f 0500 	mov.w	r5, #0
 80090dc:	4622      	mov	r2, r4
 80090de:	462b      	mov	r3, r5
 80090e0:	1891      	adds	r1, r2, r2
 80090e2:	6139      	str	r1, [r7, #16]
 80090e4:	415b      	adcs	r3, r3
 80090e6:	617b      	str	r3, [r7, #20]
 80090e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090ec:	1912      	adds	r2, r2, r4
 80090ee:	eb45 0303 	adc.w	r3, r5, r3
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f04f 0100 	mov.w	r1, #0
 80090fa:	00d9      	lsls	r1, r3, #3
 80090fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009100:	00d0      	lsls	r0, r2, #3
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	eb12 0804 	adds.w	r8, r2, r4
 800910a:	eb43 0905 	adc.w	r9, r3, r5
 800910e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	4618      	mov	r0, r3
 8009114:	f04f 0100 	mov.w	r1, #0
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	008b      	lsls	r3, r1, #2
 8009122:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009126:	0082      	lsls	r2, r0, #2
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 f8b0 	bl	8000290 <__aeabi_uldivmod>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4b49      	ldr	r3, [pc, #292]	; (800925c <UART_SetConfig+0x38c>)
 8009136:	fba3 2302 	umull	r2, r3, r3, r2
 800913a:	095b      	lsrs	r3, r3, #5
 800913c:	011e      	lsls	r6, r3, #4
 800913e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009140:	4618      	mov	r0, r3
 8009142:	f04f 0100 	mov.w	r1, #0
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	1894      	adds	r4, r2, r2
 800914c:	60bc      	str	r4, [r7, #8]
 800914e:	415b      	adcs	r3, r3
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009156:	1812      	adds	r2, r2, r0
 8009158:	eb41 0303 	adc.w	r3, r1, r3
 800915c:	f04f 0400 	mov.w	r4, #0
 8009160:	f04f 0500 	mov.w	r5, #0
 8009164:	00dd      	lsls	r5, r3, #3
 8009166:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800916a:	00d4      	lsls	r4, r2, #3
 800916c:	4622      	mov	r2, r4
 800916e:	462b      	mov	r3, r5
 8009170:	1814      	adds	r4, r2, r0
 8009172:	64bc      	str	r4, [r7, #72]	; 0x48
 8009174:	414b      	adcs	r3, r1
 8009176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	f04f 0100 	mov.w	r1, #0
 8009182:	f04f 0200 	mov.w	r2, #0
 8009186:	f04f 0300 	mov.w	r3, #0
 800918a:	008b      	lsls	r3, r1, #2
 800918c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009190:	0082      	lsls	r2, r0, #2
 8009192:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009196:	f7f7 f87b 	bl	8000290 <__aeabi_uldivmod>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4b2f      	ldr	r3, [pc, #188]	; (800925c <UART_SetConfig+0x38c>)
 80091a0:	fba3 1302 	umull	r1, r3, r3, r2
 80091a4:	095b      	lsrs	r3, r3, #5
 80091a6:	2164      	movs	r1, #100	; 0x64
 80091a8:	fb01 f303 	mul.w	r3, r1, r3
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	3332      	adds	r3, #50	; 0x32
 80091b2:	4a2a      	ldr	r2, [pc, #168]	; (800925c <UART_SetConfig+0x38c>)
 80091b4:	fba2 2303 	umull	r2, r3, r2, r3
 80091b8:	095b      	lsrs	r3, r3, #5
 80091ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091be:	441e      	add	r6, r3
 80091c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091c2:	4618      	mov	r0, r3
 80091c4:	f04f 0100 	mov.w	r1, #0
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	1894      	adds	r4, r2, r2
 80091ce:	603c      	str	r4, [r7, #0]
 80091d0:	415b      	adcs	r3, r3
 80091d2:	607b      	str	r3, [r7, #4]
 80091d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d8:	1812      	adds	r2, r2, r0
 80091da:	eb41 0303 	adc.w	r3, r1, r3
 80091de:	f04f 0400 	mov.w	r4, #0
 80091e2:	f04f 0500 	mov.w	r5, #0
 80091e6:	00dd      	lsls	r5, r3, #3
 80091e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091ec:	00d4      	lsls	r4, r2, #3
 80091ee:	4622      	mov	r2, r4
 80091f0:	462b      	mov	r3, r5
 80091f2:	eb12 0a00 	adds.w	sl, r2, r0
 80091f6:	eb43 0b01 	adc.w	fp, r3, r1
 80091fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	4618      	mov	r0, r3
 8009200:	f04f 0100 	mov.w	r1, #0
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	f04f 0300 	mov.w	r3, #0
 800920c:	008b      	lsls	r3, r1, #2
 800920e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009212:	0082      	lsls	r2, r0, #2
 8009214:	4650      	mov	r0, sl
 8009216:	4659      	mov	r1, fp
 8009218:	f7f7 f83a 	bl	8000290 <__aeabi_uldivmod>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4b0e      	ldr	r3, [pc, #56]	; (800925c <UART_SetConfig+0x38c>)
 8009222:	fba3 1302 	umull	r1, r3, r3, r2
 8009226:	095b      	lsrs	r3, r3, #5
 8009228:	2164      	movs	r1, #100	; 0x64
 800922a:	fb01 f303 	mul.w	r3, r1, r3
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	3332      	adds	r3, #50	; 0x32
 8009234:	4a09      	ldr	r2, [pc, #36]	; (800925c <UART_SetConfig+0x38c>)
 8009236:	fba2 2303 	umull	r2, r3, r2, r3
 800923a:	095b      	lsrs	r3, r3, #5
 800923c:	f003 020f 	and.w	r2, r3, #15
 8009240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4432      	add	r2, r6
 8009246:	609a      	str	r2, [r3, #8]
}
 8009248:	bf00      	nop
 800924a:	377c      	adds	r7, #124	; 0x7c
 800924c:	46bd      	mov	sp, r7
 800924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009252:	bf00      	nop
 8009254:	40011000 	.word	0x40011000
 8009258:	40011400 	.word	0x40011400
 800925c:	51eb851f 	.word	0x51eb851f

08009260 <__errno>:
 8009260:	4b01      	ldr	r3, [pc, #4]	; (8009268 <__errno+0x8>)
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	200000e4 	.word	0x200000e4

0800926c <__libc_init_array>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	4d0d      	ldr	r5, [pc, #52]	; (80092a4 <__libc_init_array+0x38>)
 8009270:	4c0d      	ldr	r4, [pc, #52]	; (80092a8 <__libc_init_array+0x3c>)
 8009272:	1b64      	subs	r4, r4, r5
 8009274:	10a4      	asrs	r4, r4, #2
 8009276:	2600      	movs	r6, #0
 8009278:	42a6      	cmp	r6, r4
 800927a:	d109      	bne.n	8009290 <__libc_init_array+0x24>
 800927c:	4d0b      	ldr	r5, [pc, #44]	; (80092ac <__libc_init_array+0x40>)
 800927e:	4c0c      	ldr	r4, [pc, #48]	; (80092b0 <__libc_init_array+0x44>)
 8009280:	f000 fc4e 	bl	8009b20 <_init>
 8009284:	1b64      	subs	r4, r4, r5
 8009286:	10a4      	asrs	r4, r4, #2
 8009288:	2600      	movs	r6, #0
 800928a:	42a6      	cmp	r6, r4
 800928c:	d105      	bne.n	800929a <__libc_init_array+0x2e>
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	f855 3b04 	ldr.w	r3, [r5], #4
 8009294:	4798      	blx	r3
 8009296:	3601      	adds	r6, #1
 8009298:	e7ee      	b.n	8009278 <__libc_init_array+0xc>
 800929a:	f855 3b04 	ldr.w	r3, [r5], #4
 800929e:	4798      	blx	r3
 80092a0:	3601      	adds	r6, #1
 80092a2:	e7f2      	b.n	800928a <__libc_init_array+0x1e>
 80092a4:	08009bbc 	.word	0x08009bbc
 80092a8:	08009bbc 	.word	0x08009bbc
 80092ac:	08009bbc 	.word	0x08009bbc
 80092b0:	08009bc0 	.word	0x08009bc0

080092b4 <memset>:
 80092b4:	4402      	add	r2, r0
 80092b6:	4603      	mov	r3, r0
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d100      	bne.n	80092be <memset+0xa>
 80092bc:	4770      	bx	lr
 80092be:	f803 1b01 	strb.w	r1, [r3], #1
 80092c2:	e7f9      	b.n	80092b8 <memset+0x4>

080092c4 <siprintf>:
 80092c4:	b40e      	push	{r1, r2, r3}
 80092c6:	b500      	push	{lr}
 80092c8:	b09c      	sub	sp, #112	; 0x70
 80092ca:	ab1d      	add	r3, sp, #116	; 0x74
 80092cc:	9002      	str	r0, [sp, #8]
 80092ce:	9006      	str	r0, [sp, #24]
 80092d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092d4:	4809      	ldr	r0, [pc, #36]	; (80092fc <siprintf+0x38>)
 80092d6:	9107      	str	r1, [sp, #28]
 80092d8:	9104      	str	r1, [sp, #16]
 80092da:	4909      	ldr	r1, [pc, #36]	; (8009300 <siprintf+0x3c>)
 80092dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e0:	9105      	str	r1, [sp, #20]
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	a902      	add	r1, sp, #8
 80092e8:	f000 f868 	bl	80093bc <_svfiprintf_r>
 80092ec:	9b02      	ldr	r3, [sp, #8]
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	b01c      	add	sp, #112	; 0x70
 80092f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f8:	b003      	add	sp, #12
 80092fa:	4770      	bx	lr
 80092fc:	200000e4 	.word	0x200000e4
 8009300:	ffff0208 	.word	0xffff0208

08009304 <__ssputs_r>:
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	688e      	ldr	r6, [r1, #8]
 800930a:	429e      	cmp	r6, r3
 800930c:	4682      	mov	sl, r0
 800930e:	460c      	mov	r4, r1
 8009310:	4690      	mov	r8, r2
 8009312:	461f      	mov	r7, r3
 8009314:	d838      	bhi.n	8009388 <__ssputs_r+0x84>
 8009316:	898a      	ldrh	r2, [r1, #12]
 8009318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800931c:	d032      	beq.n	8009384 <__ssputs_r+0x80>
 800931e:	6825      	ldr	r5, [r4, #0]
 8009320:	6909      	ldr	r1, [r1, #16]
 8009322:	eba5 0901 	sub.w	r9, r5, r1
 8009326:	6965      	ldr	r5, [r4, #20]
 8009328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800932c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009330:	3301      	adds	r3, #1
 8009332:	444b      	add	r3, r9
 8009334:	106d      	asrs	r5, r5, #1
 8009336:	429d      	cmp	r5, r3
 8009338:	bf38      	it	cc
 800933a:	461d      	movcc	r5, r3
 800933c:	0553      	lsls	r3, r2, #21
 800933e:	d531      	bpl.n	80093a4 <__ssputs_r+0xa0>
 8009340:	4629      	mov	r1, r5
 8009342:	f000 fb47 	bl	80099d4 <_malloc_r>
 8009346:	4606      	mov	r6, r0
 8009348:	b950      	cbnz	r0, 8009360 <__ssputs_r+0x5c>
 800934a:	230c      	movs	r3, #12
 800934c:	f8ca 3000 	str.w	r3, [sl]
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009360:	6921      	ldr	r1, [r4, #16]
 8009362:	464a      	mov	r2, r9
 8009364:	f000 fabe 	bl	80098e4 <memcpy>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800936e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009372:	81a3      	strh	r3, [r4, #12]
 8009374:	6126      	str	r6, [r4, #16]
 8009376:	6165      	str	r5, [r4, #20]
 8009378:	444e      	add	r6, r9
 800937a:	eba5 0509 	sub.w	r5, r5, r9
 800937e:	6026      	str	r6, [r4, #0]
 8009380:	60a5      	str	r5, [r4, #8]
 8009382:	463e      	mov	r6, r7
 8009384:	42be      	cmp	r6, r7
 8009386:	d900      	bls.n	800938a <__ssputs_r+0x86>
 8009388:	463e      	mov	r6, r7
 800938a:	4632      	mov	r2, r6
 800938c:	6820      	ldr	r0, [r4, #0]
 800938e:	4641      	mov	r1, r8
 8009390:	f000 fab6 	bl	8009900 <memmove>
 8009394:	68a3      	ldr	r3, [r4, #8]
 8009396:	6822      	ldr	r2, [r4, #0]
 8009398:	1b9b      	subs	r3, r3, r6
 800939a:	4432      	add	r2, r6
 800939c:	60a3      	str	r3, [r4, #8]
 800939e:	6022      	str	r2, [r4, #0]
 80093a0:	2000      	movs	r0, #0
 80093a2:	e7db      	b.n	800935c <__ssputs_r+0x58>
 80093a4:	462a      	mov	r2, r5
 80093a6:	f000 fb6f 	bl	8009a88 <_realloc_r>
 80093aa:	4606      	mov	r6, r0
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1e1      	bne.n	8009374 <__ssputs_r+0x70>
 80093b0:	6921      	ldr	r1, [r4, #16]
 80093b2:	4650      	mov	r0, sl
 80093b4:	f000 fabe 	bl	8009934 <_free_r>
 80093b8:	e7c7      	b.n	800934a <__ssputs_r+0x46>
	...

080093bc <_svfiprintf_r>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	4698      	mov	r8, r3
 80093c2:	898b      	ldrh	r3, [r1, #12]
 80093c4:	061b      	lsls	r3, r3, #24
 80093c6:	b09d      	sub	sp, #116	; 0x74
 80093c8:	4607      	mov	r7, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	4614      	mov	r4, r2
 80093ce:	d50e      	bpl.n	80093ee <_svfiprintf_r+0x32>
 80093d0:	690b      	ldr	r3, [r1, #16]
 80093d2:	b963      	cbnz	r3, 80093ee <_svfiprintf_r+0x32>
 80093d4:	2140      	movs	r1, #64	; 0x40
 80093d6:	f000 fafd 	bl	80099d4 <_malloc_r>
 80093da:	6028      	str	r0, [r5, #0]
 80093dc:	6128      	str	r0, [r5, #16]
 80093de:	b920      	cbnz	r0, 80093ea <_svfiprintf_r+0x2e>
 80093e0:	230c      	movs	r3, #12
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295
 80093e8:	e0d1      	b.n	800958e <_svfiprintf_r+0x1d2>
 80093ea:	2340      	movs	r3, #64	; 0x40
 80093ec:	616b      	str	r3, [r5, #20]
 80093ee:	2300      	movs	r3, #0
 80093f0:	9309      	str	r3, [sp, #36]	; 0x24
 80093f2:	2320      	movs	r3, #32
 80093f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093fc:	2330      	movs	r3, #48	; 0x30
 80093fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80095a8 <_svfiprintf_r+0x1ec>
 8009402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009406:	f04f 0901 	mov.w	r9, #1
 800940a:	4623      	mov	r3, r4
 800940c:	469a      	mov	sl, r3
 800940e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009412:	b10a      	cbz	r2, 8009418 <_svfiprintf_r+0x5c>
 8009414:	2a25      	cmp	r2, #37	; 0x25
 8009416:	d1f9      	bne.n	800940c <_svfiprintf_r+0x50>
 8009418:	ebba 0b04 	subs.w	fp, sl, r4
 800941c:	d00b      	beq.n	8009436 <_svfiprintf_r+0x7a>
 800941e:	465b      	mov	r3, fp
 8009420:	4622      	mov	r2, r4
 8009422:	4629      	mov	r1, r5
 8009424:	4638      	mov	r0, r7
 8009426:	f7ff ff6d 	bl	8009304 <__ssputs_r>
 800942a:	3001      	adds	r0, #1
 800942c:	f000 80aa 	beq.w	8009584 <_svfiprintf_r+0x1c8>
 8009430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009432:	445a      	add	r2, fp
 8009434:	9209      	str	r2, [sp, #36]	; 0x24
 8009436:	f89a 3000 	ldrb.w	r3, [sl]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80a2 	beq.w	8009584 <_svfiprintf_r+0x1c8>
 8009440:	2300      	movs	r3, #0
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800944a:	f10a 0a01 	add.w	sl, sl, #1
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	9307      	str	r3, [sp, #28]
 8009452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009456:	931a      	str	r3, [sp, #104]	; 0x68
 8009458:	4654      	mov	r4, sl
 800945a:	2205      	movs	r2, #5
 800945c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009460:	4851      	ldr	r0, [pc, #324]	; (80095a8 <_svfiprintf_r+0x1ec>)
 8009462:	f7f6 fec5 	bl	80001f0 <memchr>
 8009466:	9a04      	ldr	r2, [sp, #16]
 8009468:	b9d8      	cbnz	r0, 80094a2 <_svfiprintf_r+0xe6>
 800946a:	06d0      	lsls	r0, r2, #27
 800946c:	bf44      	itt	mi
 800946e:	2320      	movmi	r3, #32
 8009470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009474:	0711      	lsls	r1, r2, #28
 8009476:	bf44      	itt	mi
 8009478:	232b      	movmi	r3, #43	; 0x2b
 800947a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800947e:	f89a 3000 	ldrb.w	r3, [sl]
 8009482:	2b2a      	cmp	r3, #42	; 0x2a
 8009484:	d015      	beq.n	80094b2 <_svfiprintf_r+0xf6>
 8009486:	9a07      	ldr	r2, [sp, #28]
 8009488:	4654      	mov	r4, sl
 800948a:	2000      	movs	r0, #0
 800948c:	f04f 0c0a 	mov.w	ip, #10
 8009490:	4621      	mov	r1, r4
 8009492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009496:	3b30      	subs	r3, #48	; 0x30
 8009498:	2b09      	cmp	r3, #9
 800949a:	d94e      	bls.n	800953a <_svfiprintf_r+0x17e>
 800949c:	b1b0      	cbz	r0, 80094cc <_svfiprintf_r+0x110>
 800949e:	9207      	str	r2, [sp, #28]
 80094a0:	e014      	b.n	80094cc <_svfiprintf_r+0x110>
 80094a2:	eba0 0308 	sub.w	r3, r0, r8
 80094a6:	fa09 f303 	lsl.w	r3, r9, r3
 80094aa:	4313      	orrs	r3, r2
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	46a2      	mov	sl, r4
 80094b0:	e7d2      	b.n	8009458 <_svfiprintf_r+0x9c>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	1d19      	adds	r1, r3, #4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	9103      	str	r1, [sp, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bfbb      	ittet	lt
 80094be:	425b      	neglt	r3, r3
 80094c0:	f042 0202 	orrlt.w	r2, r2, #2
 80094c4:	9307      	strge	r3, [sp, #28]
 80094c6:	9307      	strlt	r3, [sp, #28]
 80094c8:	bfb8      	it	lt
 80094ca:	9204      	strlt	r2, [sp, #16]
 80094cc:	7823      	ldrb	r3, [r4, #0]
 80094ce:	2b2e      	cmp	r3, #46	; 0x2e
 80094d0:	d10c      	bne.n	80094ec <_svfiprintf_r+0x130>
 80094d2:	7863      	ldrb	r3, [r4, #1]
 80094d4:	2b2a      	cmp	r3, #42	; 0x2a
 80094d6:	d135      	bne.n	8009544 <_svfiprintf_r+0x188>
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	1d1a      	adds	r2, r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	9203      	str	r2, [sp, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfb8      	it	lt
 80094e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80094e8:	3402      	adds	r4, #2
 80094ea:	9305      	str	r3, [sp, #20]
 80094ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095b8 <_svfiprintf_r+0x1fc>
 80094f0:	7821      	ldrb	r1, [r4, #0]
 80094f2:	2203      	movs	r2, #3
 80094f4:	4650      	mov	r0, sl
 80094f6:	f7f6 fe7b 	bl	80001f0 <memchr>
 80094fa:	b140      	cbz	r0, 800950e <_svfiprintf_r+0x152>
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	eba0 000a 	sub.w	r0, r0, sl
 8009502:	fa03 f000 	lsl.w	r0, r3, r0
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	4303      	orrs	r3, r0
 800950a:	3401      	adds	r4, #1
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009512:	4826      	ldr	r0, [pc, #152]	; (80095ac <_svfiprintf_r+0x1f0>)
 8009514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009518:	2206      	movs	r2, #6
 800951a:	f7f6 fe69 	bl	80001f0 <memchr>
 800951e:	2800      	cmp	r0, #0
 8009520:	d038      	beq.n	8009594 <_svfiprintf_r+0x1d8>
 8009522:	4b23      	ldr	r3, [pc, #140]	; (80095b0 <_svfiprintf_r+0x1f4>)
 8009524:	bb1b      	cbnz	r3, 800956e <_svfiprintf_r+0x1b2>
 8009526:	9b03      	ldr	r3, [sp, #12]
 8009528:	3307      	adds	r3, #7
 800952a:	f023 0307 	bic.w	r3, r3, #7
 800952e:	3308      	adds	r3, #8
 8009530:	9303      	str	r3, [sp, #12]
 8009532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009534:	4433      	add	r3, r6
 8009536:	9309      	str	r3, [sp, #36]	; 0x24
 8009538:	e767      	b.n	800940a <_svfiprintf_r+0x4e>
 800953a:	fb0c 3202 	mla	r2, ip, r2, r3
 800953e:	460c      	mov	r4, r1
 8009540:	2001      	movs	r0, #1
 8009542:	e7a5      	b.n	8009490 <_svfiprintf_r+0xd4>
 8009544:	2300      	movs	r3, #0
 8009546:	3401      	adds	r4, #1
 8009548:	9305      	str	r3, [sp, #20]
 800954a:	4619      	mov	r1, r3
 800954c:	f04f 0c0a 	mov.w	ip, #10
 8009550:	4620      	mov	r0, r4
 8009552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009556:	3a30      	subs	r2, #48	; 0x30
 8009558:	2a09      	cmp	r2, #9
 800955a:	d903      	bls.n	8009564 <_svfiprintf_r+0x1a8>
 800955c:	2b00      	cmp	r3, #0
 800955e:	d0c5      	beq.n	80094ec <_svfiprintf_r+0x130>
 8009560:	9105      	str	r1, [sp, #20]
 8009562:	e7c3      	b.n	80094ec <_svfiprintf_r+0x130>
 8009564:	fb0c 2101 	mla	r1, ip, r1, r2
 8009568:	4604      	mov	r4, r0
 800956a:	2301      	movs	r3, #1
 800956c:	e7f0      	b.n	8009550 <_svfiprintf_r+0x194>
 800956e:	ab03      	add	r3, sp, #12
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	462a      	mov	r2, r5
 8009574:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <_svfiprintf_r+0x1f8>)
 8009576:	a904      	add	r1, sp, #16
 8009578:	4638      	mov	r0, r7
 800957a:	f3af 8000 	nop.w
 800957e:	1c42      	adds	r2, r0, #1
 8009580:	4606      	mov	r6, r0
 8009582:	d1d6      	bne.n	8009532 <_svfiprintf_r+0x176>
 8009584:	89ab      	ldrh	r3, [r5, #12]
 8009586:	065b      	lsls	r3, r3, #25
 8009588:	f53f af2c 	bmi.w	80093e4 <_svfiprintf_r+0x28>
 800958c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800958e:	b01d      	add	sp, #116	; 0x74
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	ab03      	add	r3, sp, #12
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	462a      	mov	r2, r5
 800959a:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <_svfiprintf_r+0x1f8>)
 800959c:	a904      	add	r1, sp, #16
 800959e:	4638      	mov	r0, r7
 80095a0:	f000 f87a 	bl	8009698 <_printf_i>
 80095a4:	e7eb      	b.n	800957e <_svfiprintf_r+0x1c2>
 80095a6:	bf00      	nop
 80095a8:	08009b80 	.word	0x08009b80
 80095ac:	08009b8a 	.word	0x08009b8a
 80095b0:	00000000 	.word	0x00000000
 80095b4:	08009305 	.word	0x08009305
 80095b8:	08009b86 	.word	0x08009b86

080095bc <_printf_common>:
 80095bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	4616      	mov	r6, r2
 80095c2:	4699      	mov	r9, r3
 80095c4:	688a      	ldr	r2, [r1, #8]
 80095c6:	690b      	ldr	r3, [r1, #16]
 80095c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	bfb8      	it	lt
 80095d0:	4613      	movlt	r3, r2
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095d8:	4607      	mov	r7, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	b10a      	cbz	r2, 80095e2 <_printf_common+0x26>
 80095de:	3301      	adds	r3, #1
 80095e0:	6033      	str	r3, [r6, #0]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	0699      	lsls	r1, r3, #26
 80095e6:	bf42      	ittt	mi
 80095e8:	6833      	ldrmi	r3, [r6, #0]
 80095ea:	3302      	addmi	r3, #2
 80095ec:	6033      	strmi	r3, [r6, #0]
 80095ee:	6825      	ldr	r5, [r4, #0]
 80095f0:	f015 0506 	ands.w	r5, r5, #6
 80095f4:	d106      	bne.n	8009604 <_printf_common+0x48>
 80095f6:	f104 0a19 	add.w	sl, r4, #25
 80095fa:	68e3      	ldr	r3, [r4, #12]
 80095fc:	6832      	ldr	r2, [r6, #0]
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	42ab      	cmp	r3, r5
 8009602:	dc26      	bgt.n	8009652 <_printf_common+0x96>
 8009604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009608:	1e13      	subs	r3, r2, #0
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	bf18      	it	ne
 800960e:	2301      	movne	r3, #1
 8009610:	0692      	lsls	r2, r2, #26
 8009612:	d42b      	bmi.n	800966c <_printf_common+0xb0>
 8009614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009618:	4649      	mov	r1, r9
 800961a:	4638      	mov	r0, r7
 800961c:	47c0      	blx	r8
 800961e:	3001      	adds	r0, #1
 8009620:	d01e      	beq.n	8009660 <_printf_common+0xa4>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	68e5      	ldr	r5, [r4, #12]
 8009626:	6832      	ldr	r2, [r6, #0]
 8009628:	f003 0306 	and.w	r3, r3, #6
 800962c:	2b04      	cmp	r3, #4
 800962e:	bf08      	it	eq
 8009630:	1aad      	subeq	r5, r5, r2
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	6922      	ldr	r2, [r4, #16]
 8009636:	bf0c      	ite	eq
 8009638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800963c:	2500      	movne	r5, #0
 800963e:	4293      	cmp	r3, r2
 8009640:	bfc4      	itt	gt
 8009642:	1a9b      	subgt	r3, r3, r2
 8009644:	18ed      	addgt	r5, r5, r3
 8009646:	2600      	movs	r6, #0
 8009648:	341a      	adds	r4, #26
 800964a:	42b5      	cmp	r5, r6
 800964c:	d11a      	bne.n	8009684 <_printf_common+0xc8>
 800964e:	2000      	movs	r0, #0
 8009650:	e008      	b.n	8009664 <_printf_common+0xa8>
 8009652:	2301      	movs	r3, #1
 8009654:	4652      	mov	r2, sl
 8009656:	4649      	mov	r1, r9
 8009658:	4638      	mov	r0, r7
 800965a:	47c0      	blx	r8
 800965c:	3001      	adds	r0, #1
 800965e:	d103      	bne.n	8009668 <_printf_common+0xac>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295
 8009664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009668:	3501      	adds	r5, #1
 800966a:	e7c6      	b.n	80095fa <_printf_common+0x3e>
 800966c:	18e1      	adds	r1, r4, r3
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	2030      	movs	r0, #48	; 0x30
 8009672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009676:	4422      	add	r2, r4
 8009678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800967c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009680:	3302      	adds	r3, #2
 8009682:	e7c7      	b.n	8009614 <_printf_common+0x58>
 8009684:	2301      	movs	r3, #1
 8009686:	4622      	mov	r2, r4
 8009688:	4649      	mov	r1, r9
 800968a:	4638      	mov	r0, r7
 800968c:	47c0      	blx	r8
 800968e:	3001      	adds	r0, #1
 8009690:	d0e6      	beq.n	8009660 <_printf_common+0xa4>
 8009692:	3601      	adds	r6, #1
 8009694:	e7d9      	b.n	800964a <_printf_common+0x8e>
	...

08009698 <_printf_i>:
 8009698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	460c      	mov	r4, r1
 800969e:	4691      	mov	r9, r2
 80096a0:	7e27      	ldrb	r7, [r4, #24]
 80096a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096a4:	2f78      	cmp	r7, #120	; 0x78
 80096a6:	4680      	mov	r8, r0
 80096a8:	469a      	mov	sl, r3
 80096aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096ae:	d807      	bhi.n	80096c0 <_printf_i+0x28>
 80096b0:	2f62      	cmp	r7, #98	; 0x62
 80096b2:	d80a      	bhi.n	80096ca <_printf_i+0x32>
 80096b4:	2f00      	cmp	r7, #0
 80096b6:	f000 80d8 	beq.w	800986a <_printf_i+0x1d2>
 80096ba:	2f58      	cmp	r7, #88	; 0x58
 80096bc:	f000 80a3 	beq.w	8009806 <_printf_i+0x16e>
 80096c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096c8:	e03a      	b.n	8009740 <_printf_i+0xa8>
 80096ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ce:	2b15      	cmp	r3, #21
 80096d0:	d8f6      	bhi.n	80096c0 <_printf_i+0x28>
 80096d2:	a001      	add	r0, pc, #4	; (adr r0, 80096d8 <_printf_i+0x40>)
 80096d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80096d8:	08009731 	.word	0x08009731
 80096dc:	08009745 	.word	0x08009745
 80096e0:	080096c1 	.word	0x080096c1
 80096e4:	080096c1 	.word	0x080096c1
 80096e8:	080096c1 	.word	0x080096c1
 80096ec:	080096c1 	.word	0x080096c1
 80096f0:	08009745 	.word	0x08009745
 80096f4:	080096c1 	.word	0x080096c1
 80096f8:	080096c1 	.word	0x080096c1
 80096fc:	080096c1 	.word	0x080096c1
 8009700:	080096c1 	.word	0x080096c1
 8009704:	08009851 	.word	0x08009851
 8009708:	08009775 	.word	0x08009775
 800970c:	08009833 	.word	0x08009833
 8009710:	080096c1 	.word	0x080096c1
 8009714:	080096c1 	.word	0x080096c1
 8009718:	08009873 	.word	0x08009873
 800971c:	080096c1 	.word	0x080096c1
 8009720:	08009775 	.word	0x08009775
 8009724:	080096c1 	.word	0x080096c1
 8009728:	080096c1 	.word	0x080096c1
 800972c:	0800983b 	.word	0x0800983b
 8009730:	680b      	ldr	r3, [r1, #0]
 8009732:	1d1a      	adds	r2, r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	600a      	str	r2, [r1, #0]
 8009738:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800973c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009740:	2301      	movs	r3, #1
 8009742:	e0a3      	b.n	800988c <_printf_i+0x1f4>
 8009744:	6825      	ldr	r5, [r4, #0]
 8009746:	6808      	ldr	r0, [r1, #0]
 8009748:	062e      	lsls	r6, r5, #24
 800974a:	f100 0304 	add.w	r3, r0, #4
 800974e:	d50a      	bpl.n	8009766 <_printf_i+0xce>
 8009750:	6805      	ldr	r5, [r0, #0]
 8009752:	600b      	str	r3, [r1, #0]
 8009754:	2d00      	cmp	r5, #0
 8009756:	da03      	bge.n	8009760 <_printf_i+0xc8>
 8009758:	232d      	movs	r3, #45	; 0x2d
 800975a:	426d      	negs	r5, r5
 800975c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009760:	485e      	ldr	r0, [pc, #376]	; (80098dc <_printf_i+0x244>)
 8009762:	230a      	movs	r3, #10
 8009764:	e019      	b.n	800979a <_printf_i+0x102>
 8009766:	f015 0f40 	tst.w	r5, #64	; 0x40
 800976a:	6805      	ldr	r5, [r0, #0]
 800976c:	600b      	str	r3, [r1, #0]
 800976e:	bf18      	it	ne
 8009770:	b22d      	sxthne	r5, r5
 8009772:	e7ef      	b.n	8009754 <_printf_i+0xbc>
 8009774:	680b      	ldr	r3, [r1, #0]
 8009776:	6825      	ldr	r5, [r4, #0]
 8009778:	1d18      	adds	r0, r3, #4
 800977a:	6008      	str	r0, [r1, #0]
 800977c:	0628      	lsls	r0, r5, #24
 800977e:	d501      	bpl.n	8009784 <_printf_i+0xec>
 8009780:	681d      	ldr	r5, [r3, #0]
 8009782:	e002      	b.n	800978a <_printf_i+0xf2>
 8009784:	0669      	lsls	r1, r5, #25
 8009786:	d5fb      	bpl.n	8009780 <_printf_i+0xe8>
 8009788:	881d      	ldrh	r5, [r3, #0]
 800978a:	4854      	ldr	r0, [pc, #336]	; (80098dc <_printf_i+0x244>)
 800978c:	2f6f      	cmp	r7, #111	; 0x6f
 800978e:	bf0c      	ite	eq
 8009790:	2308      	moveq	r3, #8
 8009792:	230a      	movne	r3, #10
 8009794:	2100      	movs	r1, #0
 8009796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800979a:	6866      	ldr	r6, [r4, #4]
 800979c:	60a6      	str	r6, [r4, #8]
 800979e:	2e00      	cmp	r6, #0
 80097a0:	bfa2      	ittt	ge
 80097a2:	6821      	ldrge	r1, [r4, #0]
 80097a4:	f021 0104 	bicge.w	r1, r1, #4
 80097a8:	6021      	strge	r1, [r4, #0]
 80097aa:	b90d      	cbnz	r5, 80097b0 <_printf_i+0x118>
 80097ac:	2e00      	cmp	r6, #0
 80097ae:	d04d      	beq.n	800984c <_printf_i+0x1b4>
 80097b0:	4616      	mov	r6, r2
 80097b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80097b6:	fb03 5711 	mls	r7, r3, r1, r5
 80097ba:	5dc7      	ldrb	r7, [r0, r7]
 80097bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097c0:	462f      	mov	r7, r5
 80097c2:	42bb      	cmp	r3, r7
 80097c4:	460d      	mov	r5, r1
 80097c6:	d9f4      	bls.n	80097b2 <_printf_i+0x11a>
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d10b      	bne.n	80097e4 <_printf_i+0x14c>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	07df      	lsls	r7, r3, #31
 80097d0:	d508      	bpl.n	80097e4 <_printf_i+0x14c>
 80097d2:	6923      	ldr	r3, [r4, #16]
 80097d4:	6861      	ldr	r1, [r4, #4]
 80097d6:	4299      	cmp	r1, r3
 80097d8:	bfde      	ittt	le
 80097da:	2330      	movle	r3, #48	; 0x30
 80097dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097e4:	1b92      	subs	r2, r2, r6
 80097e6:	6122      	str	r2, [r4, #16]
 80097e8:	f8cd a000 	str.w	sl, [sp]
 80097ec:	464b      	mov	r3, r9
 80097ee:	aa03      	add	r2, sp, #12
 80097f0:	4621      	mov	r1, r4
 80097f2:	4640      	mov	r0, r8
 80097f4:	f7ff fee2 	bl	80095bc <_printf_common>
 80097f8:	3001      	adds	r0, #1
 80097fa:	d14c      	bne.n	8009896 <_printf_i+0x1fe>
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	b004      	add	sp, #16
 8009802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009806:	4835      	ldr	r0, [pc, #212]	; (80098dc <_printf_i+0x244>)
 8009808:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	680e      	ldr	r6, [r1, #0]
 8009810:	061f      	lsls	r7, r3, #24
 8009812:	f856 5b04 	ldr.w	r5, [r6], #4
 8009816:	600e      	str	r6, [r1, #0]
 8009818:	d514      	bpl.n	8009844 <_printf_i+0x1ac>
 800981a:	07d9      	lsls	r1, r3, #31
 800981c:	bf44      	itt	mi
 800981e:	f043 0320 	orrmi.w	r3, r3, #32
 8009822:	6023      	strmi	r3, [r4, #0]
 8009824:	b91d      	cbnz	r5, 800982e <_printf_i+0x196>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	f023 0320 	bic.w	r3, r3, #32
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	2310      	movs	r3, #16
 8009830:	e7b0      	b.n	8009794 <_printf_i+0xfc>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	f043 0320 	orr.w	r3, r3, #32
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	2378      	movs	r3, #120	; 0x78
 800983c:	4828      	ldr	r0, [pc, #160]	; (80098e0 <_printf_i+0x248>)
 800983e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009842:	e7e3      	b.n	800980c <_printf_i+0x174>
 8009844:	065e      	lsls	r6, r3, #25
 8009846:	bf48      	it	mi
 8009848:	b2ad      	uxthmi	r5, r5
 800984a:	e7e6      	b.n	800981a <_printf_i+0x182>
 800984c:	4616      	mov	r6, r2
 800984e:	e7bb      	b.n	80097c8 <_printf_i+0x130>
 8009850:	680b      	ldr	r3, [r1, #0]
 8009852:	6826      	ldr	r6, [r4, #0]
 8009854:	6960      	ldr	r0, [r4, #20]
 8009856:	1d1d      	adds	r5, r3, #4
 8009858:	600d      	str	r5, [r1, #0]
 800985a:	0635      	lsls	r5, r6, #24
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	d501      	bpl.n	8009864 <_printf_i+0x1cc>
 8009860:	6018      	str	r0, [r3, #0]
 8009862:	e002      	b.n	800986a <_printf_i+0x1d2>
 8009864:	0671      	lsls	r1, r6, #25
 8009866:	d5fb      	bpl.n	8009860 <_printf_i+0x1c8>
 8009868:	8018      	strh	r0, [r3, #0]
 800986a:	2300      	movs	r3, #0
 800986c:	6123      	str	r3, [r4, #16]
 800986e:	4616      	mov	r6, r2
 8009870:	e7ba      	b.n	80097e8 <_printf_i+0x150>
 8009872:	680b      	ldr	r3, [r1, #0]
 8009874:	1d1a      	adds	r2, r3, #4
 8009876:	600a      	str	r2, [r1, #0]
 8009878:	681e      	ldr	r6, [r3, #0]
 800987a:	6862      	ldr	r2, [r4, #4]
 800987c:	2100      	movs	r1, #0
 800987e:	4630      	mov	r0, r6
 8009880:	f7f6 fcb6 	bl	80001f0 <memchr>
 8009884:	b108      	cbz	r0, 800988a <_printf_i+0x1f2>
 8009886:	1b80      	subs	r0, r0, r6
 8009888:	6060      	str	r0, [r4, #4]
 800988a:	6863      	ldr	r3, [r4, #4]
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	2300      	movs	r3, #0
 8009890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009894:	e7a8      	b.n	80097e8 <_printf_i+0x150>
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	4632      	mov	r2, r6
 800989a:	4649      	mov	r1, r9
 800989c:	4640      	mov	r0, r8
 800989e:	47d0      	blx	sl
 80098a0:	3001      	adds	r0, #1
 80098a2:	d0ab      	beq.n	80097fc <_printf_i+0x164>
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	079b      	lsls	r3, r3, #30
 80098a8:	d413      	bmi.n	80098d2 <_printf_i+0x23a>
 80098aa:	68e0      	ldr	r0, [r4, #12]
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	4298      	cmp	r0, r3
 80098b0:	bfb8      	it	lt
 80098b2:	4618      	movlt	r0, r3
 80098b4:	e7a4      	b.n	8009800 <_printf_i+0x168>
 80098b6:	2301      	movs	r3, #1
 80098b8:	4632      	mov	r2, r6
 80098ba:	4649      	mov	r1, r9
 80098bc:	4640      	mov	r0, r8
 80098be:	47d0      	blx	sl
 80098c0:	3001      	adds	r0, #1
 80098c2:	d09b      	beq.n	80097fc <_printf_i+0x164>
 80098c4:	3501      	adds	r5, #1
 80098c6:	68e3      	ldr	r3, [r4, #12]
 80098c8:	9903      	ldr	r1, [sp, #12]
 80098ca:	1a5b      	subs	r3, r3, r1
 80098cc:	42ab      	cmp	r3, r5
 80098ce:	dcf2      	bgt.n	80098b6 <_printf_i+0x21e>
 80098d0:	e7eb      	b.n	80098aa <_printf_i+0x212>
 80098d2:	2500      	movs	r5, #0
 80098d4:	f104 0619 	add.w	r6, r4, #25
 80098d8:	e7f5      	b.n	80098c6 <_printf_i+0x22e>
 80098da:	bf00      	nop
 80098dc:	08009b91 	.word	0x08009b91
 80098e0:	08009ba2 	.word	0x08009ba2

080098e4 <memcpy>:
 80098e4:	440a      	add	r2, r1
 80098e6:	4291      	cmp	r1, r2
 80098e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098ec:	d100      	bne.n	80098f0 <memcpy+0xc>
 80098ee:	4770      	bx	lr
 80098f0:	b510      	push	{r4, lr}
 80098f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098fa:	4291      	cmp	r1, r2
 80098fc:	d1f9      	bne.n	80098f2 <memcpy+0xe>
 80098fe:	bd10      	pop	{r4, pc}

08009900 <memmove>:
 8009900:	4288      	cmp	r0, r1
 8009902:	b510      	push	{r4, lr}
 8009904:	eb01 0402 	add.w	r4, r1, r2
 8009908:	d902      	bls.n	8009910 <memmove+0x10>
 800990a:	4284      	cmp	r4, r0
 800990c:	4623      	mov	r3, r4
 800990e:	d807      	bhi.n	8009920 <memmove+0x20>
 8009910:	1e43      	subs	r3, r0, #1
 8009912:	42a1      	cmp	r1, r4
 8009914:	d008      	beq.n	8009928 <memmove+0x28>
 8009916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800991a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800991e:	e7f8      	b.n	8009912 <memmove+0x12>
 8009920:	4402      	add	r2, r0
 8009922:	4601      	mov	r1, r0
 8009924:	428a      	cmp	r2, r1
 8009926:	d100      	bne.n	800992a <memmove+0x2a>
 8009928:	bd10      	pop	{r4, pc}
 800992a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800992e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009932:	e7f7      	b.n	8009924 <memmove+0x24>

08009934 <_free_r>:
 8009934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009936:	2900      	cmp	r1, #0
 8009938:	d048      	beq.n	80099cc <_free_r+0x98>
 800993a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800993e:	9001      	str	r0, [sp, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	f1a1 0404 	sub.w	r4, r1, #4
 8009946:	bfb8      	it	lt
 8009948:	18e4      	addlt	r4, r4, r3
 800994a:	f000 f8d3 	bl	8009af4 <__malloc_lock>
 800994e:	4a20      	ldr	r2, [pc, #128]	; (80099d0 <_free_r+0x9c>)
 8009950:	9801      	ldr	r0, [sp, #4]
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	4615      	mov	r5, r2
 8009956:	b933      	cbnz	r3, 8009966 <_free_r+0x32>
 8009958:	6063      	str	r3, [r4, #4]
 800995a:	6014      	str	r4, [r2, #0]
 800995c:	b003      	add	sp, #12
 800995e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009962:	f000 b8cd 	b.w	8009b00 <__malloc_unlock>
 8009966:	42a3      	cmp	r3, r4
 8009968:	d90b      	bls.n	8009982 <_free_r+0x4e>
 800996a:	6821      	ldr	r1, [r4, #0]
 800996c:	1862      	adds	r2, r4, r1
 800996e:	4293      	cmp	r3, r2
 8009970:	bf04      	itt	eq
 8009972:	681a      	ldreq	r2, [r3, #0]
 8009974:	685b      	ldreq	r3, [r3, #4]
 8009976:	6063      	str	r3, [r4, #4]
 8009978:	bf04      	itt	eq
 800997a:	1852      	addeq	r2, r2, r1
 800997c:	6022      	streq	r2, [r4, #0]
 800997e:	602c      	str	r4, [r5, #0]
 8009980:	e7ec      	b.n	800995c <_free_r+0x28>
 8009982:	461a      	mov	r2, r3
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	b10b      	cbz	r3, 800998c <_free_r+0x58>
 8009988:	42a3      	cmp	r3, r4
 800998a:	d9fa      	bls.n	8009982 <_free_r+0x4e>
 800998c:	6811      	ldr	r1, [r2, #0]
 800998e:	1855      	adds	r5, r2, r1
 8009990:	42a5      	cmp	r5, r4
 8009992:	d10b      	bne.n	80099ac <_free_r+0x78>
 8009994:	6824      	ldr	r4, [r4, #0]
 8009996:	4421      	add	r1, r4
 8009998:	1854      	adds	r4, r2, r1
 800999a:	42a3      	cmp	r3, r4
 800999c:	6011      	str	r1, [r2, #0]
 800999e:	d1dd      	bne.n	800995c <_free_r+0x28>
 80099a0:	681c      	ldr	r4, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	6053      	str	r3, [r2, #4]
 80099a6:	4421      	add	r1, r4
 80099a8:	6011      	str	r1, [r2, #0]
 80099aa:	e7d7      	b.n	800995c <_free_r+0x28>
 80099ac:	d902      	bls.n	80099b4 <_free_r+0x80>
 80099ae:	230c      	movs	r3, #12
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	e7d3      	b.n	800995c <_free_r+0x28>
 80099b4:	6825      	ldr	r5, [r4, #0]
 80099b6:	1961      	adds	r1, r4, r5
 80099b8:	428b      	cmp	r3, r1
 80099ba:	bf04      	itt	eq
 80099bc:	6819      	ldreq	r1, [r3, #0]
 80099be:	685b      	ldreq	r3, [r3, #4]
 80099c0:	6063      	str	r3, [r4, #4]
 80099c2:	bf04      	itt	eq
 80099c4:	1949      	addeq	r1, r1, r5
 80099c6:	6021      	streq	r1, [r4, #0]
 80099c8:	6054      	str	r4, [r2, #4]
 80099ca:	e7c7      	b.n	800995c <_free_r+0x28>
 80099cc:	b003      	add	sp, #12
 80099ce:	bd30      	pop	{r4, r5, pc}
 80099d0:	20000388 	.word	0x20000388

080099d4 <_malloc_r>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	1ccd      	adds	r5, r1, #3
 80099d8:	f025 0503 	bic.w	r5, r5, #3
 80099dc:	3508      	adds	r5, #8
 80099de:	2d0c      	cmp	r5, #12
 80099e0:	bf38      	it	cc
 80099e2:	250c      	movcc	r5, #12
 80099e4:	2d00      	cmp	r5, #0
 80099e6:	4606      	mov	r6, r0
 80099e8:	db01      	blt.n	80099ee <_malloc_r+0x1a>
 80099ea:	42a9      	cmp	r1, r5
 80099ec:	d903      	bls.n	80099f6 <_malloc_r+0x22>
 80099ee:	230c      	movs	r3, #12
 80099f0:	6033      	str	r3, [r6, #0]
 80099f2:	2000      	movs	r0, #0
 80099f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f6:	f000 f87d 	bl	8009af4 <__malloc_lock>
 80099fa:	4921      	ldr	r1, [pc, #132]	; (8009a80 <_malloc_r+0xac>)
 80099fc:	680a      	ldr	r2, [r1, #0]
 80099fe:	4614      	mov	r4, r2
 8009a00:	b99c      	cbnz	r4, 8009a2a <_malloc_r+0x56>
 8009a02:	4f20      	ldr	r7, [pc, #128]	; (8009a84 <_malloc_r+0xb0>)
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	b923      	cbnz	r3, 8009a12 <_malloc_r+0x3e>
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 f862 	bl	8009ad4 <_sbrk_r>
 8009a10:	6038      	str	r0, [r7, #0]
 8009a12:	4629      	mov	r1, r5
 8009a14:	4630      	mov	r0, r6
 8009a16:	f000 f85d 	bl	8009ad4 <_sbrk_r>
 8009a1a:	1c43      	adds	r3, r0, #1
 8009a1c:	d123      	bne.n	8009a66 <_malloc_r+0x92>
 8009a1e:	230c      	movs	r3, #12
 8009a20:	6033      	str	r3, [r6, #0]
 8009a22:	4630      	mov	r0, r6
 8009a24:	f000 f86c 	bl	8009b00 <__malloc_unlock>
 8009a28:	e7e3      	b.n	80099f2 <_malloc_r+0x1e>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	1b5b      	subs	r3, r3, r5
 8009a2e:	d417      	bmi.n	8009a60 <_malloc_r+0x8c>
 8009a30:	2b0b      	cmp	r3, #11
 8009a32:	d903      	bls.n	8009a3c <_malloc_r+0x68>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	441c      	add	r4, r3
 8009a38:	6025      	str	r5, [r4, #0]
 8009a3a:	e004      	b.n	8009a46 <_malloc_r+0x72>
 8009a3c:	6863      	ldr	r3, [r4, #4]
 8009a3e:	42a2      	cmp	r2, r4
 8009a40:	bf0c      	ite	eq
 8009a42:	600b      	streq	r3, [r1, #0]
 8009a44:	6053      	strne	r3, [r2, #4]
 8009a46:	4630      	mov	r0, r6
 8009a48:	f000 f85a 	bl	8009b00 <__malloc_unlock>
 8009a4c:	f104 000b 	add.w	r0, r4, #11
 8009a50:	1d23      	adds	r3, r4, #4
 8009a52:	f020 0007 	bic.w	r0, r0, #7
 8009a56:	1ac2      	subs	r2, r0, r3
 8009a58:	d0cc      	beq.n	80099f4 <_malloc_r+0x20>
 8009a5a:	1a1b      	subs	r3, r3, r0
 8009a5c:	50a3      	str	r3, [r4, r2]
 8009a5e:	e7c9      	b.n	80099f4 <_malloc_r+0x20>
 8009a60:	4622      	mov	r2, r4
 8009a62:	6864      	ldr	r4, [r4, #4]
 8009a64:	e7cc      	b.n	8009a00 <_malloc_r+0x2c>
 8009a66:	1cc4      	adds	r4, r0, #3
 8009a68:	f024 0403 	bic.w	r4, r4, #3
 8009a6c:	42a0      	cmp	r0, r4
 8009a6e:	d0e3      	beq.n	8009a38 <_malloc_r+0x64>
 8009a70:	1a21      	subs	r1, r4, r0
 8009a72:	4630      	mov	r0, r6
 8009a74:	f000 f82e 	bl	8009ad4 <_sbrk_r>
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d1dd      	bne.n	8009a38 <_malloc_r+0x64>
 8009a7c:	e7cf      	b.n	8009a1e <_malloc_r+0x4a>
 8009a7e:	bf00      	nop
 8009a80:	20000388 	.word	0x20000388
 8009a84:	2000038c 	.word	0x2000038c

08009a88 <_realloc_r>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	460e      	mov	r6, r1
 8009a90:	b921      	cbnz	r1, 8009a9c <_realloc_r+0x14>
 8009a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a96:	4611      	mov	r1, r2
 8009a98:	f7ff bf9c 	b.w	80099d4 <_malloc_r>
 8009a9c:	b922      	cbnz	r2, 8009aa8 <_realloc_r+0x20>
 8009a9e:	f7ff ff49 	bl	8009934 <_free_r>
 8009aa2:	4625      	mov	r5, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa8:	f000 f830 	bl	8009b0c <_malloc_usable_size_r>
 8009aac:	42a0      	cmp	r0, r4
 8009aae:	d20f      	bcs.n	8009ad0 <_realloc_r+0x48>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	f7ff ff8e 	bl	80099d4 <_malloc_r>
 8009ab8:	4605      	mov	r5, r0
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d0f2      	beq.n	8009aa4 <_realloc_r+0x1c>
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4622      	mov	r2, r4
 8009ac2:	f7ff ff0f 	bl	80098e4 <memcpy>
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4638      	mov	r0, r7
 8009aca:	f7ff ff33 	bl	8009934 <_free_r>
 8009ace:	e7e9      	b.n	8009aa4 <_realloc_r+0x1c>
 8009ad0:	4635      	mov	r5, r6
 8009ad2:	e7e7      	b.n	8009aa4 <_realloc_r+0x1c>

08009ad4 <_sbrk_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d06      	ldr	r5, [pc, #24]	; (8009af0 <_sbrk_r+0x1c>)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	602b      	str	r3, [r5, #0]
 8009ae0:	f7f7 fb00 	bl	80010e4 <_sbrk>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_sbrk_r+0x1a>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_sbrk_r+0x1a>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	20000498 	.word	0x20000498

08009af4 <__malloc_lock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__malloc_lock+0x8>)
 8009af6:	f000 b811 	b.w	8009b1c <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	200004a0 	.word	0x200004a0

08009b00 <__malloc_unlock>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__malloc_unlock+0x8>)
 8009b02:	f000 b80c 	b.w	8009b1e <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	200004a0 	.word	0x200004a0

08009b0c <_malloc_usable_size_r>:
 8009b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b10:	1f18      	subs	r0, r3, #4
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	bfbc      	itt	lt
 8009b16:	580b      	ldrlt	r3, [r1, r0]
 8009b18:	18c0      	addlt	r0, r0, r3
 8009b1a:	4770      	bx	lr

08009b1c <__retarget_lock_acquire_recursive>:
 8009b1c:	4770      	bx	lr

08009b1e <__retarget_lock_release_recursive>:
 8009b1e:	4770      	bx	lr

08009b20 <_init>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	bf00      	nop
 8009b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b26:	bc08      	pop	{r3}
 8009b28:	469e      	mov	lr, r3
 8009b2a:	4770      	bx	lr

08009b2c <_fini>:
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	bf00      	nop
 8009b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b32:	bc08      	pop	{r3}
 8009b34:	469e      	mov	lr, r3
 8009b36:	4770      	bx	lr
